/*
 *      Header file of MIB
 *      Authors: David Hsu	<davidhsu@realtek.com.tw>
 *      Authors: Dick Tam	<dicktam@realtek.com.tw>
 *
 */


#ifndef INCLUDE_MIB_H
#define INCLUDE_MIB_H

#ifdef EMBED
#include <linux/config.h>
#include <rtk/options.h>
#include <config/autoconf.h>
#else
#include "../../../../include/linux/autoconf.h"
#include "../../../../config/autoconf.h"
#include "options.h"
#endif
#ifdef CONFIG_LUNA
#include "chip_deps.h"
#endif

/*+++++add by Jack for VoIP project 20/03/07+++++*/
#ifdef VOIP_SUPPORT
#include "voip_flash.h"
#include "voip_flash_mib.h"
#endif /*VOIP_SUPPORT*/
/*-----end-----*/
//
//ccwei for ioctl
//#include <linux/types.h>

#ifndef WIN32
#define __PACK__				__attribute__ ((packed))
#else
#define __PACK__
#endif

#ifdef WIN32
#pragma pack()
#endif

#if defined(CONFIG_LUNA) && defined(GEN_WAN_MAC)
#ifdef CONFIG_E8B
#if defined(WLAN_DUALBAND_CONCURRENT)
#define WAN_HW_ETHER_START_BASE 10
#else
#define WAN_HW_ETHER_START_BASE 5
#endif
#else
#define WAN_HW_ETHER_START_BASE 3
#endif /*CONFIG_E8B*/
#endif /*GEN_WAN_MAC*/
/*
 * Flash File System
 */

typedef enum { UNKNOWN_SETTING=0, RUNNING_SETTING=1, HW_SETTING=2, DEFAULT_SETTING=4, CURRENT_SETTING=8 } CONFIG_DATA_T;
typedef enum { CONFIG_MIB_ALL=0, CONFIG_MIB_TABLE, CONFIG_MIB_CHAIN } CONFIG_MIB_T;

#define SIGNATURE_LEN				8
#define HS_CONF_SETTING_SIGNATURE_TAG		((char *)"ADSL-HS-")
#define DS_CONF_SETTING_SIGNATURE_TAG		((char *)"ADSL-DS-")
#define CS_CONF_SETTING_SIGNATURE_TAG		((char *)"ADSL-CS-")
#define WEB_SIGNATURE_TAG			((char *)"ADSL-WEB")
#define FLASH_FILE_SYSTEM_VERSION		1
#define FLASH_DEFAULT_TO_ALL			0
#define FLASH_DEFAULT_TO_AUGMENT		1
#define FLASH_DEFAULT_TO_MEMORY			2


#ifdef CONFIG_USER_CWMP_TR069
#define MSG_SIZE (sizeof(struct cwmp_message) - sizeof(int))
enum {
	MSG_SEND = 10,
	MSG_EVENT_CONNREQ,
	MSG_TIMER,
	MSG_RECV,
	MSG_USERDATA_CHANGE,
	MSG_ACTIVE_NOTIFY,
	MSG_PRINT_PRMT
};

struct cwmp_message {
	int	msg_type;
	int	msg_datatype;
	void*	msg_data;
};
#endif

/* File header */
typedef struct param_header {
	unsigned char signature[SIGNATURE_LEN];
	unsigned char version;
	unsigned char checksum;
	unsigned int len;
} __PACK__ PARAM_HEADER_T, *PARAM_HEADER_Tp;

/* Firmware image header */
typedef struct _header_ {
 // Kao
	unsigned long signature;
	unsigned long startAddr;
	unsigned long len;
} IMG_HEADER_T, *IMG_HEADER_Tp;

#define FIRMWARE_MAGIC_NUMBER		0xa3d275e9
#define FIRMWARE_PARAM_SIZE		0x10
#define DST_IMAGE_ADDR			0x80000000

// Added by Mason Yu
#define ACT_NONE				0
#define ACT_START				1
#define ACT_STOP				2
#define ACT_RESTART				3

/* scramble saved configuration data */
#ifdef CONFIG_ENCODE_RAW_DATA
#define ENCODE_DATA(data,len) { \
	int i; \
	for (i = 0; i < (len); i++) \
		(data)[i] = ~ ((data)[i] + 0x38); \
}

#define DECODE_DATA(data,len) { \
	int i; \
	for (i = 0; i < (len); i++) \
		(data)[i] = ~(data)[i] - 0x38;	\
}
#else
#define ENCODE_DATA(data,len)
#define DECODE_DATA(data,len)
#endif

/* Do checksum and verification for configuration data */
#ifndef WIN32
static inline unsigned char CHECKSUM(unsigned char *data, unsigned int len)
#else
__inline unsigned char CHECKSUM(unsigned char *data, unsigned int len)
#endif
{
	unsigned int i;
	unsigned char sum=0;

	for (i=0; i<len; i++) {
		sum += data[i];
	}

	sum = ~sum + 1;
	return sum;
}

/*
 * Webpage gzip/unzip
 */
#define GZIP_MAX_NAME_LEN		60
typedef struct file_entry {
	char name[GZIP_MAX_NAME_LEN];
	unsigned long size;
} FILE_ENTRY_T, *FILE_ENTRY_Tp;


#define DWORD_SWAP(v) ( (((v&0xff)<<24)&0xff000000) | \
						((((v>>8)&0xff)<<16)&0xff0000) | \
						((((v>>16)&0xff)<<8)&0xff00) | \
						(((v>>24)&0xff)&0xff) )
#define WORD_SWAP(v) ((unsigned short)(((v>>8)&0xff) | ((v<<8)&0xff00)))

/*
 * ADSL Router MIB ID
 */
#define CS_ENTRY_ID								0

#define MIB_ADSL_LAN_IP							CS_ENTRY_ID + 1
#define MIB_ADSL_LAN_SUBNET						CS_ENTRY_ID + 2
#define MIB_ADSL_LAN_IP2						CS_ENTRY_ID + 3
#define MIB_ADSL_LAN_SUBNET2					CS_ENTRY_ID + 4
#define MIB_ADSL_LAN_DHCP						CS_ENTRY_ID + 5
#define MIB_ADSL_LAN_CLIENT_START				CS_ENTRY_ID + 6
#define MIB_ADSL_LAN_CLIENT_END					CS_ENTRY_ID + 7
#define MIB_ADSL_LAN_DHCP_LEASE					CS_ENTRY_ID + 8
#define MIB_ADSL_LAN_DHCP_DOMAIN				CS_ENTRY_ID + 9
#define MIB_ADSL_LAN_RIP						CS_ENTRY_ID + 10
#define MIB_ADSL_LAN_AUTOSEARCH					CS_ENTRY_ID + 11
#define MIB_ADSL_LAN_ENABLE_IP2					CS_ENTRY_ID + 12
#define MIB_ADSL_LAN_DHCP_POOLUSE				CS_ENTRY_ID + 13
#define MIB_DHCP_POOL_START						CS_ENTRY_ID + 14
#define MIB_DHCP_POOL_END						CS_ENTRY_ID + 15
#define MIB_DHCP_DNS_OPTION						CS_ENTRY_ID + 16
#ifdef DEFAULT_GATEWAY_V2
#define MIB_ADSL_WAN_DGW_IP						CS_ENTRY_ID + 17
#define MIB_ADSL_WAN_DGW_ITF					CS_ENTRY_ID + 18
#endif
#define MIB_ADSL_WAN_DNS_MODE					CS_ENTRY_ID + 19
#define MIB_ADSL_WAN_DNS1						CS_ENTRY_ID + 20
#define MIB_ADSL_WAN_DNS2						CS_ENTRY_ID + 21
#define MIB_ADSL_WAN_DNS3						CS_ENTRY_ID + 22
#define MIB_ADSL_CONNECTION_MODE				CS_ENTRY_ID + 23
#define MIB_ADSL_ENCAP_MODE						CS_ENTRY_ID + 24
#define MIB_ADSL_MODE							CS_ENTRY_ID + 25
#define MIB_ADSL_OLR							CS_ENTRY_ID + 26

#define MIB_RIP_ENABLE							CS_ENTRY_ID + 27
#define MIB_RIP_INTERFACE						CS_ENTRY_ID + 28
#define MIB_RIP_VERSION							CS_ENTRY_ID + 29

#define MIB_IPF_OUT_ACTION						CS_ENTRY_ID + 30
#define MIB_IPF_IN_ACTION						CS_ENTRY_ID + 31
#define MIB_MACF_OUT_ACTION						CS_ENTRY_ID + 32
#define MIB_MACF_IN_ACTION						CS_ENTRY_ID + 33
#define MIB_PORT_FW_ENABLE						CS_ENTRY_ID + 34
#define MIB_DMZ_ENABLE							CS_ENTRY_ID + 35
#define MIB_DMZ_IP							CS_ENTRY_ID + 36
#ifdef NATIP_FORWARDING
#define MIB_IP_FW_ENABLE						CS_ENTRY_ID + 37
#endif
#define MIB_USER_NAME							CS_ENTRY_ID + 38
#define MIB_USER_PASSWORD						CS_ENTRY_ID + 39
#define MIB_DEVICE_TYPE							CS_ENTRY_ID + 40
#define MIB_INIT_LINE							CS_ENTRY_ID + 41
#define MIB_INIT_SCRIPT							CS_ENTRY_ID + 42
#if defined(CONFIG_USER_SNMPD_SNMPD_V2CTRAP) || defined(_CWMP_MIB_)
#define MIB_SNMP_SYS_DESCR						CS_ENTRY_ID + 43
#endif //defined(CONFIG_USER_SNMPD_SNMPD_V2CTRAP) || defined(_CWMP_MIB_)
#ifdef CONFIG_USER_SNMPD_SNMPD_V2CTRAP
#define MIB_SNMP_SYS_OID						CS_ENTRY_ID + 44
#define MIB_SNMP_SYS_CONTACT					CS_ENTRY_ID + 45
#define MIB_SNMP_SYS_LOCATION					CS_ENTRY_ID + 46
#define MIB_SNMP_TRAP_IP						CS_ENTRY_ID + 47
#define MIB_SNMP_COMM_RO						CS_ENTRY_ID + 48
#define MIB_SNMP_COMM_RW						CS_ENTRY_ID + 49
#endif
#define MIB_SNMP_SYS_NAME						CS_ENTRY_ID + 50

#define MIB_ATM_LOOPBACK						CS_ENTRY_ID + 51
#define MIB_ATM_MODE							CS_ENTRY_ID + 52
#define MIB_ATM_VC_SWITCH						CS_ENTRY_ID + 53
#define MIB_ATM_MAC1							CS_ENTRY_ID + 54
#define MIB_ATM_MAC2							CS_ENTRY_ID + 55
#define MIB_ATM_VC_AUTOSEARCH					CS_ENTRY_ID + 56
// Kao
#define MIB_BRCTL_AGEINGTIME					CS_ENTRY_ID + 57
#define MIB_BRCTL_STP							CS_ENTRY_ID + 58

#define MIB_MPMODE								CS_ENTRY_ID + 59
#define MIB_QOS_DOMAIN							CS_ENTRY_ID + 60
#ifdef QOS_DIFFSERV
#define MIB_QOS_DIFFSERV						CS_ENTRY_ID + 61
#define MIB_DIFFSERV_PHBCLASS					CS_ENTRY_ID + 62
#endif
#define MIB_IGMP_PROXY							CS_ENTRY_ID + 63
#define MIB_IGMP_PROXY_ITF						CS_ENTRY_ID + 64
#define MIB_IPPT_ITF							CS_ENTRY_ID + 65
#define MIB_IPPT_LEASE							CS_ENTRY_ID + 66
#define MIB_IPPT_LANACC							CS_ENTRY_ID + 67
#define MIB_SPC_ENABLE							CS_ENTRY_ID + 68
#define MIB_SPC_IPTYPE							CS_ENTRY_ID + 69
#define MIB_ACL_CAPABILITY						CS_ENTRY_ID + 70
#ifdef CONFIG_USER_DHCP_SERVER
#define MIB_ADSL_WAN_DHCPS						CS_ENTRY_ID + 71
#define MIB_DHCP_MODE							CS_ENTRY_ID + 72
#endif
#if defined(URL_BLOCKING_SUPPORT) || defined(URL_ALLOWING_SUPPORT)
#define MIB_URL_CAPABILITY						CS_ENTRY_ID + 73  // Mason Yu for URL Blocking
#endif
#ifdef TIME_ZONE
#define MIB_NTP_ENABLED 						CS_ENTRY_ID + 74
#define MIB_NTP_TIMEZONE_DB_INDEX					CS_ENTRY_ID + 75
#define MIB_DST_ENABLED 						CS_ENTRY_ID + 76
#define MIB_NTP_SERVER_ID 						CS_ENTRY_ID + 77
#define MIB_NTP_SERVER_HOST1					CS_ENTRY_ID + 79
#define MIB_NTP_SERVER_HOST2					CS_ENTRY_ID + 80
#endif
#define	MIB_UPNP_DAEMON							CS_ENTRY_ID + 81  // Mason Yu for UPNP
#define MIB_UPNP_EXT_ITF						CS_ENTRY_ID + 82
#ifdef DOMAIN_BLOCKING_SUPPORT
#define MIB_DOMAINBLK_CAPABILITY				CS_ENTRY_ID + 83  // Mason Yu for Domain Blocking
#endif

#ifdef CONFIG_IGMP_FORBID
#define MIB_IGMP_FORBID_ENABLE					CS_ENTRY_ID + 84     //alex_huang for igmp forbid
#endif
#define MIB_QOS_DEFAULT_QUEUE					CS_ENTRY_ID + 85

// Jenny, system log
#define MIB_SYSLOG_LOG_LEVEL					CS_ENTRY_ID + 86
#define MIB_SYSLOG_DISPLAY_LEVEL				CS_ENTRY_ID + 87
#ifdef CONFIG_USER_RTK_SYSLOG_REMOTE
#define MIB_SYSLOG_MODE							CS_ENTRY_ID + 88
#define MIB_SYSLOG_SERVER_IP					CS_ENTRY_ID + 89
#define MIB_SYSLOG_SERVER_PORT					CS_ENTRY_ID + 90
#endif

// Added by Mason Yu for write superUser into Current Setting
#define MIB_SUSER_NAME							CS_ENTRY_ID + 91
#define MIB_SUSER_PASSWORD						CS_ENTRY_ID + 92
#define MIB_ADSL_TONE							CS_ENTRY_ID + 93
// ioctl for direct bridge mode, jiunming
#define MIB_DIRECT_BRIDGE_MODE					CS_ENTRY_ID + 94
#define MIB_ADSL_HIGH_INP						CS_ENTRY_ID + 95
#define MIB_SYSLOG								CS_ENTRY_ID + 100
#define MIB_MAXLOGLEN							CS_ENTRY_ID + 101
#define MIB_ADSL_DEBUG							CS_ENTRY_ID + 102
#define MIB_ETH_MAC_CTRL						CS_ENTRY_ID + 103

//for DoS
#ifdef DOS_SUPPORT
#define MIB_DOS_ENABLED							CS_ENTRY_ID + 104
#define MIB_DOS_SYSSYN_FLOOD					CS_ENTRY_ID + 105
#define MIB_DOS_SYSFIN_FLOOD					CS_ENTRY_ID + 106
#define MIB_DOS_SYSUDP_FLOOD					CS_ENTRY_ID + 107
#define MIB_DOS_SYSICMP_FLOOD					CS_ENTRY_ID + 108
#define MIB_DOS_PIPSYN_FLOOD					CS_ENTRY_ID + 109
#define MIB_DOS_PIPFIN_FLOOD					CS_ENTRY_ID + 110
#define MIB_DOS_PIPUDP_FLOOD					CS_ENTRY_ID + 111
#define MIB_DOS_PIPICMP_FLOOD					CS_ENTRY_ID + 112
#define MIB_DOS_BLOCK_TIME						CS_ENTRY_ID + 113
#endif

// Mason Yu for DHCP Server Gateway address
#define MIB_ADSL_LAN_DHCP_GATEWAY				CS_ENTRY_ID + 114

#ifdef CONFIG_IP_NF_ALG_ONOFF
#ifdef CONFIG_NF_CONNTRACK_FTP
#define MIB_IP_ALG_FTP							CS_ENTRY_ID + 116
#endif
#ifdef CONFIG_NF_CONNTRACK_H323
#define MIB_IP_ALG_H323							CS_ENTRY_ID + 117
#endif
#ifdef CONFIG_NF_CONNTRACK_IRC
#define MIB_IP_ALG_IRC							CS_ENTRY_ID + 118
#endif
#ifdef CONFIG_NF_CONNTRACK_RTSP
#define MIB_IP_ALG_RTSP							CS_ENTRY_ID + 119
#endif
#ifdef CONFIG_NF_CONNTRACK_QUAKE3
#define MIB_IP_ALG_QUAKE3						CS_ENTRY_ID + 120
#endif
#ifdef CONFIG_NF_CONNTRACK_CUSEEME
#define MIB_IP_ALG_CUSEEME						CS_ENTRY_ID + 121
#endif
#ifdef CONFIG_NF_CONNTRACK_L2TP
#define MIB_IP_ALG_L2TP							CS_ENTRY_ID + 122
#endif
#ifdef CONFIG_NF_CONNTRACK_IPSEC
#define MIB_IP_ALG_IPSEC						CS_ENTRY_ID + 123
#endif
#ifdef CONFIG_NF_CONNTRACK_SIP
#define MIB_IP_ALG_SIP							CS_ENTRY_ID + 124
#endif
#ifdef CONFIG_NF_CONNTRACK_PPTP
#define MIB_IP_ALG_PPTP							CS_ENTRY_ID + 125
#endif
#endif
#ifdef DNS_BIND_PVC_SUPPORT
#define MIB_DNS_BIND_PVC_ENABLE					CS_ENTRY_ID + 126
#define MIB_DNS_BIND_PVC1						CS_ENTRY_ID + 127
#define MIB_DNS_BIND_PVC2						CS_ENTRY_ID + 128
#define MIB_DNS_BIND_PVC3						CS_ENTRY_ID + 129
#endif
//ql_xu add
#ifdef NAT_CONN_LIMIT
#define MIB_NAT_CONN_LIMIT						CS_ENTRY_ID + 130
#endif

#ifdef CONFIG_USER_ZEBRA_OSPFD_OSPFD
#define MIB_OSPF_ENABLE							CS_ENTRY_ID + 131
#endif

#define MIB_8021P_PRIO							CS_ENTRY_ID + 132
//add by ramen
#ifdef QOS_SPEED_LIMIT_SUPPORT
#define MIB_PVC_TOTAL_BANDWIDTH					CS_ENTRY_ID + 133
#endif

//#ifdef ADDRESS_MAPPING
#define MIB_ADDRESS_MAP_TYPE					CS_ENTRY_ID + 134
#define MIB_LOCAL_START_IP						CS_ENTRY_ID + 135
#define MIB_LOCAL_END_IP						CS_ENTRY_ID + 136
#define MIB_GLOBAL_START_IP						CS_ENTRY_ID + 137
#define MIB_GLOBAL_END_IP						CS_ENTRY_ID + 138
//#endif

#ifdef CONFIG_USER_SAMBA
#define MIB_SAMBA_ENABLE					CS_ENTRY_ID + 139
#ifdef CONFIG_USER_NMBD
#define MIB_SAMBA_NETBIOS_NAME					CS_ENTRY_ID + 140
#endif
#define MIB_SAMBA_SERVER_STRING					CS_ENTRY_ID + 141
#endif

#ifdef ELAN_LINK_MODE_INTRENAL_PHY
#define MIB_ETH_MODE							CS_ENTRY_ID + 143
#endif

#ifdef CONFIG_USER_RTK_SYSLOG
#ifdef SEND_LOG
#define MIB_LOG_SERVER_IP					 	CS_ENTRY_ID + 144
#define MIB_LOG_SERVER_NAME						CS_ENTRY_ID + 145
#define MIB_LOG_SERVER_PASSWORD					CS_ENTRY_ID + 146
#endif
#endif
//#ifdef QSETUP_WEB_REDIRECT
//#define MIB_QSETUP_REDIRECT					CS_ENTRY_ID + 147
//#endif
#define MIB_DHCPS_DNS1							CS_ENTRY_ID + 148
#define MIB_DHCPS_DNS2							CS_ENTRY_ID + 149
#define MIB_DHCPS_DNS3							CS_ENTRY_ID + 150

#ifdef CONFIG_USER_SNMPD_SNMPD_V2CTRAP
#define MIB_SNMPD_ENABLE						CS_ENTRY_ID + 151
#endif

#ifdef TCP_UDP_CONN_LIMIT
#define MIB_CONNLIMIT_ENABLE					CS_ENTRY_ID + 152
#define MIB_CONNLIMIT_TCP						CS_ENTRY_ID + 153
#define MIB_CONNLIMIT_UDP						CS_ENTRY_ID + 154
#endif //TCP_UDP_CONN_LIMIT


#ifdef WEB_REDIRECT_BY_MAC
#define MIB_WEB_REDIR_BY_MAC_URL				CS_ENTRY_ID + 155
#define MIB_WEB_REDIR_BY_MAC_INTERVAL			CS_ENTRY_ID + 156
#endif

#ifdef CONFIG_USB_ETH
#define MIB_USBETH_ITF_GROUP					CS_ENTRY_ID + 157
#endif //CONFIG_USB_ETH
/*ql:20081114 START: new IP QoS*/
//#ifdef NEW_IP_QOS_SUPPORT
#ifdef CONFIG_USER_IP_QOS
#define MIB_QOS_UPRATE							CS_ENTRY_ID + 159
#define MIB_QOS_POLICY							CS_ENTRY_ID + 160
#define MIB_TOTAL_BANDWIDTH						CS_ENTRY_ID + 161
#define MIB_TOTAL_BANDWIDTH_LIMIT_EN			CS_ENTRY_ID + 162
#define MIB_QOS_MODE							CS_ENTRY_ID + 163
#endif
/*ql:20081114 END*/
#define MIB_PRED_PRIO							CS_ENTRY_ID + 164
#define MIB_DHCP_SUBNET_MASK					CS_ENTRY_ID + 165

#ifdef _SUPPORT_CAPTIVEPORTAL_PROFILE_
#define MIB_CAPTIVEPORTAL_ENABLE				CS_ENTRY_ID + 166
#define MIB_CAPTIVEPORTAL_URL					CS_ENTRY_ID + 167
#endif

//ql 20090119 START: for imagenio service
#ifdef IMAGENIO_IPTV_SUPPORT
/*ping_zhang:20090930 START:add for Telefonica new option 240*/
#if 0
#define MIB_OPCH_ADDRESS						CS_ENTRY_ID + 168
#define MIB_OPCH_PORT							CS_ENTRY_ID + 169
#endif
/*ping_zhang:20090930 END*/
#define MIB_IMAGENIO_DNS1						CS_ENTRY_ID + 170
#define MIB_IMAGENIO_DNS2						CS_ENTRY_ID + 171
#endif
//ql 20090119 END

#ifdef FIELD_TRY_SAFE_MODE
#define MIB_ADSL_FIELDTRYSAFEMODE				CS_ENTRY_ID + 172
#define MIB_ADSL_FIELDTRYTESTPSDTIMES			CS_ENTRY_ID + 173
#define MIB_ADSL_FIELDTRYCTRLIN					CS_ENTRY_ID + 174
#endif

#ifdef CONFIG_IPV6
#ifdef CONFIG_USER_RADVD
#define MIB_V6_MAXRTRADVINTERVAL				CS_ENTRY_ID + 175
#define MIB_V6_MINRTRADVINTERVAL				CS_ENTRY_ID + 176
#define MIB_V6_ADVCURHOPLIMIT					CS_ENTRY_ID + 177
#define MIB_V6_ADVDEFAULTLIFETIME				CS_ENTRY_ID + 178
#define MIB_V6_ADVREACHABLETIME					CS_ENTRY_ID + 179
#define MIB_V6_ADVRETRANSTIMER					CS_ENTRY_ID + 180
#define MIB_V6_ADVLINKMTU						CS_ENTRY_ID + 181
#define MIB_V6_PREFIX_IP						CS_ENTRY_ID + 182
#define MIB_V6_PREFIX_LEN						CS_ENTRY_ID + 183
#define MIB_V6_VALIDLIFETIME					CS_ENTRY_ID + 184
#define MIB_V6_PREFERREDLIFETIME				CS_ENTRY_ID + 185
#define MIB_V6_SENDADVERT						CS_ENTRY_ID + 186
#define MIB_V6_MANAGEDFLAG						CS_ENTRY_ID + 187
#define MIB_V6_OTHERCONFIGFLAG					CS_ENTRY_ID + 188
#define MIB_V6_ONLINK							CS_ENTRY_ID + 189
#define MIB_V6_AUTONOMOUS						CS_ENTRY_ID + 190
#define MIB_V6_PREFIX_MODE					CS_ENTRY_ID + 191
#endif

#ifdef CONFIG_USER_DHCPV6_ISC_DHCP411
#define MIB_DHCPV6S_PREFIX_LENGTH				CS_ENTRY_ID + 192
#define MIB_DHCPV6S_RANGE_START					CS_ENTRY_ID + 193
#define MIB_DHCPV6S_RANGE_END					CS_ENTRY_ID + 194
#define MIB_DHCPV6S_DEFAULT_LEASE				CS_ENTRY_ID + 195
#define MIB_DHCPV6S_PREFERRED_LIFETIME			CS_ENTRY_ID + 196
#define MIB_DHCPV6R_UPPER_IFINDEX				CS_ENTRY_ID + 197
#define MIB_DHCPV6_MODE							CS_ENTRY_ID + 198
#define MIB_DHCPV6S_RENEW_TIME					CS_ENTRY_ID + 199
#define MIB_DHCPV6S_REBIND_TIME					CS_ENTRY_ID + 200
#define MIB_DHCPV6S_CLIENT_DUID					CS_ENTRY_ID + 201
#endif

#ifdef CONFIG_USER_ECMH
#define	MIB_MLD_PROXY_DAEMON					CS_ENTRY_ID + 202  // Mason Yu. MLD Proxy
#define MIB_MLD_PROXY_EXT_ITF					CS_ENTRY_ID + 203  // Mason Yu. MLD Proxy
#endif

#ifdef DNSV6_BIND_PVC_SUPPORT
#define MIB_DNSV6_BIND_PVC_ENABLE				CS_ENTRY_ID + 204
#define MIB_DNSV6_BIND_PVC1						CS_ENTRY_ID + 205
#define MIB_DNSV6_BIND_PVC2						CS_ENTRY_ID + 206
#define MIB_DNSV6_BIND_PVC3						CS_ENTRY_ID + 207
#endif

#define MIB_ADSL_WAN_DNSV6_MODE					CS_ENTRY_ID + 208
#define MIB_ADSL_WAN_DNSV61						CS_ENTRY_ID + 209
#define MIB_ADSL_WAN_DNSV62						CS_ENTRY_ID + 210
#define MIB_ADSL_WAN_DNSV63						CS_ENTRY_ID + 211
#endif // of CONFIG_IPV6

#ifdef CONFIG_USER_PPTP_CLIENT_PPTP
#define MIB_PPTP_ENABLE							CS_ENTRY_ID + 220
#endif //end of CONFIG_USER_PPTP_CLIENT_PPTP

#ifdef CONFIG_USER_L2TPD_L2TPD
#define MIB_L2TP_ENABLE							CS_ENTRY_ID + 221
#endif //end of CONFIG_USER_L2TPD_L2TPD
/***************************** start of WLAN setting *****************************/

#ifdef CONFIG_NET_IPIP
#define MIB_IPIP_ENABLE							CS_ENTRY_ID + 222
#endif//end of CONFIG_NET_IPIP

// Mason Yu. use table not chain
#ifdef CONFIG_USER_MINIDLNA
#define MIB_DMS_ENABLE							CS_ENTRY_ID + 223
#endif

#ifdef CONFIG_USER_IP_QOS_3
#define MIB_QOS_ENABLE_QOS						CS_ENTRY_ID + 224
#endif

#define MIB_WAN_MODE CS_ENTRY_ID + 225

#ifdef CONFIG_TR_064
#define MIB_TR064_ENABLED CS_ENTRY_ID + 226
#endif

#ifdef CONFIG_USER_FON
#define MIB_FON_ONOFF CS_ENTRY_ID + 227
#endif

#ifdef CONFIG_VDSL
#define MIB_VDSL2_PROFILE							CS_ENTRY_ID + 228
#endif /*CONFIG_VDSL*/

#ifdef CONFIG_IPV6
	#ifdef CONFIG_USER_RADVD
		#define MIB_V6_RDNSS1							CS_ENTRY_ID + 229
		#define MIB_V6_RDNSS2							CS_ENTRY_ID + 230
		#define MIB_V6_ULAPREFIX_ENABLE					CS_ENTRY_ID + 231
		#define MIB_V6_ULAPREFIX						CS_ENTRY_ID + 232
		#define MIB_V6_ULAPREFIX_LEN					CS_ENTRY_ID + 233
		#define MIB_V6_ULAPREFIX_VALID_TIME				CS_ENTRY_ID + 234
		#define MIB_V6_ULAPREFIX_PREFER_TIME			CS_ENTRY_ID + 235
		#define MIB_V6_PREFIX_ENABLE					CS_ENTRY_ID + 236
		#define MIB_V6_IPF_OUT_ACTION					CS_ENTRY_ID + 237
		#define MIB_V6_IPF_IN_ACTION					CS_ENTRY_ID + 238
	#else
		#define MIB_V6_IPF_OUT_ACTION					CS_ENTRY_ID + 229
		#define MIB_V6_IPF_IN_ACTION					CS_ENTRY_ID + 230
	#endif
	#define MIB_V6_IPV6_ENABLE							MIB_V6_IPF_IN_ACTION +1
#endif

#ifdef CONFIG_RTK_RG_INIT
#define MIB_MAC_BASED_TAG_DECISION					CS_ENTRY_ID + 240
#define MIB_LAN_VLAN_ID1					CS_ENTRY_ID + 241
#define MIB_LAN_VLAN_ID2					CS_ENTRY_ID + 242
#define MIB_LAN_PORT_MASK1					CS_ENTRY_ID + 243
#define MIB_LAN_PORT_MASK2					CS_ENTRY_ID + 244
#define MIB_LAN_IP_VERSION1					CS_ENTRY_ID + 245
#define MIB_LAN_IP_VERSION2					CS_ENTRY_ID + 246
#ifdef CONFIG_IPV6
#define MIB_LAN_IPV6_MODE1					CS_ENTRY_ID + 247
#define MIB_LAN_IPV6_MODE2					CS_ENTRY_ID + 248
#define MIB_LAN_IPV6_ADDR1  CS_ENTRY_ID + 249
#define MIB_LAN_IPV6_ADDR2  CS_ENTRY_ID + 250
#define MIB_LAN_IPV6_PREFIX_LEN1  CS_ENTRY_ID + 251
#define MIB_LAN_IPV6_PREFIX_LEN2  CS_ENTRY_ID + 252
#endif
#endif
#define MIB_DHCP_PORT_FILTER						CS_ENTRY_ID + 253
#define MIB_NTP_EXT_ITF								CS_ENTRY_ID + 254

#ifdef CONFIG_FIBER_FEATURE
#define	MIB_FIBER_MODE							CS_ENTRY_ID + 255
#endif

#define MIB_LOID								CS_ENTRY_ID + 256
#define MIB_LOID_PASSWD							CS_ENTRY_ID + 257
#if defined(CONFIG_GPON_FEATURE)
#define MIB_GPON_PLOAM_PASSWD					CS_ENTRY_ID + 258
#endif
#if defined(CONFIG_RTK_OMCI_V1)
#define MIB_OMCI_DBGLVL							CS_ENTRY_ID + 259
#define MIB_OMCI_LOGFILE						CS_ENTRY_ID + 260
#define MIB_OMCI_PORT_TYPE						CS_ENTRY_ID + 261
#define MIB_DUAL_MGMT_MODE						CS_ENTRY_ID + 262
#define MIB_OMCI_CUSTOM_BDP						CS_ENTRY_ID + 263
#define MIB_OMCI_CUSTOM_RDP						CS_ENTRY_ID + 264
#define MIB_OMCI_CUSTOM_MCAST					CS_ENTRY_ID + 265
#define MIB_OMCI_CUSTOM_ME						CS_ENTRY_ID + 266
#endif
#if defined(CONFIG_RTK_IGMP)
#define MIB_RTK_IGMP_DBGEN						CS_ENTRY_ID + 267
#define MIB_RTK_IGMP_DROPV1						CS_ENTRY_ID + 268
#define MIB_RTK_IGMP_VIDTYPE					CS_ENTRY_ID + 269
#define MIB_RTK_IGMP_TAGDECISION				CS_ENTRY_ID + 270
#endif
#ifdef PARENTAL_CTRL
#define MIB_PARENTAL_CTRL_ENABLE					CS_ENTRY_ID + 271
#endif

#ifdef CONFIG_IPV6
#define MIB_IPV6_LAN_IP_ADDR					CS_ENTRY_ID + 272
#endif

// BELOW MIB for INFORM PACKET to maintain VERSION INFOMATION
#define RTK_DEVID_MANUFACTURER			CS_ENTRY_ID + 273
#define RTK_DEVID_OUI					CS_ENTRY_ID + 274
#define RTK_DEVID_PRODUCTCLASS			CS_ENTRY_ID + 275
#define RTK_DEVINFO_SPECVER				CS_ENTRY_ID + 276
#define RTK_DEVINFO_SWVER				CS_ENTRY_ID + 277
#define RTK_DEVINFO_HWVER				CS_ENTRY_ID + 278

#define MIB_DEVICE_NAME							CS_ENTRY_ID + 279

#ifdef CONFIG_GPON_FEATURE
#define MIB_VLAN_CFG_TYPE						CS_ENTRY_ID + 280
#define MIB_VLAN_MANU_MODE						CS_ENTRY_ID + 281
#define MIB_VLAN_MANU_TAG_VID					CS_ENTRY_ID + 282
#define MIB_VLAN_MANU_TAG_PRI					CS_ENTRY_ID + 283
#endif
//for mp tool
#if defined(CONFIG_APOLLO_MP_TEST)
#define MIB_MP_FIN							CS_ENTRY_ID+284
#endif
// For multi-lingual, added by davian_kuo.
#define MIB_MULTI_LINGUAL						CS_ENTRY_ID + 285

#ifdef CONFIG_GPON_FEATURE
#define MIB_OMCI_OLT_MODE						CS_ENTRY_ID + 286
#define MIB_OMCI_SW_VER1						CS_ENTRY_ID + 287
#define MIB_OMCI_SW_VER2						CS_ENTRY_ID + 288
#define MIB_OMCC_VER							CS_ENTRY_ID + 289
#define MIB_OMCI_TM_OPT							CS_ENTRY_ID + 290
#define MIB_OMCI_EQID							CS_ENTRY_ID + 291
#define MIB_OMCI_ONT_VER						CS_ENTRY_ID + 292
#define MIB_OMCI_LOGFILE_MASK					CS_ENTRY_ID + 293
#endif
#define MIB_TFTP_SERVER_ADDR					CS_ENTRY_ID + 294
#define MIB_POSIX_TZ_STRING						CS_ENTRY_ID + 295
#define MIB_BOOT_FILENAME						CS_ENTRY_ID + 296

#ifdef CONFIG_GPON_FEATURE
#define MIB_OMCI_VENDOR_ID						CS_ENTRY_ID + 297
#endif

#ifdef USER_WEB_WIZARD
#define MIB_USER_WEB_WIZARD_FLAG				CS_ENTRY_ID + 298
#endif

#define	WLAN_CS_ENTRY_ID						CS_ENTRY_ID + 300

//================== start of dual wlan interface definition=================

#define DUAL_WLAN_START_ID						WLAN_CS_ENTRY_ID

#define MIB_WLAN_SSID							DUAL_WLAN_START_ID + 1
#define MIB_WLAN1_SSID							DUAL_WLAN_START_ID + 2

#define MIB_WLAN_CHAN_NUM						DUAL_WLAN_START_ID + 3
#define MIB_WLAN1_CHAN_NUM						DUAL_WLAN_START_ID + 4

#define MIB_WLAN_WEP							DUAL_WLAN_START_ID + 5
#define MIB_WLAN1_WEP							DUAL_WLAN_START_ID + 6

#define MIB_WLAN_WEP64_KEY1						DUAL_WLAN_START_ID + 7
#define MIB_WLAN1_WEP64_KEY1					DUAL_WLAN_START_ID + 8

#define MIB_WLAN_WEP64_KEY2						DUAL_WLAN_START_ID + 9
#define MIB_WLAN1_WEP64_KEY2					DUAL_WLAN_START_ID + 10

#define MIB_WLAN_WEP64_KEY3						DUAL_WLAN_START_ID + 11
#define MIB_WLAN1_WEP64_KEY3					DUAL_WLAN_START_ID + 12

#define MIB_WLAN_WEP64_KEY4						DUAL_WLAN_START_ID + 13
#define MIB_WLAN1_WEP64_KEY4					DUAL_WLAN_START_ID + 14

#define MIB_WLAN_WEP128_KEY1					DUAL_WLAN_START_ID + 15
#define MIB_WLAN1_WEP128_KEY1					DUAL_WLAN_START_ID + 16

#define MIB_WLAN_WEP128_KEY2					DUAL_WLAN_START_ID + 17
#define MIB_WLAN1_WEP128_KEY2					DUAL_WLAN_START_ID + 18

#define MIB_WLAN_WEP128_KEY3					DUAL_WLAN_START_ID + 19
#define MIB_WLAN1_WEP128_KEY3					DUAL_WLAN_START_ID + 20

#define MIB_WLAN_WEP128_KEY4					DUAL_WLAN_START_ID + 21
#define MIB_WLAN1_WEP128_KEY4					DUAL_WLAN_START_ID + 22

#define MIB_WLAN_WEP_KEY_TYPE					DUAL_WLAN_START_ID + 23
#define MIB_WLAN1_WEP_KEY_TYPE					DUAL_WLAN_START_ID + 24

#define MIB_WLAN_WEP_DEFAULT_KEY				DUAL_WLAN_START_ID + 25
#define MIB_WLAN1_WEP_DEFAULT_KEY				DUAL_WLAN_START_ID + 26

#define MIB_WLAN_FRAG_THRESHOLD					DUAL_WLAN_START_ID + 27
#define MIB_WLAN1_FRAG_THRESHOLD				DUAL_WLAN_START_ID + 28

#define MIB_WLAN_SUPPORTED_RATE					DUAL_WLAN_START_ID + 29
#define MIB_WLAN1_SUPPORTED_RATE				DUAL_WLAN_START_ID + 30

#define MIB_WLAN_BEACON_INTERVAL				DUAL_WLAN_START_ID + 31
#define MIB_WLAN1_BEACON_INTERVAL				DUAL_WLAN_START_ID + 32

#define MIB_WLAN_PREAMBLE_TYPE					DUAL_WLAN_START_ID + 33
#define MIB_WLAN1_PREAMBLE_TYPE					DUAL_WLAN_START_ID + 34

#define MIB_WLAN_BASIC_RATE						DUAL_WLAN_START_ID + 35
#define MIB_WLAN1_BASIC_RATE					DUAL_WLAN_START_ID + 36

#define MIB_WLAN_RTS_THRESHOLD					DUAL_WLAN_START_ID + 37
#define MIB_WLAN1_RTS_THRESHOLD					DUAL_WLAN_START_ID + 38

#define MIB_WLAN_AUTH_TYPE						DUAL_WLAN_START_ID + 39
#define MIB_WLAN1_AUTH_TYPE						DUAL_WLAN_START_ID + 40

#define MIB_WLAN_HIDDEN_SSID					DUAL_WLAN_START_ID + 41
#define MIB_WLAN1_HIDDEN_SSID					DUAL_WLAN_START_ID + 42

#define MIB_WLAN_DISABLED						DUAL_WLAN_START_ID + 43
#define MIB_WLAN1_DISABLED						DUAL_WLAN_START_ID + 44

// Added by Mason Yu for TxPower
#define MIB_TX_POWER							DUAL_WLAN_START_ID + 45
#define MIB_WLAN1_TX_POWER						DUAL_WLAN_START_ID + 46

#define MIB_WLAN_MLCSTRATE						DUAL_WLAN_START_ID + 47
#define MIB_WLAN1_MLCSTRATE						DUAL_WLAN_START_ID + 48

#ifdef WLAN_WPA
#define MIB_WLAN_ENCRYPT						DUAL_WLAN_START_ID + 49
#define MIB_WLAN1_ENCRYPT						DUAL_WLAN_START_ID + 50

#define MIB_WLAN_ENABLE_SUPP_NONWPA				DUAL_WLAN_START_ID + 51
#define MIB_WLAN1_ENABLE_SUPP_NONWPA			DUAL_WLAN_START_ID + 52

#define MIB_WLAN_SUPP_NONWPA					DUAL_WLAN_START_ID + 53
#define MIB_WLAN1_SUPP_NONWPA					DUAL_WLAN_START_ID + 54

#define MIB_WLAN_WPA_AUTH						DUAL_WLAN_START_ID + 55
#define MIB_WLAN1_WPA_AUTH						DUAL_WLAN_START_ID + 56

#define MIB_WLAN_WPA_CIPHER_SUITE				DUAL_WLAN_START_ID + 57
#define MIB_WLAN1_WPA_CIPHER_SUITE				DUAL_WLAN_START_ID + 58

#define MIB_WLAN_WPA_PSK						DUAL_WLAN_START_ID + 59
#define MIB_WLAN1_WPA_PSK						DUAL_WLAN_START_ID + 60

#define MIB_WLAN_WPA_GROUP_REKEY_TIME			DUAL_WLAN_START_ID + 61
#define MIB_WLAN1_WPA_GROUP_REKEY_TIME			DUAL_WLAN_START_ID + 62

#ifdef WLAN_1x
#define MIB_WLAN_RS_IP							DUAL_WLAN_START_ID + 63
#define MIB_WLAN1_RS_IP							DUAL_WLAN_START_ID + 64

#define MIB_WLAN_RS_PORT						DUAL_WLAN_START_ID + 65
#define MIB_WLAN1_RS_PORT						DUAL_WLAN_START_ID + 66

#define MIB_WLAN_RS_PASSWORD					DUAL_WLAN_START_ID + 67
#define MIB_WLAN1_RS_PASSWORD					DUAL_WLAN_START_ID + 68

#define MIB_WLAN_ENABLE_1X						DUAL_WLAN_START_ID + 69
#define MIB_WLAN1_ENABLE_1X						DUAL_WLAN_START_ID + 70
#endif

#define MIB_WLAN_WPA_PSK_FORMAT					DUAL_WLAN_START_ID + 71
#define MIB_WLAN1_WPA_PSK_FORMAT				DUAL_WLAN_START_ID + 72

//#define MIB_WLAN_WPA2_PRE_AUTH					DUAL_WLAN_START_ID + 73
//#define MIB_WLAN1_WPA2_PRE_AUTH					DUAL_WLAN_START_ID + 74

#define MIB_WLAN_WPA2_CIPHER_SUITE				DUAL_WLAN_START_ID + 75
#define MIB_WLAN1_WPA2_CIPHER_SUITE				DUAL_WLAN_START_ID + 76
#endif

#define MIB_WLAN_INACTIVITY_TIME				DUAL_WLAN_START_ID + 77
#define MIB_WLAN1_INACTIVITY_TIME				DUAL_WLAN_START_ID + 78

#define MIB_WLAN_RATE_ADAPTIVE_ENABLED			DUAL_WLAN_START_ID + 79
#define MIB_WLAN1_RATE_ADAPTIVE_ENABLED			DUAL_WLAN_START_ID + 80

#ifdef WLAN_ACL
// access control MIB id
#define MIB_WLAN_AC_ENABLED						DUAL_WLAN_START_ID + 81
#define MIB_WLAN1_AC_ENABLED					DUAL_WLAN_START_ID + 82

//#define MIB_WLAN_AC_NUM							DUAL_WLAN_START_ID + 83
//#define MIB_WLAN1_AC_NUM						DUAL_WLAN_START_ID + 84

//#define MIB_WLAN_AC_ADDR						DUAL_WLAN_START_ID + 85
//#define MIB_WLAN1_AC_ADDR						DUAL_WLAN_START_ID + 86

//#define MIB_WLAN_AC_ADDR_ADD					DUAL_WLAN_START_ID + 87
//#define MIB_WLAN1_AC_ADDR_ADD					DUAL_WLAN_START_ID + 88

//#define MIB_WLAN_AC_ADDR_DEL					DUAL_WLAN_START_ID + 89
//#define MIB_WLAN1_AC_ADDR_DEL					DUAL_WLAN_START_ID + 90

//#define MIB_WLAN_AC_ADDR_DELALL					DUAL_WLAN_START_ID + 91
//#define MIB_WLAN1_AC_ADDR_DELALL				DUAL_WLAN_START_ID + 92
#endif

#define MIB_WLAN_DTIM_PERIOD					DUAL_WLAN_START_ID + 93
#define MIB_WLAN1_DTIM_PERIOD					DUAL_WLAN_START_ID + 94

#define MIB_WLAN_MODE							DUAL_WLAN_START_ID + 95
#define MIB_WLAN1_MODE							DUAL_WLAN_START_ID + 96

#define MIB_WLAN_NETWORK_TYPE					DUAL_WLAN_START_ID + 97
#define MIB_WLAN1_NETWORK_TYPE					DUAL_WLAN_START_ID + 98

//#define MIB_WLAN_DEFAULT_SSID					DUAL_WLAN_START_ID + 99
//#define MIB_WLAN1_DEFAULT_SSID					DUAL_WLAN_START_ID + 100

#ifdef WLAN_WPA
#define MIB_WLAN_ACCOUNT_RS_ENABLED				DUAL_WLAN_START_ID + 101
#define MIB_WLAN1_ACCOUNT_RS_ENABLED			DUAL_WLAN_START_ID + 102

#define MIB_WLAN_ACCOUNT_RS_IP					DUAL_WLAN_START_ID + 103
#define MIB_WLAN1_ACCOUNT_RS_IP					DUAL_WLAN_START_ID + 104

#define MIB_WLAN_ACCOUNT_RS_PORT				DUAL_WLAN_START_ID + 105
#define MIB_WLAN1_ACCOUNT_RS_PORT				DUAL_WLAN_START_ID + 106

#define MIB_WLAN_ACCOUNT_RS_PASSWORD			DUAL_WLAN_START_ID + 107
#define MIB_WLAN1_ACCOUNT_RS_PASSWORD			DUAL_WLAN_START_ID + 108

#define MIB_WLAN_ACCOUNT_UPDATE_ENABLED			DUAL_WLAN_START_ID + 109
#define MIB_WLAN1_ACCOUNT_UPDATE_ENABLED		DUAL_WLAN_START_ID + 110

#define MIB_WLAN_ACCOUNT_UPDATE_DELAY			DUAL_WLAN_START_ID + 111
#define MIB_WLAN1_ACCOUNT_UPDATE_DELAY			DUAL_WLAN_START_ID + 112

#define MIB_WLAN_ENABLE_MAC_AUTH				DUAL_WLAN_START_ID + 113
#define MIB_WLAN1_ENABLE_MAC_AUTH				DUAL_WLAN_START_ID + 114

#define MIB_WLAN_RS_RETRY						DUAL_WLAN_START_ID + 115
#define MIB_WLAN1_RS_RETRY						DUAL_WLAN_START_ID + 116

#define MIB_WLAN_RS_INTERVAL_TIME				DUAL_WLAN_START_ID + 117
#define MIB_WLAN1_RS_INTERVAL_TIME				DUAL_WLAN_START_ID + 118

#define MIB_WLAN_ACCOUNT_RS_RETRY				DUAL_WLAN_START_ID + 119
#define MIB_WLAN1_ACCOUNT_RS_RETRY				DUAL_WLAN_START_ID + 120

#define MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME		DUAL_WLAN_START_ID + 121
#define MIB_WLAN1_ACCOUNT_RS_INTERVAL_TIME		DUAL_WLAN_START_ID + 122
#endif

//#ifdef WLAN_WDS
#define MIB_WLAN_WDS_ENABLED					DUAL_WLAN_START_ID + 125
#define MIB_WLAN1_WDS_ENABLED					DUAL_WLAN_START_ID + 126

#define MIB_WLAN_WDS_NUM						DUAL_WLAN_START_ID + 127
#define MIB_WLAN1_WDS_NUM						DUAL_WLAN_START_ID + 128

//#define MIB_WLAN_WDS							DUAL_WLAN_START_ID + 129  // Magician: Obsoleted
//#define MIB_WLAN1_WDS							DUAL_WLAN_START_ID + 130  // Magician: Obsoleted

//#define MIB_WLAN_WDS_ADD						DUAL_WLAN_START_ID + 131
//#define MIB_WLAN1_WDS_ADD						DUAL_WLAN_START_ID + 132

//#define MIB_WLAN_WDS_DEL						DUAL_WLAN_START_ID + 133
//#define MIB_WLAN1_WDS_DEL						DUAL_WLAN_START_ID + 134

//#define MIB_WLAN_WDS_DELALL						DUAL_WLAN_START_ID + 135
//#define MIB_WLAN1_WDS_DELALL					DUAL_WLAN_START_ID + 136

#define MIB_WLAN_WDS_ENCRYPT		DUAL_WLAN_START_ID + 137
#define MIB_WLAN1_WDS_ENCRYPT		DUAL_WLAN_START_ID + 138
#define MIB_WLAN_WDS_WEP_FORMAT		DUAL_WLAN_START_ID + 139
#define MIB_WLAN1_WDS_WEP_FORMAT		DUAL_WLAN_START_ID + 140
#define MIB_WLAN_WDS_WEP_KEY		DUAL_WLAN_START_ID + 141
#define MIB_WLAN1_WDS_WEP_KEY		DUAL_WLAN_START_ID + 142
#define MIB_WLAN_WDS_PSK_FORMAT		DUAL_WLAN_START_ID + 143
#define MIB_WLAN1_WDS_PSK_FORMAT		DUAL_WLAN_START_ID + 144
#define MIB_WLAN_WDS_PSK		DUAL_WLAN_START_ID + 145
#define MIB_WLAN1_WDS_PSK		DUAL_WLAN_START_ID + 146
#if 0//krammer
#define MIB_WLAN_WDS_WEP						DUAL_WLAN_START_ID + 137
#define MIB_WLAN1_WDS_WEP						DUAL_WLAN_START_ID + 138

#define MIB_WLAN_WDS_WEP64_KEY1					DUAL_WLAN_START_ID + 139
#define MIB_WLAN1_WDS_WEP64_KEY1				DUAL_WLAN_START_ID + 140

#define MIB_WLAN_WDS_WEP64_KEY2					DUAL_WLAN_START_ID + 141
#define MIB_WLAN1_WDS_WEP64_KEY2				DUAL_WLAN_START_ID + 142

#define MIB_WLAN_WDS_WEP64_KEY3					DUAL_WLAN_START_ID + 143
#define MIB_WLAN1_WDS_WEP64_KEY3				DUAL_WLAN_START_ID + 144

#define MIB_WLAN_WDS_WEP64_KEY4					DUAL_WLAN_START_ID + 145
#define MIB_WLAN1_WDS_WEP64_KEY4				DUAL_WLAN_START_ID + 146

#define MIB_WLAN_WDS_WEP128_KEY1				DUAL_WLAN_START_ID + 147
#define MIB_WLAN1_WDS_WEP128_KEY1				DUAL_WLAN_START_ID + 148

#define MIB_WLAN_WDS_WEP128_KEY2				DUAL_WLAN_START_ID + 149
#define MIB_WLAN1_WDS_WEP128_KEY2				DUAL_WLAN_START_ID + 150

#define MIB_WLAN_WDS_WEP128_KEY3				DUAL_WLAN_START_ID + 151
#define MIB_WLAN1_WDS_WEP128_KEY3				DUAL_WLAN_START_ID + 152

#define MIB_WLAN_WDS_WEP128_KEY4				DUAL_WLAN_START_ID + 153
#define MIB_WLAN1_WDS_WEP128_KEY4				DUAL_WLAN_START_ID + 154

#define MIB_WLAN_WDS_WEP_KEY_TYPE				DUAL_WLAN_START_ID + 155
#define MIB_WLAN1_WDS_WEP_KEY_TYPE				DUAL_WLAN_START_ID + 156

#define MIB_WLAN_WDS_WEP_DEFAULT_KEY			DUAL_WLAN_START_ID + 157
#define MIB_WLAN1_WDS_WEP_DEFAULT_KEY			DUAL_WLAN_START_ID + 158
#endif

#define MIB_WLAN_BAND							DUAL_WLAN_START_ID + 159
#define MIB_WLAN1_BAND							DUAL_WLAN_START_ID + 160

#define MIB_WLAN_FIX_RATE						DUAL_WLAN_START_ID + 161
#define MIB_WLAN1_FIX_RATE						DUAL_WLAN_START_ID + 162

//#define MIB_WLAN_PRIVACY_CHECK					DUAL_WLAN_START_ID + 163
//#define MIB_WLAN1_PRIVACY_CHECK					DUAL_WLAN_START_ID + 164

#define MIB_WLAN_BLOCK_RELAY					DUAL_WLAN_START_ID + 165
#define MIB_WLAN1_BLOCK_RELAY					DUAL_WLAN_START_ID + 166

// Added by jiunming for setting an option "ethernet to wireless blocking" in page wladvanced.asp
#define MIB_WLAN_BLOCK_ETH2WIR					DUAL_WLAN_START_ID + 167
#define MIB_WLAN1_BLOCK_ETH2WIR					DUAL_WLAN_START_ID + 168

#define MIB_WLAN_ITF_GROUP						DUAL_WLAN_START_ID + 169
#define MIB_WLAN1_ITF_GROUP						DUAL_WLAN_START_ID + 170

#ifdef WLAN_WEB_REDIRECT  //jiunming,web_redirect
#define MIB_WLAN_WEB_REDIR_URL					DUAL_WLAN_START_ID + 171
#define MIB_WLAN1_WEB_REDIR_URL					DUAL_WLAN_START_ID + 172
#endif

#ifdef WLAN_QoS	//Added for WMM support
#define MIB_WLAN_QoS							DUAL_WLAN_START_ID + 173
#define MIB_WLAN1_QoS							DUAL_WLAN_START_ID + 174
#endif

#define MIB_WLAN_DIG							DUAL_WLAN_START_ID + 175
#define MIB_WLAN1_DIG							DUAL_WLAN_START_ID + 176

#define MIB_WLAN_BEACON_ADVERTISEMENT			DUAL_WLAN_START_ID + 177
#define MIB_WLAN1_BEACON_ADVERTISEMENT			DUAL_WLAN_START_ID + 178

#ifdef WLAN_MBSSID
#define MIB_WLAN_BLOCK_MBSSID					DUAL_WLAN_START_ID + 179
#define MIB_WLAN1_BLOCK_MBSSID					DUAL_WLAN_START_ID + 180
#endif

#define MIB_WLAN_MAC_CTRL						DUAL_WLAN_START_ID + 181
#define MIB_WLAN1_MAC_CTRL						DUAL_WLAN_START_ID + 182

#ifdef WLAN_MBSSID
#define MIB_WLAN_VAP0_ITF_GROUP					DUAL_WLAN_START_ID + 183
#define MIB_WLAN_VAP1_ITF_GROUP					DUAL_WLAN_START_ID + 185
#define MIB_WLAN_VAP2_ITF_GROUP					DUAL_WLAN_START_ID + 187
#define MIB_WLAN_VAP3_ITF_GROUP					DUAL_WLAN_START_ID + 189

#define MIB_WLAN1_VAP0_ITF_GROUP				DUAL_WLAN_START_ID + 184
#define MIB_WLAN1_VAP1_ITF_GROUP				DUAL_WLAN_START_ID + 186
#define MIB_WLAN1_VAP2_ITF_GROUP				DUAL_WLAN_START_ID + 188
#define MIB_WLAN1_VAP3_ITF_GROUP				DUAL_WLAN_START_ID + 190
#endif

#ifdef WLAN_QoS	//Added for WMM support
#define MIB_WLAN_APSD_ENABLE					DUAL_WLAN_START_ID + 193
#define MIB_WLAN1_APSD_ENABLE					DUAL_WLAN_START_ID + 194
#endif

#define MIB_WLAN_PROTECTION_DISABLED			DUAL_WLAN_START_ID + 195
#define MIB_WLAN1_PROTECTION_DISABLED			DUAL_WLAN_START_ID + 196

#define MIB_WLAN_AGGREGATION 					DUAL_WLAN_START_ID + 197
#define MIB_WLAN1_AGGREGATION					DUAL_WLAN_START_ID + 198

#define MIB_WLAN_SHORTGI_ENABLED				DUAL_WLAN_START_ID + 199
#define MIB_WLAN1_SHORTGI_ENABLED				DUAL_WLAN_START_ID + 200

#define MIB_WLAN_CHANNEL_WIDTH  				DUAL_WLAN_START_ID + 201
#define MIB_WLAN1_CHANNEL_WIDTH					DUAL_WLAN_START_ID + 202

#define MIB_WLAN_CONTROL_BAND					DUAL_WLAN_START_ID + 203
#define MIB_WLAN1_CONTROL_BAND					DUAL_WLAN_START_ID + 204

#define MIB_WLAN_WAPI_PSK						DUAL_WLAN_START_ID + 205
#define MIB_WLAN1_WAPI_PSK						DUAL_WLAN_START_ID + 206

#define MIB_WLAN_WAPI_PSKLEN					DUAL_WLAN_START_ID + 207
#define MIB_WLAN1_WAPI_PSKLEN					DUAL_WLAN_START_ID + 208

#define MIB_WLAN_WAPI_PSK_FORMAT				DUAL_WLAN_START_ID + 209
#define MIB_WLAN1_WAPI_PSK_FORMAT				DUAL_WLAN_START_ID + 210

#define MIB_WLAN_WAPI_AUTH						DUAL_WLAN_START_ID + 211
#define MIB_WLAN1_WAPI_AUTH						DUAL_WLAN_START_ID + 212

#define MIB_WLAN_WAPI_ASIPADDR    				DUAL_WLAN_START_ID + 213
#define MIB_WLAN1_WAPI_ASIPADDR					DUAL_WLAN_START_ID + 214

#define MIB_WLAN_WAPI_SEARCH_CERTINFO   		DUAL_WLAN_START_ID + 215
#define MIB_WLAN1_WAPI_SEARCH_CERTINFO			DUAL_WLAN_START_ID + 216

#define MIB_WLAN_WAPI_SEARCH_CERTINDEX  		DUAL_WLAN_START_ID + 217
#define MIB_WLAN1_WAPI_SEARCH_CERTINDEX			DUAL_WLAN_START_ID + 218

#define MIB_WLAN_WAPI_MCAST_REKEYTYPE   		DUAL_WLAN_START_ID + 219
#define MIB_WLAN1_WAPI_MCAST_REKEYTYPE			DUAL_WLAN_START_ID + 220

#define MIB_WLAN_WAPI_MCAST_TIME				DUAL_WLAN_START_ID + 221
#define MIB_WLAN1_WAPI_MCAST_TIME				DUAL_WLAN_START_ID + 222

#define MIB_WLAN_WAPI_MCAST_PACKETS      		DUAL_WLAN_START_ID + 223
#define MIB_WLAN1_WAPI_MCAST_PACKETS			DUAL_WLAN_START_ID + 224

#define MIB_WLAN_WAPI_UCAST_REKETTYPE    		DUAL_WLAN_START_ID + 225
#define MIB_WLAN1_WAPI_UCAST_REKETTYPE			DUAL_WLAN_START_ID + 226

#define MIB_WLAN_WAPI_UCAST_TIME    	 		DUAL_WLAN_START_ID + 227
#define MIB_WLAN1_WAPI_UCAST_TIME				DUAL_WLAN_START_ID + 228

#define MIB_WLAN_WAPI_UCAST_PACKETS    	 		DUAL_WLAN_START_ID + 229
#define MIB_WLAN1_WAPI_UCAST_PACKETS			DUAL_WLAN_START_ID + 230

#define MIB_WLAN_WAPI_CA_INIT            		DUAL_WLAN_START_ID + 231
#define MIB_WLAN1_WAPI_CA_INIT					DUAL_WLAN_START_ID + 232

#define MIB_WLAN_PHY_BAND_SELECT				DUAL_WLAN_START_ID + 233
#define MIB_WLAN1_PHY_BAND_SELECT				DUAL_WLAN_START_ID + 234

#define MIB_WLAN_MAC_PHY_MODE					DUAL_WLAN_START_ID + 235
#define MIB_WLAN1_MAC_PHY_MODE					DUAL_WLAN_START_ID + 236

// WPS
//#ifdef WIFI_SIMPLE_CONFIG
#define MIB_WSC_DISABLE 						DUAL_WLAN_START_ID + 237
#define MIB_WLAN1_WSC_DISABLE					DUAL_WLAN_START_ID + 238

#define MIB_WSC_METHOD							DUAL_WLAN_START_ID + 239
#define MIB_WLAN1_WSC_METHOD					DUAL_WLAN_START_ID + 240

#define MIB_WSC_AUTH							DUAL_WLAN_START_ID + 241
#define MIB_WLAN1_WSC_AUTH						DUAL_WLAN_START_ID + 242

#define MIB_WSC_ENC								DUAL_WLAN_START_ID + 243
#define MIB_WLAN1_WSC_ENC						DUAL_WLAN_START_ID + 244

#define MIB_WSC_MANUAL_ENABLED 					DUAL_WLAN_START_ID + 245
#define MIB_WLAN1_WSC_MANUAL_ENABLED			DUAL_WLAN_START_ID + 246

#define MIB_WSC_PSK								DUAL_WLAN_START_ID + 247
#define MIB_WLAN1_WSC_PSK						DUAL_WLAN_START_ID + 248

#define MIB_WSC_SSID							DUAL_WLAN_START_ID + 249
#define MIB_WLAN1_WSC_SSID						DUAL_WLAN_START_ID + 250

#define MIB_WSC_UPNP_ENABLED					DUAL_WLAN_START_ID + 251
#define MIB_WLAN1_WSC_UPNP_ENABLED				DUAL_WLAN_START_ID + 252

#define MIB_WSC_REGISTRAR_ENABLED 				DUAL_WLAN_START_ID + 253
#define MIB_WLAN1_WSC_REGISTRAR_ENABLED			DUAL_WLAN_START_ID + 254

#define MIB_WSC_CONFIG_BY_EXT_REG 				DUAL_WLAN_START_ID + 255
#define MIB_WLAN1_WSC_CONFIG_BY_EXT_REG			DUAL_WLAN_START_ID + 256

#define MIB_WLAN_11N_COEXIST  				DUAL_WLAN_START_ID + 257
#define MIB_WLAN1_11N_COEXIST				DUAL_WLAN_START_ID + 258
//#endif

#ifdef WLAN_UNIVERSAL_REPEATER
#define MIB_REPEATER_ENABLED1					DUAL_WLAN_START_ID + 259
#define MIB_REPEATER_ENABLED2					DUAL_WLAN_START_ID + 260
#define MIB_REPEATER_SSID1						DUAL_WLAN_START_ID + 261
#define MIB_REPEATER_SSID2						DUAL_WLAN_START_ID + 262
#endif
#define MIB_WLAN_AUTO_CHAN_ENABLED              DUAL_WLAN_START_ID + 263
#define MIB_WLAN1_AUTO_CHAN_ENABLED             DUAL_WLAN_START_ID + 264

#ifdef WLAN_WPA
#ifdef WLAN_11W
#define MIB_WLAN_DOTIEEE80211W					DUAL_WLAN_START_ID + 265
#define MIB_WLAN1_DOTIEEE80211W					DUAL_WLAN_START_ID + 266

#define MIB_WLAN_SHA256							DUAL_WLAN_START_ID + 267
#define MIB_WLAN1_SHA256						DUAL_WLAN_START_ID + 268
#endif
#endif

#define DUAL_WLAN_END_ID						DUAL_WLAN_START_ID + 269

//==================end of dual wlan interface definition=================


#if defined(CONFIG_RTL_92D_SUPPORT)
#define MIB_WLAN_BAND2G5G_SELECT				DUAL_WLAN_END_ID + 1
#endif //CONFIG_RTL_92D_SUPPORT

#define MIB_WIFI_TEST							DUAL_WLAN_END_ID + 2
#define MIB_WSC_CONFIGURED						DUAL_WLAN_END_ID + 3
#define MIB_WSC_PIN								DUAL_WLAN_END_ID + 4

#ifdef CONFIG_RTL_92D_SUPPORT
#define MIB_WLAN_BAND2G5G_SINGLE_SELECT			DUAL_WLAN_END_ID + 5
#endif //CONFIG_RTL_92D_SUPPORT

#define MIB_WSC_VERSION					DUAL_WLAN_END_ID + 6
#define MIB_WIFI_REGDOMAIN_DEMO			DUAL_WLAN_END_ID + 7

/***************************** end of WLAN setting *****************************/



#define HS_ENTRY_ID					700

#define MIB_SUPER_NAME					HS_ENTRY_ID + 1
#define MIB_SUPER_PASSWORD				HS_ENTRY_ID + 2
#define MIB_ELAN_MAC_ADDR				HS_ENTRY_ID + 4
#define MIB_WLAN_MAC_ADDR				HS_ENTRY_ID + 5
//#if WLAN_SUPPORT

#define MIB_HW_REG_DOMAIN				HS_ENTRY_ID + 6
#define MIB_HW_RF_TYPE					HS_ENTRY_ID + 7
#define MIB_HW_TX_POWER					HS_ENTRY_ID + 8

#define MIB_HW_TX_POWER_CCK				HS_ENTRY_ID + 9

#define MIB_HW_TX_POWER_OFDM				HS_ENTRY_ID + 10
#define MIB_HW_ANT_DIVERSITY				HS_ENTRY_ID + 11
#define MIB_HW_TX_ANT					HS_ENTRY_ID + 12
#define MIB_HW_CS_THRESHOLD				HS_ENTRY_ID + 13
#define MIB_HW_CCA_MODE					HS_ENTRY_ID + 14
#define MIB_HW_PHY_TYPE					HS_ENTRY_ID + 15
#define MIB_HW_LED_TYPE					HS_ENTRY_ID + 16

//#endif // of WLAN_SUPPORT

#define MIB_BYTE_TEST					HS_ENTRY_ID + 17
#define MIB_WORD_TEST					HS_ENTRY_ID + 18
#define MIB_DWORD_TEST					HS_ENTRY_ID + 19
#define MIB_INTERGER_TEST1				HS_ENTRY_ID + 20
#define MIB_INTERGER_TEST2				HS_ENTRY_ID + 21
//#if WLAN_SUPPORT
#define MIB_WIFI_SUPPORT                       HS_ENTRY_ID+23
//#endif
#define MIB_HW_SERIAL_NUMBER				HS_ENTRY_ID + 24

#define MIB_HW_TX_POWER_CCK_A					HS_ENTRY_ID + 31
#define MIB_HW_TX_POWER_CCK_B					HS_ENTRY_ID + 32
#define MIB_HW_TX_POWER_HT40_1S_A					HS_ENTRY_ID + 33
#define MIB_HW_TX_POWER_HT40_1S_B					HS_ENTRY_ID + 34
#define MIB_HW_TX_POWER_HT40_2S					HS_ENTRY_ID + 35
#define MIB_HW_TX_POWER_HT20					HS_ENTRY_ID + 36
#define MIB_HW_TX_POWER_DIFF_OFDM					HS_ENTRY_ID + 37
#define MIB_HW_11N_TSSI1					HS_ENTRY_ID + 38
#define MIB_HW_11N_TSSI2					HS_ENTRY_ID + 39
#define MIB_HW_11N_THER					    HS_ENTRY_ID + 40
#define MIB_HW_11N_PA_TYPE					    HS_ENTRY_ID + 93
#define MIB_HW_11N_TRSWITCH					HS_ENTRY_ID + 46
#define MIB_HW_11N_TRSWPAPE_C9				HS_ENTRY_ID + 95
#define MIB_HW_11N_TRSWPAPE_CC				HS_ENTRY_ID + 96

#if defined(CONFIG_RTL_92D_SUPPORT) || defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT)
#define MIB_HW_TX_POWER_5G_HT40_1S_A		HS_ENTRY_ID + 41
#define MIB_HW_TX_POWER_5G_HT40_1S_B		HS_ENTRY_ID + 42
#define MIB_HW_TX_POWER_DIFF_5G_HT40_2S		HS_ENTRY_ID + 43
#define MIB_HW_TX_POWER_DIFF_5G_HT20		HS_ENTRY_ID + 44
#define MIB_HW_TX_POWER_DIFF_5G_OFDM		HS_ENTRY_ID + 45

#endif //CONFIG_RTL_92D_SUPPORT
#if defined(CONFIG_WLAN_HAL_8814AE) || defined(CONFIG_RTL_8812_SUPPORT) || defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT)
#define MIB_HW_TX_POWER_DIFF_20BW1S_OFDM1T_A		HS_ENTRY_ID + 47
#define MIB_HW_TX_POWER_DIFF_40BW2S_20BW2S_A		HS_ENTRY_ID + 48
#define MIB_HW_TX_POWER_DIFF_OFDM2T_CCK2T_A			HS_ENTRY_ID + 49
#define MIB_HW_TX_POWER_DIFF_40BW3S_20BW3S_A		HS_ENTRY_ID + 50
#define MIB_HW_TX_POWER_DIFF_OFDM3T_CCK3T_A			HS_ENTRY_ID + 51
#define MIB_HW_TX_POWER_DIFF_40BW4S_20BW4S_A		HS_ENTRY_ID + 52
#define MIB_HW_TX_POWER_DIFF_OFDM4T_CCK4T_A			HS_ENTRY_ID + 53

#define MIB_HW_TX_POWER_DIFF_5G_20BW1S_OFDM1T_A		HS_ENTRY_ID + 54
#define MIB_HW_TX_POWER_DIFF_5G_40BW2S_20BW2S_A		HS_ENTRY_ID + 55
#define MIB_HW_TX_POWER_DIFF_5G_40BW3S_20BW3S_A		HS_ENTRY_ID + 56
#define MIB_HW_TX_POWER_DIFF_5G_40BW4S_20BW4S_A		HS_ENTRY_ID + 57
#define MIB_HW_TX_POWER_DIFF_5G_RSVD_OFDM4T_A		HS_ENTRY_ID + 58
#define MIB_HW_TX_POWER_DIFF_5G_80BW1S_160BW1S_A	HS_ENTRY_ID + 59
#define MIB_HW_TX_POWER_DIFF_5G_80BW2S_160BW2S_A	HS_ENTRY_ID + 60
#define MIB_HW_TX_POWER_DIFF_5G_80BW3S_160BW3S_A	HS_ENTRY_ID + 61
#define MIB_HW_TX_POWER_DIFF_5G_80BW4S_160BW4S_A	HS_ENTRY_ID + 62

#define MIB_HW_TX_POWER_DIFF_20BW1S_OFDM1T_B		HS_ENTRY_ID + 63
#define MIB_HW_TX_POWER_DIFF_40BW2S_20BW2S_B		HS_ENTRY_ID + 64
#define MIB_HW_TX_POWER_DIFF_OFDM2T_CCK2T_B			HS_ENTRY_ID + 65
#define MIB_HW_TX_POWER_DIFF_40BW3S_20BW3S_B		HS_ENTRY_ID + 66
#define MIB_HW_TX_POWER_DIFF_OFDM3T_CCK3T_B			HS_ENTRY_ID + 67
#define MIB_HW_TX_POWER_DIFF_40BW4S_20BW4S_B		HS_ENTRY_ID + 68
#define MIB_HW_TX_POWER_DIFF_OFDM4T_CCK4T_B			HS_ENTRY_ID + 69

#define MIB_HW_TX_POWER_DIFF_5G_20BW1S_OFDM1T_B		HS_ENTRY_ID + 70
#define MIB_HW_TX_POWER_DIFF_5G_40BW2S_20BW2S_B		HS_ENTRY_ID + 71
#define MIB_HW_TX_POWER_DIFF_5G_40BW3S_20BW3S_B		HS_ENTRY_ID + 72
#define MIB_HW_TX_POWER_DIFF_5G_40BW4S_20BW4S_B		HS_ENTRY_ID + 73
#define MIB_HW_TX_POWER_DIFF_5G_RSVD_OFDM4T_B		HS_ENTRY_ID + 74
#define MIB_HW_TX_POWER_DIFF_5G_80BW1S_160BW1S_B	HS_ENTRY_ID + 75
#define MIB_HW_TX_POWER_DIFF_5G_80BW2S_160BW2S_B	HS_ENTRY_ID + 76
#define MIB_HW_TX_POWER_DIFF_5G_80BW3S_160BW3S_B	HS_ENTRY_ID + 77
#define MIB_HW_TX_POWER_DIFF_5G_80BW4S_160BW4S_B	HS_ENTRY_ID + 78
#endif
#define MIB_HW_FON_KEYWORD					HS_ENTRY_ID + 79
#define MIB_WAN_PHY_PORT				HS_ENTRY_ID + 80
#define MIB_HW_RF_XCAP					HS_ENTRY_ID + 81
#define MIB_HW_11N_THER2                                     HS_ENTRY_ID + 101
#define MIB_HW_RF_XCAP2					HS_ENTRY_ID + 102

#ifdef WLAN_DUALBAND_CONCURRENT
#define MIB_HW_WLAN1_TX_POWER_CCK_A					HS_ENTRY_ID + 82
#define MIB_HW_WLAN1_TX_POWER_CCK_B					HS_ENTRY_ID + 83
#define MIB_HW_WLAN1_TX_POWER_HT40_1S_A					HS_ENTRY_ID + 84
#define MIB_HW_WLAN1_TX_POWER_HT40_1S_B					HS_ENTRY_ID + 85
#define MIB_HW_WLAN1_TX_POWER_HT40_2S					HS_ENTRY_ID + 86
#define MIB_HW_WLAN1_TX_POWER_HT20					HS_ENTRY_ID + 87
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM					HS_ENTRY_ID + 88
#define MIB_HW_WLAN1_11N_TSSI1					HS_ENTRY_ID + 89
#define MIB_HW_WLAN1_11N_TSSI2					HS_ENTRY_ID + 90
#define MIB_HW_WLAN1_11N_THER					    HS_ENTRY_ID + 91
#define MIB_HW_WLAN1_RF_XCAP					HS_ENTRY_ID + 92
#define MIB_HW_WLAN1_11N_PA_TYPE				HS_ENTRY_ID + 94  // 93 is wlan0 11n pa type
#define MIB_HW_WLAN1_11N_TRSWITCH				HS_ENTRY_ID + 97 // 95 is wlan0 trswpape_c9
#define MIB_HW_WLAN1_11N_TRSWPAPE_C9				HS_ENTRY_ID + 98 // 95 is wlan0 trswpape_c9
#define MIB_HW_WLAN1_11N_TRSWPAPE_CC				HS_ENTRY_ID + 99
#define MIB_HW_WLAN1_REG_DOMAIN					HS_ENTRY_ID + 100
#define MIB_HW_WLAN1_11N_THER2                                     HS_ENTRY_ID + 103 // 101,102 is wlan0 ther2 and xcap2
#define MIB_HW_WLAN1_RF_XCAP2					HS_ENTRY_ID + 104
#endif

#if defined(CONFIG_GPON_FEATURE) || defined(CONFIG_EPON_FEATURE) || defined(CONFIG_FIBER_FEATURE)
#define MIB_PON_MODE						HS_ENTRY_ID + 105
#define MIB_PON_LED_SPEC					HS_ENTRY_ID + 106
#if defined(CONFIG_GPON_FEATURE)
#define MIB_GPON_SN							HS_ENTRY_ID + 107
#endif
#endif

// add 8814 HW entry for antenna C/D
#ifdef CONFIG_WLAN_HAL_8814AE
#define MIB_HW_TX_POWER_CCK_C					HS_ENTRY_ID +  108
#define MIB_HW_TX_POWER_CCK_D				HS_ENTRY_ID + 109

#define MIB_HW_TX_POWER_HT40_1S_C					HS_ENTRY_ID + 110
#define MIB_HW_TX_POWER_HT40_1S_D				HS_ENTRY_ID + 111

#define MIB_HW_TX_POWER_5G_HT40_1S_C		HS_ENTRY_ID + 112
#define MIB_HW_TX_POWER_5G_HT40_1S_D		HS_ENTRY_ID + 113

#define MIB_HW_TX_POWER_DIFF_20BW1S_OFDM1T_C		HS_ENTRY_ID + 114
#define MIB_HW_TX_POWER_DIFF_40BW2S_20BW2S_C		HS_ENTRY_ID + 115
#define MIB_HW_TX_POWER_DIFF_OFDM2T_CCK2T_C			HS_ENTRY_ID + 116
#define MIB_HW_TX_POWER_DIFF_40BW3S_20BW3S_C		HS_ENTRY_ID + 117
#define MIB_HW_TX_POWER_DIFF_OFDM3T_CCK3T_C			HS_ENTRY_ID + 118
#define MIB_HW_TX_POWER_DIFF_40BW4S_20BW4S_C		HS_ENTRY_ID + 119
#define MIB_HW_TX_POWER_DIFF_OFDM4T_CCK4T_C			HS_ENTRY_ID + 120

#define MIB_HW_TX_POWER_DIFF_5G_20BW1S_OFDM1T_C		HS_ENTRY_ID + 121
#define MIB_HW_TX_POWER_DIFF_5G_40BW2S_20BW2S_C		HS_ENTRY_ID + 122
#define MIB_HW_TX_POWER_DIFF_5G_40BW3S_20BW3S_C		HS_ENTRY_ID + 123
#define MIB_HW_TX_POWER_DIFF_5G_40BW4S_20BW4S_C		HS_ENTRY_ID + 124
#define MIB_HW_TX_POWER_DIFF_5G_RSVD_OFDM4T_C		HS_ENTRY_ID + 125
#define MIB_HW_TX_POWER_DIFF_5G_80BW1S_160BW1S_C	HS_ENTRY_ID + 126
#define MIB_HW_TX_POWER_DIFF_5G_80BW2S_160BW2S_C	HS_ENTRY_ID + 127
#define MIB_HW_TX_POWER_DIFF_5G_80BW3S_160BW3S_C	HS_ENTRY_ID + 128
#define MIB_HW_TX_POWER_DIFF_5G_80BW4S_160BW4S_C	HS_ENTRY_ID + 129

#define MIB_HW_TX_POWER_DIFF_20BW1S_OFDM1T_D		HS_ENTRY_ID + 130
#define MIB_HW_TX_POWER_DIFF_40BW2S_20BW2S_D		HS_ENTRY_ID + 131
#define MIB_HW_TX_POWER_DIFF_OFDM2T_CCK2T_D			HS_ENTRY_ID + 132
#define MIB_HW_TX_POWER_DIFF_40BW3S_20BW3S_D		HS_ENTRY_ID + 133
#define MIB_HW_TX_POWER_DIFF_OFDM3T_CCK3T_D			HS_ENTRY_ID + 134
#define MIB_HW_TX_POWER_DIFF_40BW4S_20BW4S_D		HS_ENTRY_ID + 135
#define MIB_HW_TX_POWER_DIFF_OFDM4T_CCK4T_D			HS_ENTRY_ID + 136

#define MIB_HW_TX_POWER_DIFF_5G_20BW1S_OFDM1T_D		HS_ENTRY_ID + 137
#define MIB_HW_TX_POWER_DIFF_5G_40BW2S_20BW2S_D		HS_ENTRY_ID + 138
#define MIB_HW_TX_POWER_DIFF_5G_40BW3S_20BW3S_D		HS_ENTRY_ID + 139
#define MIB_HW_TX_POWER_DIFF_5G_40BW4S_20BW4S_D		HS_ENTRY_ID + 140
#define MIB_HW_TX_POWER_DIFF_5G_RSVD_OFDM4T_D		HS_ENTRY_ID + 141
#define MIB_HW_TX_POWER_DIFF_5G_80BW1S_160BW1S_D	HS_ENTRY_ID + 142
#define MIB_HW_TX_POWER_DIFF_5G_80BW2S_160BW2S_D	HS_ENTRY_ID + 143
#define MIB_HW_TX_POWER_DIFF_5G_80BW3S_160BW3S_D	HS_ENTRY_ID + 144
#define MIB_HW_TX_POWER_DIFF_5G_80BW4S_160BW4S_D	HS_ENTRY_ID + 145

#ifdef WLAN_DUALBAND_CONCURRENT
#define MIB_HW_WLAN1_TX_POWER_CCK_C					HS_ENTRY_ID + 146
#define MIB_HW_WLAN1_TX_POWER_CCK_D					HS_ENTRY_ID + 147
#define MIB_HW_WLAN1_TX_POWER_HT40_1S_C					HS_ENTRY_ID + 148
#define MIB_HW_WLAN1_TX_POWER_HT40_1S_D					HS_ENTRY_ID + 149
#endif

#endif


#define MIB_HW_TARGET_PWR					HS_ENTRY_ID + 150
#ifdef WLAN_DUALBAND_CONCURRENT
#define MIB_HW_WLAN1_TARGET_PWR					HS_ENTRY_ID + 151
#endif

#ifdef CONFIG_LAN_SDS_FEATURE
#define MIB_LAN_SDS_MODE					 HS_ENTRY_ID + 152
#endif


#if defined(CONFIG_WLAN_HAL_8814AE) && defined(WLAN_DUALBAND_CONCURRENT)
#define MIB_HW_WLAN1_TX_POWER_DIFF_20BW1S_OFDM1T_A		HS_ENTRY_ID + 153
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW2S_20BW2S_A		HS_ENTRY_ID + 154
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM2T_CCK2T_A			HS_ENTRY_ID + 155
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW3S_20BW3S_A		HS_ENTRY_ID + 156
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM3T_CCK3T_A			HS_ENTRY_ID + 157
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW4S_20BW4S_A		HS_ENTRY_ID + 158
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM4T_CCK4T_A			HS_ENTRY_ID + 159

#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_20BW1S_OFDM1T_A		HS_ENTRY_ID + 160
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW2S_20BW2S_A		HS_ENTRY_ID + 161
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW3S_20BW3S_A		HS_ENTRY_ID + 162
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW4S_20BW4S_A		HS_ENTRY_ID + 163
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_RSVD_OFDM4T_A		HS_ENTRY_ID + 164
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW1S_160BW1S_A	HS_ENTRY_ID + 165
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW2S_160BW2S_A	HS_ENTRY_ID + 166
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW3S_160BW3S_A	HS_ENTRY_ID + 167
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW4S_160BW4S_A	HS_ENTRY_ID + 168

#define MIB_HW_WLAN1_TX_POWER_DIFF_20BW1S_OFDM1T_B		HS_ENTRY_ID + 169
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW2S_20BW2S_B		HS_ENTRY_ID + 170
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM2T_CCK2T_B			HS_ENTRY_ID + 171
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW3S_20BW3S_B		HS_ENTRY_ID + 172
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM3T_CCK3T_B			HS_ENTRY_ID + 173
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW4S_20BW4S_B		HS_ENTRY_ID + 174
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM4T_CCK4T_B			HS_ENTRY_ID + 174

#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_20BW1S_OFDM1T_B		HS_ENTRY_ID + 175
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW2S_20BW2S_B		HS_ENTRY_ID + 176
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW3S_20BW3S_B		HS_ENTRY_ID + 177
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW4S_20BW4S_B		HS_ENTRY_ID + 178
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_RSVD_OFDM4T_B		HS_ENTRY_ID + 179
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW1S_160BW1S_B	HS_ENTRY_ID + 180
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW2S_160BW2S_B	HS_ENTRY_ID + 181
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW3S_160BW3S_B	HS_ENTRY_ID + 182
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW4S_160BW4S_B	HS_ENTRY_ID + 183

#define MIB_HW_WLAN1_TX_POWER_DIFF_20BW1S_OFDM1T_C		HS_ENTRY_ID + 184
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW2S_20BW2S_C		HS_ENTRY_ID + 185
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM2T_CCK2T_C			HS_ENTRY_ID + 186
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW3S_20BW3S_C		HS_ENTRY_ID + 187
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM3T_CCK3T_C			HS_ENTRY_ID + 188
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW4S_20BW4S_C		HS_ENTRY_ID + 189
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM4T_CCK4T_C			HS_ENTRY_ID + 190

#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_20BW1S_OFDM1T_C		HS_ENTRY_ID + 191
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW2S_20BW2S_C		HS_ENTRY_ID + 192
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW3S_20BW3S_C		HS_ENTRY_ID + 193
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW4S_20BW4S_C		HS_ENTRY_ID + 194
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_RSVD_OFDM4T_C		HS_ENTRY_ID + 195
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW1S_160BW1S_C	HS_ENTRY_ID + 196
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW2S_160BW2S_C	HS_ENTRY_ID + 197
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW3S_160BW3S_C	HS_ENTRY_ID + 198
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW4S_160BW4S_C	HS_ENTRY_ID + 199

#define MIB_HW_WLAN1_TX_POWER_DIFF_20BW1S_OFDM1T_D		HS_ENTRY_ID + 200
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW2S_20BW2S_D		HS_ENTRY_ID + 201
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM2T_CCK2T_D			HS_ENTRY_ID + 202
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW3S_20BW3S_D		HS_ENTRY_ID + 203
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM3T_CCK3T_D			HS_ENTRY_ID + 204
#define MIB_HW_WLAN1_TX_POWER_DIFF_40BW4S_20BW4S_D		HS_ENTRY_ID + 205
#define MIB_HW_WLAN1_TX_POWER_DIFF_OFDM4T_CCK4T_D			HS_ENTRY_ID + 206

#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_20BW1S_OFDM1T_D		HS_ENTRY_ID + 207
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW2S_20BW2S_D		HS_ENTRY_ID + 208
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW3S_20BW3S_D		HS_ENTRY_ID + 209
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_40BW4S_20BW4S_D		HS_ENTRY_ID + 210
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_RSVD_OFDM4T_D		HS_ENTRY_ID + 211
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW1S_160BW1S_D	HS_ENTRY_ID + 212
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW2S_160BW2S_D	HS_ENTRY_ID + 213
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW3S_160BW3S_D	HS_ENTRY_ID + 214
#define MIB_HW_WLAN1_TX_POWER_DIFF_5G_80BW4S_160BW4S_D	HS_ENTRY_ID + 215

#define MIB_HW_WLAN1_TX_POWER_5G_HT40_1S_C		HS_ENTRY_ID + 216
#define MIB_HW_WLAN1_TX_POWER_5G_HT40_1S_D		HS_ENTRY_ID + 217

#endif //#if defined(CONFIG_WLAN_HAL_8814AE) && defined(WLAN_DUALBAND_CONCURRENT)

#if defined(CONFIG_EPON_FEATURE)
#define MIB_EPON_VENDOR_ID                      HS_ENTRY_ID + 218
#define MIB_EPON_ONU_MODEL                      HS_ENTRY_ID + 219
#define MIB_EPON_EXTONU_MODEL                   HS_ENTRY_ID + 220
#define MIB_EPON_HW_VERSION                     HS_ENTRY_ID + 221
#define MIB_EPON_SW_VERSION                     HS_ENTRY_ID + 222
#define MIB_EPON_SILENT_MODE					HS_ENTRY_ID + 223
#endif

#define MIB_HW_CWMP_MANUFACTURER		HS_ENTRY_ID + 224
#define MIB_HW_CWMP_PRODUCTCLASS		HS_ENTRY_ID + 225
#define MIB_HW_HWVER				HS_ENTRY_ID + 226


#define CHAIN_ENTRY_TBL_ID				350

#define MIB_IP_PORT_FILTER_TBL				CHAIN_ENTRY_TBL_ID + 1
#define MIB_MAC_FILTER_TBL				CHAIN_ENTRY_TBL_ID + 2
#define MIB_PORT_FW_TBL					CHAIN_ENTRY_TBL_ID + 3
#define MIB_ATM_VC_TBL					CHAIN_ENTRY_TBL_ID + 4
#define MIB_IP_ROUTE_TBL				CHAIN_ENTRY_TBL_ID + 5
#define MIB_ACL_IP_TBL					CHAIN_ENTRY_TBL_ID + 6
#ifdef WLAN_SUPPORT
#ifdef WLAN_ACL
//#define MIB_WLAN_AC_TBL					CHAIN_ENTRY_TBL_ID + 7
#endif
#endif

#define MIB_SW_PORT_TBL					CHAIN_ENTRY_TBL_ID + 8
#define MIB_VLAN_TBL					CHAIN_ENTRY_TBL_ID + 9
#define MIB_IP_QOS_TBL					CHAIN_ENTRY_TBL_ID + 10
#define MIB_ACC_TBL					CHAIN_ENTRY_TBL_ID + 11
#if 0 //def WLAN_WDS
#define MIB_WDS_TBL	   			        CHAIN_ENTRY_TBL_ID + 12
#endif

#ifdef PORT_TRIGGERING
#define MIB_PORT_TRG_TBL				CHAIN_ENTRY_TBL_ID + 13
#endif

#ifdef NATIP_FORWARDING
#define MIB_IP_FW_TBL					CHAIN_ENTRY_TBL_ID + 14
#endif
#ifdef URL_BLOCKING_SUPPORT
#define MIB_URL_FQDN_TBL				CHAIN_ENTRY_TBL_ID + 15
#endif
#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
#ifdef WLAN_SUPPORT
#define CWMP_PSK_TBL					CHAIN_ENTRY_TBL_ID + 16
#endif
#endif /*_CWMP_MIB_*/
#define MIB_MAC_BASE_DHCP_TBL				CHAIN_ENTRY_TBL_ID + 17
#define MIB_AUTO_PVC_SEARCH_TBL				CHAIN_ENTRY_TBL_ID + 18	// for auto-pvc-search
#ifdef CONFIG_USER_DDNS
#define MIB_DDNS_TBL					CHAIN_ENTRY_TBL_ID + 19
#endif

#define MIB_PPPOE_SESSION_TBL				CHAIN_ENTRY_TBL_ID + 21	// Jenny, add for PPPoE session information

#ifdef DOMAIN_BLOCKING_SUPPORT
#define MIB_DOMAIN_BLOCKING_TBL				CHAIN_ENTRY_TBL_ID + 22
#endif

#ifdef URL_BLOCKING_SUPPORT
#define MIB_KEYWD_FILTER_TBL				CHAIN_ENTRY_TBL_ID + 23
#endif

#define MIB_RIP_TBL					CHAIN_ENTRY_TBL_ID + 24

//#define MIB_MBSSIB_TBL					CHAIN_ENTRY_TBL_ID + 25
#define MIB_MBSSIB_WEP_TBL				CHAIN_ENTRY_TBL_ID + 26

#ifdef ACCOUNT_CONFIG
#define MIB_ACCOUNT_CONFIG_TBL				CHAIN_ENTRY_TBL_ID + 27	// Jenny, user account table
#endif

#ifdef VIRTUAL_SERVER_SUPPORT
#define MIB_VIRTUAL_SVR_TBL CHAIN_ENTRY_TBL_ID + 28
#endif

//ql_xu add:
#ifdef MAC_ACL
#define MIB_ACL_MAC_TBL				CHAIN_ENTRY_TBL_ID + 29
#endif
#ifdef NAT_CONN_LIMIT
#define MIB_CONN_LIMIT_TBL			CHAIN_ENTRY_TBL_ID + 30
#endif

#ifdef URL_ALLOWING_SUPPORT
#define MIB_URL_ALLOW_FQDN_TBL            	CHAIN_ENTRY_TBL_ID + 31
#endif

#ifdef CONFIG_USER_ZEBRA_OSPFD_OSPFD
#define MIB_OSPF_TBL				CHAIN_ENTRY_TBL_ID + 32
#endif

#ifdef  QOS_SPEED_LIMIT_SUPPORT
#define MIB_QOS_SPEED_LIMIT	   		CHAIN_ENTRY_TBL_ID + 33
#endif

#ifdef LAYER7_FILTER_SUPPORT
#define MIB_LAYER7_FILTER_TBL     		CHAIN_ENTRY_TBL_ID + 34
#endif

/*+++++add by Jack for VoIP project 20/03/07+++++*/
#ifdef VOIP_SUPPORT
#define MIB_VOIP_CFG_TBL			CHAIN_ENTRY_TBL_ID+35
#endif // VOIP_SUPPORT
/*-----end-----*/

#ifdef PARENTAL_CTRL
#define MIB_PARENTAL_CTRL_TBL			CHAIN_ENTRY_TBL_ID+36
#endif

#ifdef TCP_UDP_CONN_LIMIT
#define MIB_TCP_UDP_CONN_LIMIT_TBL		CHAIN_ENTRY_TBL_ID+37
#endif //TCP_UDP_CONN_LIMIT


#ifdef WEB_REDIRECT_BY_MAC
#define MIB_WEB_REDIR_BY_MAC_TBL		CHAIN_ENTRY_TBL_ID+38
#endif
#define MULTI_ADDRESS_MAPPING_LIMIT_TBL		CHAIN_ENTRY_TBL_ID+39
#define MIB_PFW_ADVANCE_TBL			CHAIN_ENTRY_TBL_ID+40

//ql 20081119 for IP QoS traffic shaping
#ifdef CONFIG_USER_IP_QOS
#define MIB_IP_QOS_TC_TBL			CHAIN_ENTRY_TBL_ID+41
#endif

/*ping_zhang:20080919 START:add for new telefonica tr069 request: dhcp option*/
#ifdef _PRMT_X_TELEFONICA_ES_DHCPOPTION_
#define MIB_DHCP_SERVER_OPTION_TBL		CHAIN_ENTRY_TBL_ID+42
#define MIB_DHCP_CLIENT_OPTION_TBL        	CHAIN_ENTRY_TBL_ID+43
#define MIB_DHCPS_SERVING_POOL_TBL		CHAIN_ENTRY_TBL_ID+44
#endif
/*ping_zhang:20080919 END*/
#define MIB_IP_QOS_QUEUE_TBL			CHAIN_ENTRY_TBL_ID+45

#ifdef WLAN_QoS
#define MIB_WLAN_QOS_AP_TBL		CHAIN_ENTRY_TBL_ID+46
#define MIB_WLAN_QOS_STA_TBL		CHAIN_ENTRY_TBL_ID+47
#endif

#ifdef _SUPPORT_CAPTIVEPORTAL_PROFILE_
#define CWMP_CAPTIVEPORTAL_ALLOWED_LIST		CHAIN_ENTRY_TBL_ID+48
#endif

#ifdef CONFIG_USER_PPTP_CLIENT_PPTP
#define MIB_PPTP_TBL					CHAIN_ENTRY_TBL_ID+49
#endif //end of CONFIG_USER_PPTP_CLIENT_PPTP

#ifdef CONFIG_USER_L2TPD_L2TPD
#define MIB_L2TP_TBL					CHAIN_ENTRY_TBL_ID+50
#endif //end of CONFIG_USER_L2TPD_L2TPD

#ifdef SUPPORT_DHCP_RESERVED_IPADDR
#define MIB_DHCP_RESERVED_IPADDR_TBL	CHAIN_ENTRY_TBL_ID+51
#endif //SUPPORT_DHCP_RESERVED_IPADDR

#ifdef CONFIG_USER_PPPOMODEM
#define MIB_WAN_3G_TBL			CHAIN_ENTRY_TBL_ID+52
#endif //CONFIG_USER_PPPOMODEM

#ifdef CONFIG_USER_DHCPV6_ISC_DHCP411
#define MIB_DHCPV6S_NAME_SERVER_TBL		CHAIN_ENTRY_TBL_ID+53
#define MIB_DHCPV6S_DOMAIN_SEARCH_TBL		CHAIN_ENTRY_TBL_ID+54
#endif

#ifdef CONFIG_NET_IPIP
#define MIB_IPIP_TBL				CHAIN_ENTRY_TBL_ID+57
#endif//end of CONFIG_NET_IPIP

#if defined(CONFIG_USER_PPTPD_PPTPD) || defined(CONFIG_USER_L2TPD_LNS)
#define MIB_VPN_SERVER_TBL			CHAIN_ENTRY_TBL_ID+58
#define MIB_VPN_ACCOUNT_TBL			CHAIN_ENTRY_TBL_ID+59
#endif

#ifdef CONFIG_XFRM
#define MIB_IPSEC_TBL				CHAIN_ENTRY_TBL_ID+60
#endif

#ifdef CONFIG_IPV6
#define MIB_V6_IP_PORT_FILTER_TBL	CHAIN_ENTRY_TBL_ID+61
#define MIB_IPV6_ROUTE_TBL			CHAIN_ENTRY_TBL_ID+62
#endif

#ifdef CONFIG_EPON_FEATURE
#define MIB_EPON_LLID_TBL			CHAIN_ENTRY_TBL_ID+63
#endif

#ifdef CONFIG_DSL_VTUO
#define MIB_VTUO_DPBO_TBL			CHAIN_ENTRY_TBL_ID+64
#define MIB_VTUO_PSD_DS_TBL			CHAIN_ENTRY_TBL_ID+65
#define MIB_VTUO_PSD_US_TBL			CHAIN_ENTRY_TBL_ID+66
/*
#define MIB_VTUO_VN_DS_TBL			CHAIN_ENTRY_TBL_ID+67
#define MIB_VTUO_VN_US_TBL			CHAIN_ENTRY_TBL_ID+68
#define MIB_VTUO_RFI_TBL			CHAIN_ENTRY_TBL_ID+69
*/
#endif /*CONFIG_DSL_VTUO*/

#ifdef CONFIG_USER_DOT1AG_UTILS
#define MIB_DOT1AG_TBL			CHAIN_ENTRY_TBL_ID+70
#endif

#ifdef OSGI_SUPPORT
#define MIB_OSGI_BUNDLE_TBL			CHAIN_ENTRY_TBL_ID+71
#endif

#ifdef CONFIG_CWMP_TRANSFER_QUEUE
#define CWMP_TRANSFER_QUEUE_TBL	CHAIN_ENTRY_TBL_ID+72
#endif

#ifdef _SUPPORT_L2BRIDGING_PROFILE_
#define MIB_L2BRIDGING_BRIDGE_GROUP_TBL CHAIN_ENTRY_TBL_ID+73
#endif

#define	WLAN_CHAIN_ENTRY_ID			CHAIN_ENTRY_TBL_ID+200
#define DUAL_WLAN_CHAIN_START_ID	WLAN_CHAIN_ENTRY_ID

#define MIB_MBSSIB_TBL				DUAL_WLAN_CHAIN_START_ID+1
#define MIB_WLAN1_MBSSIB_TBL		DUAL_WLAN_CHAIN_START_ID+2

#ifdef WLAN_SUPPORT
#ifdef WLAN_ACL
#define MIB_WLAN_AC_TBL				DUAL_WLAN_CHAIN_START_ID+3
#define MIB_WLAN1_AC_TBL			DUAL_WLAN_CHAIN_START_ID+4
#endif
#endif

#ifdef WLAN_WDS
#define MIB_WDS_TBL   			    DUAL_WLAN_CHAIN_START_ID+5
#define MIB_WLAN1_WDS_TBL	   		DUAL_WLAN_CHAIN_START_ID+6
#endif

#ifdef WLAN_11R
#define MIB_WLAN_FTKH_TBL			DUAL_WLAN_CHAIN_START_ID+7
#define MIB_WLAN1_FTKH_TBL			DUAL_WLAN_CHAIN_START_ID+8
#endif

#define DUAL_WLAN_CHAIN_END_ID		DUAL_WLAN_CHAIN_START_ID+9

/*************************************************************************************/
/*** Do "NOT" add MIB TABLE after this line, please add before WLAN_CHAIN_ENTRY_ID ***/
/*************************************************************************************/
#define MIB_CHAIN_TBL_END			DUAL_WLAN_CHAIN_END_ID

#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
#define CWMP_ID						1000
#define CWMP_PROVISIONINGCODE				CWMP_ID + 1
#define CWMP_ACS_URL					CWMP_ID + 2
#define CWMP_ACS_USERNAME				CWMP_ID + 3
#define CWMP_ACS_PASSWORD				CWMP_ID + 4
#define CWMP_INFORM_ENABLE				CWMP_ID + 5
#define CWMP_INFORM_INTERVAL				CWMP_ID + 6
#define CWMP_INFORM_TIME				CWMP_ID + 7
#define CWMP_CONREQ_USERNAME				CWMP_ID + 8
#define CWMP_CONREQ_PASSWORD				CWMP_ID + 9
#define CWMP_ACS_UPGRADESMANAGED			CWMP_ID + 10
#define CWMP_LAN_CONFIGPASSWD				CWMP_ID + 11
#define CWMP_SERIALNUMBER				CWMP_ID + 12

#define CWMP_DHCP_SERVERCONF				CWMP_ID + 13
#define CWMP_LAN_IPIFENABLE				CWMP_ID + 14
#define CWMP_LAN_ETHIFENABLE				CWMP_ID + 15

#define CWMP_WLAN_BASICENCRY				CWMP_ID + 16

#define CWMP_DL_COMMANDKEY				CWMP_ID + 18
#define CWMP_DL_STARTTIME				CWMP_ID + 19
#define CWMP_DL_COMPLETETIME				CWMP_ID + 20
#define CWMP_DL_FAULTCODE				CWMP_ID + 21

#define CWMP_INFORM_EVENTCODE				CWMP_ID + 22
#define CWMP_RB_COMMANDKEY				CWMP_ID + 23
#define CWMP_ACS_PARAMETERKEY				CWMP_ID + 24

#define CWMP_CERT_PASSWORD				CWMP_ID + 25

#define CWMP_FLAG					CWMP_ID + 26
#define CWMP_SI_COMMANDKEY				CWMP_ID + 27	/*ScheduleInform's commandkey*/

#ifdef _PRMT_USERINTERFACE_						/*InternetGatewayDevice.UserInterface.*/
#define UIF_PW_REQUIRED					CWMP_ID + 28 	/*PasswordRequired*/
#define UIF_PW_USER_SEL					CWMP_ID + 29	/*PasswordUserSelectable*/
#define UIF_UPGRADE					CWMP_ID + 30	/*UpgradeAvailable*/
#define UIF_WARRANTYDATE				CWMP_ID + 31	/*WarrantyDate*/
#define UIF_AUTOUPDATESERVER				CWMP_ID + 32	/*AutoUpdateServer*/
#define UIF_USERUPDATESERVER				CWMP_ID + 33	/*UserUpdateServer*/
#endif /*_PRMT_USERINTERFACE_*/

#ifdef _PRMT_X_CT_COM_IPTV_
#define CWMP_CT_IPTV_IGMPENABLE				CWMP_ID + 34
#define CWMP_CT_IPTV_STBNUMBER				CWMP_ID + 35
#endif

#ifdef _PRMT_X_CT_COM_RECON_
#define CWMP_CT_RECON_ENABLE				CWMP_ID + 36
#endif //_PRMT_X_CT_COM_RECON_

#ifdef _PRMT_X_CT_COM_MWBAND_
#define CWMP_CT_MWBAND_MODE				CWMP_ID + 37
#define CWMP_CT_MWBAND_NUMBER				CWMP_ID + 38
#define CWMP_CT_MWBAND_STB_ENABLE			CWMP_ID + 39
#define CWMP_CT_MWBAND_STB_NUM				CWMP_ID + 40
#define CWMP_CT_MWBAND_CMR_ENABLE			CWMP_ID + 41
#define CWMP_CT_MWBAND_CMR_NUM				CWMP_ID + 42
#define CWMP_CT_MWBAND_PC_ENABLE			CWMP_ID + 43
#define CWMP_CT_MWBAND_PC_NUM				CWMP_ID + 44
#define CWMP_CT_MWBAND_PHN_ENABLE			CWMP_ID + 45
#define CWMP_CT_MWBAND_PHN_NUM				CWMP_ID + 46
#endif /*_PRMT_X_CT_COM_MWBAND_*/

#ifdef _PRMT_X_CT_COM_PORTALMNT_
#define CWMP_CT_PM_ENABLE				CWMP_ID + 47
#define CWMP_CT_PM_URL4PC				CWMP_ID + 48
#define CWMP_CT_PM_URL4STB				CWMP_ID + 49
#define CWMP_CT_PM_URL4MOBILE				CWMP_ID + 50
#endif /*_PRMT_X_CT_COM_PORTALMNT_*/


#if defined( _PRMT_X_CT_COM_DHCP_)||defined(IP_BASED_CLIENT_TYPE)
#define CWMP_CT_STB_MINADDR				CWMP_ID + 51
#define CWMP_CT_STB_MAXADDR				CWMP_ID + 52
#define CWMP_CT_PHN_MINADDR				CWMP_ID + 53
#define CWMP_CT_PHN_MAXADDR				CWMP_ID + 54
#define CWMP_CT_CMR_MINADDR				CWMP_ID + 55
#define CWMP_CT_CMR_MAXADDR				CWMP_ID + 56
#define CWMP_CT_PC_MINADDR				CWMP_ID + 57
#define CWMP_CT_PC_MAXADDR				CWMP_ID + 58
#define CWMP_CT_HGW_MINADDR             		CWMP_ID + 59
#define CWMP_CT_HGW_MAXADDR             		CWMP_ID + 60
#endif //_PRMT_X_CT_COM_DHCP_

#define CWMP_ACS_KICKURL				CWMP_ID + 74
#define CWMP_ACS_DOWNLOADURL				CWMP_ID + 75
#define CWMP_CONREQ_PORT				CWMP_ID + 76 /*port for connection request*/
#define CWMP_CONREQ_PATH				CWMP_ID + 77 /*path for connection request*/
#define CWMP_FLAG2					CWMP_ID + 78

//#ifdef _PRMT_TR143_
#define TR143_UDPECHO_ENABLE				CWMP_ID + 79
#define TR143_UDPECHO_ITFTYPE				CWMP_ID + 80
#define TR143_UDPECHO_SRCIP				CWMP_ID + 81
#define TR143_UDPECHO_PORT				CWMP_ID + 82
#define TR143_UDPECHO_PLUS				CWMP_ID + 83
//#endif //_PRMT_TR143_

// Magician: This value should be able to persist across CPE reboots.
#define CWMP_PERSISTENT_DATA CWMP_ID + 84 // InternetGatewayDevice.DeviceConfig.PersistentData

/*star:20091228 START add for store parameterkey*/
#define CWMP_PARAMETERKEY                        CWMP_ID + 85
/*star:20091228 END*/

#define CWMP_WAN_INTERFACE CWMP_ID + 86
#define CWMP_ACS_URL_OLD CWMP_ID + 87

#ifdef CONFIG_CWMP_TRANSFER_QUEUE
#define CWMP_DL_QUEUE_IDX CWMP_ID + 88
#endif

#else /*_CWMP_MIB_*/
#define CWMP_ID						1000
#if defined( _PRMT_X_CT_COM_DHCP_)||defined(IP_BASED_CLIENT_TYPE)
#define CWMP_CT_STB_MINADDR				CWMP_ID + 51
#define CWMP_CT_STB_MAXADDR				CWMP_ID + 52
#define CWMP_CT_PHN_MINADDR				CWMP_ID + 53
#define CWMP_CT_PHN_MAXADDR				CWMP_ID + 54
#define CWMP_CT_CMR_MINADDR				CWMP_ID + 55
#define CWMP_CT_CMR_MAXADDR				CWMP_ID + 56
#define CWMP_CT_PC_MINADDR				CWMP_ID + 57
#define CWMP_CT_PC_MAXADDR				CWMP_ID + 58
#define CWMP_CT_HGW_MINADDR             		CWMP_ID + 59
#define CWMP_CT_HGW_MAXADDR             		CWMP_ID + 60
#endif //_PRMT_X_CT_COM_DHCP_
#endif


#ifdef CONFIG_DSL_VTUO
#define VTUO_ID							1200
/*======channel profile=======*/
/*Downstream*/
#define VTUO_CHAN_DS_NDR_MAX			VTUO_ID+1
#define VTUO_CHAN_DS_NDR_MIN			VTUO_ID+2
#define VTUO_CHAN_DS_MAX_DELAY			VTUO_ID+3
#define VTUO_CHAN_DS_MIN_INP			VTUO_ID+4
#define VTUO_CHAN_DS_MIN_INP8			VTUO_ID+5
#define VTUO_CHAN_DS_SOS_MDR			VTUO_ID+6
/*Upstream*/
#define VTUO_CHAN_US_NDR_MAX			VTUO_ID+7
#define VTUO_CHAN_US_NDR_MIN			VTUO_ID+8
#define VTUO_CHAN_US_MAX_DELAY			VTUO_ID+9
#define VTUO_CHAN_US_MIN_INP			VTUO_ID+10
#define VTUO_CHAN_US_MIN_INP8			VTUO_ID+11
#define VTUO_CHAN_US_SOS_MDR			VTUO_ID+12
/*======ginp setup=======*/
/*Downstream*/
#define VTUO_GINP_DS_MODE				VTUO_ID+13
#define VTUO_GINP_DS_ET_MAX				VTUO_ID+14
#define VTUO_GINP_DS_ET_MIN				VTUO_ID+15
#define VTUO_GINP_DS_NDR_MAX			VTUO_ID+16
#define VTUO_GINP_DS_SHINE_RATIO		VTUO_ID+17
#define VTUO_GINP_DS_LEFTR_THRD			VTUO_ID+18
#define VTUO_GINP_DS_MAX_DELAY			VTUO_ID+19
#define VTUO_GINP_DS_MIN_DELAY			VTUO_ID+20
#define VTUO_GINP_DS_MIN_INP			VTUO_ID+21
#define VTUO_GINP_DS_REIN_SYM			VTUO_ID+22
#define VTUO_GINP_DS_REIN_FREQ			VTUO_ID+23
/*Upstream*/
#define VTUO_GINP_US_MODE				VTUO_ID+24
#define VTUO_GINP_US_ET_MAX				VTUO_ID+25
#define VTUO_GINP_US_ET_MIN				VTUO_ID+26
#define VTUO_GINP_US_NDR_MAX			VTUO_ID+27
#define VTUO_GINP_US_SHINE_RATIO		VTUO_ID+28
#define VTUO_GINP_US_LEFTR_THRD			VTUO_ID+29
#define VTUO_GINP_US_MAX_DELAY			VTUO_ID+30
#define VTUO_GINP_US_MIN_DELAY			VTUO_ID+31
#define VTUO_GINP_US_MIN_INP			VTUO_ID+32
#define VTUO_GINP_US_REIN_SYM			VTUO_ID+33
#define VTUO_GINP_US_REIN_FREQ			VTUO_ID+34
/*======line profile=======*/
#define VTUO_LINE_VDSL2_PROFILE			VTUO_ID+35
/*
#define VTUO_LINE_TRANS_MODE			VTUO_ID+36
*/
#define VTUO_LINE_ADSL_PROTOCOL			VTUO_ID+37
/*
#define VTUO_LINE_CLASS_MASK			VTUO_ID+38
*/
#define VTUO_LINE_LIMIT_MASK			VTUO_ID+39
#define VTUO_LINE_US0_MASK				VTUO_ID+40
#define VTUO_LINE_UPBO_ENABLE			VTUO_ID+41
#define VTUO_LINE_UPBOKL				VTUO_ID+42
#define VTUO_LINE_UPBO_1A				VTUO_ID+43
#define VTUO_LINE_UPBO_2A				VTUO_ID+44
#define VTUO_LINE_UPBO_3A				VTUO_ID+45
#define VTUO_LINE_UPBO_4A				VTUO_ID+46
#define VTUO_LINE_UPBO_1B				VTUO_ID+47
#define VTUO_LINE_UPBO_2B				VTUO_ID+48
#define VTUO_LINE_UPBO_3B				VTUO_ID+49
#define VTUO_LINE_UPBO_4B				VTUO_ID+50
/*
#define VTUO_LINE_RT_MODE				VTUO_ID+51
*/
#define VTUO_LINE_US0_ENABLE			VTUO_ID+52
/*Downstream*/
/*
#define VTUO_LINE_DS_MAX_SNR_NOLMT		VTUO_ID+53
*/
#define VTUO_LINE_DS_MAX_SNR			VTUO_ID+54
#define VTUO_LINE_DS_TARGET_SNR			VTUO_ID+55
#define VTUO_LINE_DS_MIN_SNR			VTUO_ID+56
#define VTUO_LINE_DS_BITSWAP			VTUO_ID+57
/*ds: no max rx power*/
/*
#define VTUO_LINE_DS_MAX_TXPWR			VTUO_ID+58
#define VTUO_LINE_DS_MIN_OH_RATE		VTUO_ID+59
*/
/*Upstream*/
/*
#define VTUO_LINE_US_MAX_SNR_NOLMT		VTUO_ID+60
*/
#define VTUO_LINE_US_MAX_SNR			VTUO_ID+61
#define VTUO_LINE_US_TARGET_SNR			VTUO_ID+62
#define VTUO_LINE_US_MIN_SNR			VTUO_ID+63
#define VTUO_LINE_US_BITSWAP			VTUO_ID+64
/*
#define VTUO_LINE_US_MAX_RXPWR_NOLMT		VTUO_ID+65
#define VTUO_LINE_US_MAX_RXPWR			VTUO_ID+66
#define VTUO_LINE_US_MAX_TXPWR			VTUO_ID+67
#define VTUO_LINE_US_MIN_OH_RATE		VTUO_ID+68
*/
/*======Inm profile=======*/
/* NearEnd */
#define VTUO_INM_NE_INP_EQ_MODE			VTUO_ID+69
#define VTUO_INM_NE_INMCC				VTUO_ID+70
#define VTUO_INM_NE_IAT_OFFSET			VTUO_ID+71
#define VTUO_INM_NE_IAT_SETUP			VTUO_ID+72
/*
#define VTUO_INM_NE_ISDD_SEN			VTUO_ID+73
*/
/* FarEnd */
#define VTUO_INM_FE_INP_EQ_MODE			VTUO_ID+74
#define VTUO_INM_FE_INMCC				VTUO_ID+75
#define VTUO_INM_FE_IAT_OFFSET			VTUO_ID+76
#define VTUO_INM_FE_IAT_SETUP			VTUO_ID+77
/*
#define VTUO_INM_FE_ISDD_SEN			VTUO_ID+78
*/
/*======SRA setup=======*/
/*Downstream*/
#define VTUO_SRA_DS_RA_MODE				VTUO_ID+79
#define VTUO_SRA_DS_DYNAMIC_DEPTH		VTUO_ID+80
#define VTUO_SRA_DS_USHIFT_SNR			VTUO_ID+81
#define VTUO_SRA_DS_USHIFT_TIME			VTUO_ID+82
#define VTUO_SRA_DS_DSHIFT_SNR			VTUO_ID+83
#define VTUO_SRA_DS_DSHIFT_TIME			VTUO_ID+84
#define VTUO_SRA_DS_SOS_TIME			VTUO_ID+85
#define VTUO_SRA_DS_SOS_CRC				VTUO_ID+86
#define VTUO_SRA_DS_SOS_NTONE			VTUO_ID+87
#define VTUO_SRA_DS_SOS_MAX				VTUO_ID+88
/*
#define VTUO_SRA_DS_SOS_MSTEP_TONE		VTUO_ID+89
*/
#define VTUO_SRA_DS_ROC_ENABLE			VTUO_ID+90
#define VTUO_SRA_DS_ROC_SNR				VTUO_ID+91
#define VTUO_SRA_DS_ROC_MIN_INP			VTUO_ID+92
/*Upstream*/
#define VTUO_SRA_US_RA_MODE				VTUO_ID+93
#define VTUO_SRA_US_DYNAMIC_DEPTH		VTUO_ID+94
#define VTUO_SRA_US_USHIFT_SNR			VTUO_ID+95
#define VTUO_SRA_US_USHIFT_TIME			VTUO_ID+96
#define VTUO_SRA_US_DSHIFT_SNR			VTUO_ID+97
#define VTUO_SRA_US_DSHIFT_TIME			VTUO_ID+98
#define VTUO_SRA_US_SOS_TIME			VTUO_ID+99
#define VTUO_SRA_US_SOS_CRC				VTUO_ID+100
#define VTUO_SRA_US_SOS_NTONE			VTUO_ID+101
#define VTUO_SRA_US_SOS_MAX				VTUO_ID+102
/*
#define VTUO_SRA_US_SOS_MSTEP_TONE		VTUO_ID+103
*/
#define VTUO_SRA_US_ROC_ENABLE			VTUO_ID+104
#define VTUO_SRA_US_ROC_SNR				VTUO_ID+105
#define VTUO_SRA_US_ROC_MIN_INP			VTUO_ID+106
/*======DPBO setup=======*/
#define VTUO_DPBO_ENABLE				VTUO_ID+107
#define VTUO_DPBO_ESEL					VTUO_ID+108
#define VTUO_DPBO_ESCMA					VTUO_ID+109
#define VTUO_DPBO_ESCMB					VTUO_ID+110
#define VTUO_DPBO_ESCMC					VTUO_ID+111
#define VTUO_DPBO_MUS					VTUO_ID+112
#define VTUO_DPBO_FMIN					VTUO_ID+113
#define VTUO_DPBO_FMAX					VTUO_ID+114
/*======VN setup=======*/
/*
#define VTUO_VN_DS_ENABLE				VTUO_ID+115
#define VTUO_VN_US_ENABLE				VTUO_ID+116
*/
#endif /*CONFIG_DSL_VTUO*/

#define Y1731_ID							1350
#define Y1731_MODE							Y1731_ID+1
#define Y1731_MEGID							Y1731_ID+2
#define Y1731_MYID							Y1731_ID+3
#define Y1731_MEGLEVEL						Y1731_ID+4
#define Y1731_INCL_IFACE					Y1731_ID+5
#define Y1731_LOGLEVEL						Y1731_ID+6
#define Y1731_CCM_INTERVAL					Y1731_ID+7

/*
 * MIB RS (Running Setting)
 */
#define RS_ENTRY_ID				0x10000
#ifdef CONFIG_TR142_MODULE
#define RS_OMCI_ACS_CONFIGURED		RS_ENTRY_ID + 1
#define RS_OMCI_ACS_URL			RS_ENTRY_ID + 2
#define RS_OMCI_ACS_USERNAME		RS_ENTRY_ID + 3
#define RS_OMCI_ACS_PASSWD		RS_ENTRY_ID + 4
#define RS_OMCI_TR069_IF_ID		RS_ENTRY_ID + 5
#endif


#define X_CT_SRV_TR069		0x01
#define X_CT_SRV_INTERNET	0x02
#define X_CT_SRV_OTHER		0x04
#define X_CT_SRV_VOICE		0x08

#ifdef CONFIG_LUNA
#if defined(CONFIG_GPON_FEATURE) || defined(CONFIG_EPON_FEATURE)|| defined(CONFIG_FIBER_FEATURE)
enum  {
	ETH_MODE=0,
	GPON_MODE,
	EPON_MODE,
	FIBER_MODE
} PON_MODE_T;
#endif
#endif

/*
 * MIB value and constant
 */
#define MAX_NAME_LEN					30
#if defined(NEW_IP_QOS_SUPPORT)
#define MAX_WAN_NAME_LEN				40
#endif
#define MAX_PPP_NAME_LEN				63
#define ENC_PPP_NAME_LEN				((MAX_PPP_NAME_LEN+2)/3*4)
#define MAX_FILTER_NUM					20
#ifdef CONFIG_RTK_RG_INIT
#define MAX_VC_NUM					6
#else
#define MAX_VC_NUM					8
#endif
#ifdef CONFIG_RTL_MULTI_PVC_WAN
#define MAX_VC_VIRTUAL_NUM			8
#endif
#ifdef CONFIG_ETHWAN
#define MAX_ETHWAN_NUM					1
#endif
#define MAX_PPP_NUM					8
#ifdef CONFIG_USER_PPPOMODEM
#define MODEM_PPPIDX_FROM				MAX_PPP_NUM
#define MAX_MODEM_PPPNUM				1
#endif //CONFIG_USER_PPPOMODEM
#define MAX_IFINDEX					7
#define COMMENT_LEN					60
#define IP_ADDR_LEN					4
#define MAC_ADDR_LEN					6
#define SNMP_STRING_LEN					64
#define IP6_ADDR_LEN					16
#define MAX_VER_LEN					10
#define MAX_RADVD_CONF_LEN				15
#define MAX_RADVD_CONF_PREFIX_LEN			48
#define MAX_DUID_LEN					42
#define MAX_V6_IP_LEN					40
#define MAX_DHCPV6_CHAIN_ENTRY				5

#ifdef QOS_DIFFSERV
#define MAX_QOS_RULE					20	// add 1 for diffserv rule
#else
#define MAX_QOS_RULE					16
#endif
#define MAX_QOS_QUEUE_NUM				4	//24
#define MAX_QUEUE_DESC_LEN				30

#ifdef CONFIG_ETHWAN
#define SW_PORT_NUM						(CONFIG_LAN_PORT_NUM+1)
#define SW_LAN_PORT_NUM					CONFIG_LAN_PORT_NUM
#else
#define SW_PORT_NUM						CONFIG_LAN_PORT_NUM
#define SW_LAN_PORT_NUM					SW_PORT_NUM
#endif
#define VLAN_NUM					5

#define IF_DOMAIN_LAN					0x10
#define IF_DOMAIN_ELAN					0x20
#define IF_DOMAIN_WLAN					0x40
#define IF_DOMAIN_WAN					0x80

#define RIP_NONE					0
#define RIP_V1						1
#define RIP_V2						2
#define RIP_V1_V2					3
#define RIP_V1_COMPAT					4

//#ifdef WLAN_SUPPORT
#define MAX_IPSEC_NUM					6
#define MAX_IPIP_NUM					2
#define MAX_PPTP_NUM					2
#define MAX_L2TP_NUM					2
#if defined(CONFIG_USER_PPTPD_PPTPD) || defined(CONFIG_USER_L2TPD_LNS)
#define MAX_VPND_NUM					3
#define MAX_VPN_ACCOUNT_NUM				20
#endif
#define MAX_SSID_LEN					33
#define WEP64_KEY_LEN					5
#define WEP128_KEY_LEN					13
#define MAX_CHAN_NUM					14
#define MAX_5G_CHANNEL_NUM			196

#if defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT)
#define MAX_5G_DIFF_NUM					14
#endif

//#ifdef WLAN_WPA
#define MAX_PSK_LEN					64
#define MAX_RS_PASS_LEN					32
//#endif

#define TX_RATE_1M					0x01
#define TX_RATE_2M					0x02
#define TX_RATE_5M					0x04
#define TX_RATE_11M					0x08

#define TX_RATE_6M					0x10
#define TX_RATE_9M					0x20
#define TX_RATE_12M					0x40
#define TX_RATE_18M					0x80
#define TX_RATE_24M					0x100
#define TX_RATE_36M					0x200
#define TX_RATE_48M					0x400
#define TX_RATE_54M					0x800

#define MAX_WLAN_AC_NUM					32
#ifdef WLAN_11R
#define MAX_VWLAN_FTKH_NUM			8
#define MAX_WLAN_FTKH_NUM			(8*(NUM_VWLAN_INTERFACE+1))
#endif

#define MAXFNAME					60

//#ifdef WLAN_WDS
#define MAX_WDS_NUM					8
//#endif

#define MAX_STA_NUM					64	// max support sta number

/* flag of sta info */
#define STA_INFO_FLAG_AUTH_OPEN     			0x01
#define STA_INFO_FLAG_AUTH_WEP      			0x02
#define STA_INFO_FLAG_ASOC          			0x04
#define STA_INFO_FLAG_ASLEEP        			0x08

//#ifdef WLAN_WEB_REDIRECT //jiunming,web_redirect
#define MAX_URL_LEN					128
//#endif
//#endif // of WLAN_SUPPORT

// Added by Mason Yu for URL Blocking
#if defined(URL_BLOCKING_SUPPORT)||defined(URL_ALLOWING_SUPPORT)
#define MAX_URL_LENGTH					128
#define MAX_KEYWD_LENGTH				20
#endif

#ifdef DOMAIN_BLOCKING_SUPPORT
#define MAX_DOMAIN_LENGTH				120     // The value( 8 * 14=112) must be not less than 50.(because the domainblk.asp limit the value as 50.
#define MAX_DOMAIN_GROUP				8
#define MAX_DOMAIN_SUB_STRING				15
#endif

#define ADD_RULE		0
#define DEL_RULE		1
#define ENCAP_VCMUX					0
#define ENCAP_LLC					1

#define BRIDGE_ETHERNET		0
#define BRIDGE_PPPOE		1
#define BRIDGE_DISABLE		2


// ADSL MODE
#define ADSL_MODE_T1413		0x0001
#define ADSL_MODE_GDMT		0x0002
#define ADSL_MODE_GLITE		0x0008
#define ADSL_MODE_ADSL2		0x0010
#define ADSL_MODE_ANXL		0x0020
#define ADSL_MODE_ADSL2P	0x0040
#define ADSL_MODE_ANXM		0x0080
#define ADSL_MODE_ANXB		0x0100
#ifdef ENABLE_ADSL_MODE_GINP
#define ADSL_MODE_GINP		0x0200
#endif
//#ifdef CONFIG_VDSL
#define ADSL_MODE_VDSL2		0x0400
//#endif /*CONFIG_VDSL*/
#define ADSL_MODE_ANXI		0x0800
#define ADSL_MODE_ANXJ		0x1000

//#ifdef CONFIG_VDSL
//VDSL2 Profile
#define VDSL2_PROFILE_8A	0x0001
#define VDSL2_PROFILE_8B	0x0002
#define VDSL2_PROFILE_8C	0x0004
#define VDSL2_PROFILE_8D	0x0008
#define VDSL2_PROFILE_12A	0x0010
#define VDSL2_PROFILE_12B	0x0020
#define VDSL2_PROFILE_17A	0x0040
#define VDSL2_PROFILE_30A	0x0080
//#endif /*CONFIG_VDSL*/


#define ATM_MAX_US_PCR		6000

#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
/*flag for CWMP_FLAG setting*/
#define CWMP_FLAG_DEBUG_MSG	0x01
#define CWMP_FLAG_CERT_AUTH	0x02
#define CWMP_FLAG_SENDGETRPC	0x04
#define CWMP_FLAG_SKIPMREBOOT	0x08
#define CWMP_FLAG_DELAY		0x10
#define CWMP_FLAG_AUTORUN	0x20
#define CWMP_FLAG_CTINFORMEXT	0x40
#define CWMP_FLAG_SELFREBOOT    0x80
/*flag for CWMP_FLAG2 setting*/
#define CWMP_FLAG2_DIS_CONREQ_AUTH		0x01  /*disable connection request authentication*/
#define CWMP_FLAG2_DEFAULT_WANIP_IN_INFORM	0x02  /*bring the default wan ip in the inform*/
#define CWMP_FLAG2_NULL_TO_SKIP_AUTH		0x04
#define CWMP_FLAG2_HAD_SENT_BOOTSTRAP		0x08
#define CWMP_FLAG2_USE_TR181				0x10
#define CWMP_FLAG2_HTTP_503				0x20
#define CWMP_FLAG2_CWMP_DISABLE			0x40


/*EC_xxxxx event must consist with those defined in cwmp_rpc.h*/
#define EC_X_CT_COM_ACCOUNT	0x10000	/*X_CT-COM_ACCOUNTCHANGE*/

#endif //_CWMP_MIB_

/*-- Macro declarations --*/
// resv | media | ppp | vc
#define PHY_INTF(x)				(x | 0xff00)/*physical interface*/
#ifdef CONFIG_RTL_MULTI_PVC_WAN
#define VC_MAJOR_INDEX(x)		((x >> 4) & 0x0f)
#define VC_MINOR_INDEX(x)		(x & 0x0f)
#endif
#define VC_INDEX(x)				(x & 0x0ff)
#define PTM_INDEX(x)				(x & 0x0ff)
#define ETH_INDEX(x)				(x & 0x0ff)
#define IPIP_INDEX(x)				(x & 0x0ff)					// Mason Yu. Add VPN ifIndex
#define PPTP_INDEX(x)				(x & 0x0ff)					// Mason Yu. Add VPN ifIndex
#define L2TP_INDEX(x)				(x & 0x0ff)					// Mason Yu. Add VPN ifIndex
#define PPP_INDEX(x)				((x  >> 8) & 0x0ff)
#define MEDIA_INDEX(x)				((x >> 16) & 0x0ff)
#define TO_IFINDEX(x,y,z)			((x<<16) | (y<<8) | z)
#define DUMMY_VC_INDEX				0xff
#define DUMMY_PPP_INDEX				0xff
#define DUMMY_IFINDEX				0xffff

#define NA_PPP			0xefff
#define NA_VC			0xffff
// Jenny, default gateway interface
#ifdef DEFAULT_GATEWAY_V2
#define DGW_NONE	0xffff
#ifdef AUTO_PPPOE_ROUTE
#define DGW_AUTO	0xefff
#endif
#endif

#define MP_PMAP_SHIFT		0
#define MP_IPQ_SHIFT		1
#define MP_IGMP_SHIFT		2
#define MP_MLD_SHIFT		3							// Mason Yu. MLD snooping
#define MP_PMAP_MASK		(0x01<<MP_PMAP_SHIFT)
#define MP_IPQ_MASK			(0x01<<MP_IPQ_SHIFT)
#define MP_IGMP_MASK		(0x01<<MP_IGMP_SHIFT)
#define MP_MLD_MASK			(0x01<<MP_MLD_SHIFT)		// Mason Yu. MLD snooping
// Added by Mason Yu for ADSL Tone
#define MAX_ADSL_TONE		64           // Added by Mason Yu for correct Tone Mib Type
#define MAX_GAMING		8

#ifdef CONFIG_USER_SAMBA
#ifdef CONFIG_USER_NMBD
#define MAX_SAMBA_NETBIOS_NAME_LEN		16
#endif
#define MAX_SAMBA_SERVER_STRING_LEN		32
#define MAX_SAMBA_LEN				32
#endif

//Added by davian_kuo.
#define MAX_LANGSET_LEN				10

// Mason Yu
#ifdef PORT_FORWARD_ADVANCE
typedef enum {PFW_VPN=0, PFW_GAME=1 } PFW_GATEGORY_T;
typedef enum {PFW_PPTP=0, PFW_L2TP=1 } PFW_RULE_T;
#endif
typedef enum { DHCP_DISABLED=0, DHCP_CLIENT=1, DHCP_SERVER=2, PPPOE=3 } DHCP_T;
typedef enum { DNS_AUTO=0, DNS_MANUAL } DNS_TYPE_T;
typedef enum { REQUEST_DNS_NONE=0, REQUEST_DNS=1 } REQUEST_DNS_TYPE_T;
typedef enum { HAVE_NONE=0, HAVED=1 } HAVE_T;
typedef enum { CONTINUOUS=0, CONNECT_ON_DEMAND, MANUAL } PPP_CONNECT_TYPE_T;
typedef enum { PPP_AUTH_AUTO=0, PPP_AUTH_PAP, PPP_AUTH_CHAP, PPP_AUTH_NONE } PPP_AUTH_T;
typedef enum { PROTO_NONE=0, PROTO_TCP=1, PROTO_UDP=2, PROTO_ICMP=3, PROTO_UDPTCP } PROTO_TYPE_T;
typedef enum { DIR_OUT=0, DIR_IN } DIR_T;
typedef enum { DHCP_LAN_NONE=0, DHCP_LAN_RELAY=1, DHCP_LAN_SERVER=2,  DHCP_LAN_SERVER_AUTO=3} DHCP_TYPE_T;
typedef enum { CHANNEL_MODE_BRIDGE=0, CHANNEL_MODE_IPOE, CHANNEL_MODE_PPPOE, CHANNEL_MODE_PPPOA, CHANNEL_MODE_RT1483, CHANNEL_MODE_RT1577, CHANNEL_MODE_DSLITE, CHANNEL_MODE_6RD=8 } CHANNEL_MODE_T;
typedef enum { ATMQOS_UBR=0, ATMQOS_CBR, ATMQOS_VBR_NRT, ATMQOS_VBR_RT } ATM_QOS_T;
typedef enum { MP_NONE=0, MP_PORT_MAP=1, MP_VLAN=2, MP_IPQOS=3, MP_IGMPSNOOP=4 } MP_TYPE_T;
typedef enum { LINK_10HALF=0, LINK_10FULL, LINK_100HALF, LINK_100FULL, LINK_AUTO } LINK_TYPE_T;
typedef enum { PRIO_IP, PRIO_802_1p } PRIO_DOMAIN_T;
#ifdef ACCOUNT_CONFIG
typedef enum { PRIV_USER=0, PRIV_ENG=1, PRIV_ROOT=2 } ACC_PRIV_T;
#endif
typedef enum { RMT_FTP=0, RMT_TFTP, RMT_TELNET, RMT_PING, RMT_SNMP, RMT_WEB, RMT_HTTPS, RMT_SSH } REMACC_TYPE_T;
typedef enum { MEDIA_ATM, MEDIA_ETH, MEDIA_IPIP, MEDIA_PPTP, MEDIA_L2TP, MEDIA_PTM, MEDIA_3G, MEDIA_WLAN } MEDIA_TYPE_T;
typedef enum { IPVER_IPV4 = 1, IPVER_IPV6, IPVER_IPV4_IPV6 } IP_PROTOCOL;
typedef enum { IPQOS_PORT_BASE=0, IPQOS_ETHERTYPE_BASE, IPQOS_IP_PROTO_BASE, IPQOS_MAC_BASE, IPQOS_DHCPOPT_BASE, IPQOS_8021P_BASE } IPQOS_TYPE_T;
typedef enum { IPQOS_DHCPOPT_60=0, IPQOS_DHCPOPT_61, IPQOS_DHCPOPT_125 } IPQOS_DHCPOPT_TYPE_T;
typedef enum { RADVD_MODE_AUTO = 0, RADVD_MODE_MANUAL } RADVD_MODE_T;
typedef enum { IPV6_WAN_NONE = 0, IPV6_WAN_AUTO = 1, IPV6_WAN_STATIC = 2, IPV6_WAN_DSLITE = 4, IPV6_WAN_6RD = 8, IPV6_WAN_DHCP = 16 } IPV6_WAN_MODE;
//typedef enum { RG_DEFAULT_ACL_WEIGHT ,RG_QOS_LOW_ACL_WEIGHT, RG_QOS_ACL_WEIGHT, RG_FIREWALL_ACL_WEIGHT } RG_ACL_WEIGHT_T; //the larger number, the higher priority. //move to chip_deps.h
typedef enum { QOS_DIRECTION_UPSTREAM , QOS_DIRECTION_DOWNSTREAM} QOS_DIRECTION_T;

//define manufacturer & oui & productclass
#define DEF_MANUFACTURER_STR		"REALTEK SEMICONDUCTOR CORP."
#define DEF_MANUFACTUREROUI_STR		"00E04C"
#define DEF_PRODUCTCLASS_STR		"IGD"

//#ifdef _PRMT_TR143_
typedef enum
{
	ITF_ALL=0,
	ITF_WAN,	//wan pppx or vcx
	ITF_LAN,	//br0

	ITF_ETH0,	//eth0
	ITF_ETH0_SW0,	//eth0_sw0
	ITF_ETH0_SW1,	//eth0_sw1
	ITF_ETH0_SW2,	//eth0_sw2
	ITF_ETH0_SW3,	//eth0_sw3

	ITF_WLAN0,	//wlan0
	ITF_WLAN0_VAP0,	//wlan0-vap0
	ITF_WLAN0_VAP1,	//wlan0-vap1
	ITF_WLAN0_VAP2,	//wlan0-vap2
	ITF_WLAN0_VAP3,	//wlan0-vap3

	ITF_WLAN1,	//wlan0
	ITF_WLAN1_VAP0,	//wlan0-vap0
	ITF_WLAN1_VAP1,	//wlan0-vap1
	ITF_WLAN1_VAP2,	//wlan0-vap2
	ITF_WLAN1_VAP3,	//wlan0-vap3

	ITF_USB0,	//usb0

	ITF_END		//last one
} ITF_T;
#define LANDEVNAME2BR0(a) do{ if(a && (strncmp(a, "eth0", 4)==0||strncmp(a, "wlan0", 5)==0||strncmp(a, "usb0", 4)==0)) strcpy(a, BRIF); }while(0)
//#endif //_PRMT_TR143_

// Mason Yu on True
#ifdef ADDRESS_MAPPING
typedef enum { ADSMAP_NONE=0, ADSMAP_ONE_TO_ONE=1, ADSMAP_MANY_TO_ONE=2, ADSMAP_MANY_TO_MANY=3, ADSMAP_ONE_TO_MANY=4 } ADSMAP_T;
typedef struct addressMap_ip {
	unsigned char lsip[16];
	unsigned char leip[16];
	unsigned char gsip[16];
	unsigned char geip[16];
	unsigned char srcRange[32];
	unsigned char globalRange[32];
} ADDRESSMAP_IP_T;
#endif

#ifdef WLAN_SUPPORT

#ifdef WLAN_WPA
typedef enum {
	WIFI_SEC_NONE = 0,
	WIFI_SEC_WEP = 1,
	WIFI_SEC_WPA = 2,
	WIFI_SEC_WPA2 = 4,
	WIFI_SEC_WPA2_MIXED = 6,
#ifdef CONFIG_RTL_WAPI_SUPPORT
	WIFI_SEC_WAPI = 8,
#endif
	WIFI_SEC_COUNT,
} WIFI_SECURITY_T;

typedef enum { SUPP_NONWPA_NONE=0,SUPP_NONWPA_WEP=1,SUPP_NONWPA_1X=2} SUPP_NONWAP_T;
typedef enum { WPA_AUTH_AUTO=1, WPA_AUTH_PSK=2 } WPA_AUTH_T;
typedef enum { WPA_CIPHER_TKIP=1, WPA_CIPHER_AES=2, WPA_CIPHER_MIXED=3 } WPA_CIPHER_T;   // Mason Yu. 201009_new_security
#endif
typedef enum { WDS_ENCRYPT_DISABLED=0, WDS_ENCRYPT_WEP64=1, WDS_ENCRYPT_WEP128=2, WDS_ENCRYPT_TKIP=3, WDS_ENCRYPT_AES=4} WDS_ENCRYPT_T;
typedef enum { WEP_DISABLED=0, WEP64=1, WEP128=2 } WEP_T;
typedef enum { KEY_ASCII=0, KEY_HEX } KEY_TYPE_T;
//modified by xl_yue
typedef enum { LONG_PREAMBLE=0, SHORT_PREAMBLE=1 } PREAMBLE_T;
typedef enum { AUTH_OPEN=0, AUTH_SHARED, AUTH_BOTH } AUTH_TYPE_T;
typedef enum { RF_INTERSIL=1, RF_RFMD=2, RF_PHILIP=3, RF_MAXIM=4, RF_GCT=5, RF_MAXIM_AG=6, RF_ZEBRA=7 } RF_TYPE_T;
typedef enum { AP_MODE=0, CLIENT_MODE=1, WDS_MODE=2, AP_WDS_MODE=3 } WLAN_MODE_T;
typedef enum { INFRASTRUCTURE=0, ADHOC=1 } NETWORK_TYPE_T;
typedef enum { BAND_11B=1, BAND_11G=2, BAND_11BG=3, BAND_11A=4, BAND_11N=8, BAND_5G_11AN=12,
	BAND_5G_11AC=64,BAND_5G_11AAC=68,BAND_5G_11NAC=72,BAND_5G_11ANAC=76} BAND_TYPE_T;
typedef enum { PHYBAND_OFF=0, PHYBAND_2G=1, PHYBAND_5G=2 } PHYBAND_TYPE_T;
typedef enum { SMACSPHY=0, DMACSPHY=1, DMACDPHY=2 } MACPHYMODE_TYPE_T;
typedef enum { BANDMODEBOTH=0, BANDMODESINGLE=1 } WLANBAND2G5GMODE_TYPE_T;
typedef enum { BANDMODE5G=0, BANDMODE2G=1 } WLANBAND2G5G_SINGLEMODE_TYPE_T;

/* WLAN sta info structure */
//tylo, should sync. with the struct in wlan driver
typedef struct wlan_sta_info {
        unsigned short  aid;
        unsigned char   addr[6];
        unsigned long   tx_packets;
        unsigned long   rx_packets;
	unsigned long	expired_time;  // 10 mini-sec
	unsigned short  flag;
        unsigned char   txOperaRates;
        unsigned char	rssi;
        unsigned long	link_time;		// 1 sec unit
        unsigned long	tx_fail;
        unsigned long	tx_bytes;
        unsigned long	rx_bytes;
        unsigned char network;
        unsigned char ht_info;	// bit0: 0=20M mode, 1=40M mode; bit1: 0=longGI, 1=shortGI; bit2: 80M mode; bit3: 160M mode
        unsigned char	RxOperaRate;
        unsigned char	resv[3];
        unsigned short	acTxOperaRate;

} WLAN_STA_INFO_T, *WLAN_STA_INFO_Tp;

typedef struct wlan_rate{
unsigned int id;
unsigned char rate[20];
}WLAN_RATE_T, *WLAN_RATE_Tp;
typedef enum {
	MCS0=0x80,
	MCS1=0x81,
	MCS2=0x82,
	MCS3=0x83,
	MCS4=0x84,
	MCS5=0x85,
	MCS6=0x86,
	MCS7=0x87,
	MCS8=0x88,
	MCS9=0x89,
	MCS10=0x8a,
	MCS11=0x8b,
	MCS12=0x8c,
	MCS13=0x8d,
	MCS14=0x8e,
	MCS15=0x8f
	} RATE_11N_T;
#ifdef WLAN_WDS
typedef struct wds_type {
	unsigned char macAddr[6];
	unsigned int fixedTxRate;
	unsigned char comment[COMMENT_LEN];
} __PACK__ WDS_T, *WDS_Tp;

#endif


#endif // of WLAN_SUPPORT
/*
 * MIB struct
 */
typedef struct config_setting {
	unsigned int wanmode; // Magician: ADSL/ETH Wan switch
	//unsigned char version;	// config_setting version
	// TCP/IP stuffs
	unsigned char ipAddr[IP_ADDR_LEN];
#ifdef CONFIG_LUNA_DUAL_LINUX
	unsigned char slaveipAddr[IP_ADDR_LEN];
	unsigned char masteripAddr[IP_ADDR_LEN];
#endif
	unsigned char subnetMask[IP_ADDR_LEN];
	unsigned char enable_ip2; // 0 - disabled, 1 - enabled
	unsigned char ipAddr2[IP_ADDR_LEN];
	unsigned char subnetMask2[IP_ADDR_LEN];
	unsigned char defaultGateway[IP_ADDR_LEN];
#ifdef DEFAULT_GATEWAY_V2
	unsigned int dgwItf; // Jenny, default gateway interface index
#endif
#ifdef CONFIG_USER_DHCP_SERVER
	unsigned char dhcp; // DHCP flag, 0 - disabled, 1 - client, 2 - server
	unsigned char dhcp_pooluse; // DHCP server pool uses on 0 - Primary LAN, 1 - Secondary LAN
	unsigned char dhcps_dns_opt; // 0: use dnsRelay; 1: use manual setting
	unsigned char dhcps_dns1[IP_ADDR_LEN];
	unsigned char dhcps_dns2[IP_ADDR_LEN];
	unsigned char dhcps_dns3[IP_ADDR_LEN];
#endif
	unsigned char rip; // RIP flag, 0 - disabled, 1 - enabled
#ifdef CONFIG_USER_DHCP_SERVER
	unsigned char dhcpClientStart; // DHCP client start range
	unsigned char dhcpClientEnd; // DHCP client end range
	unsigned char ipDhcpStart[IP_ADDR_LEN];
	unsigned char ipDhcpEnd[IP_ADDR_LEN];
	unsigned int dhcpLTime; // DHCP server max lease time in seconds
	unsigned char dhcpDomain[MAX_NAME_LEN]; // DHCP option Domain Name
#endif
	unsigned char lanAutoSearch;		// the LAN ip auto-search

	// web server account
	unsigned char userName[MAX_NAME_LEN]; // user name
	unsigned char userPassword[MAX_NAME_LEN]; // user assword
	unsigned char deviceType; // bridge: 0 or router: 1
	unsigned char initLine; // init adsl line on startup
	unsigned char initScript; // init system with user configuration on startup

	unsigned char wanDhcp; // DHCP flag for WAN port, 0 - disabled, 1 - DHCP client
	unsigned char wanIpAddr[IP_ADDR_LEN];
	unsigned char wanSubnetMask[IP_ADDR_LEN];
	unsigned char wanDefaultGateway[IP_ADDR_LEN];
	unsigned char pppUserName[MAX_NAME_LEN];
	unsigned char pppPassword[MAX_NAME_LEN];
	unsigned char dnsMode;
	unsigned char dns1[IP_ADDR_LEN], dns2[IP_ADDR_LEN], dns3[IP_ADDR_LEN];
#ifdef CONFIG_USER_DHCP_SERVER
	unsigned char dhcps[IP_ADDR_LEN];
	unsigned char dhcpMode; // 0 - None, 1 - DHCP Relay, 2 - DHCP Server
#endif
	unsigned short pppIdleTime;
	unsigned char pppConnectType;

	unsigned char adslConnectionMode;
	unsigned char adslEncapMode;
	unsigned short adslMode;	// 1: ANSI T1.413, 2: G.dmt, 3: multi-mode, 4: ADSL2, 8: AnnexL, 16: ADSL2+
#ifdef CONFIG_VDSL
	unsigned short vdsl2Profile; //refer to VDSL2_PROFILE_xxx
#endif /*CONFIG_VDSL*/
	unsigned char adslOlr;	// adsl capability, 0: disable 1: bitswap 3: SRA & bitswap
	unsigned char ripEnabled;
	unsigned char ripVer;	// rip version. 0: v1, 1: v2, 2: v1 compatibility
#ifdef CONFIG_USER_ZEBRA_OSPFD_OSPFD
	unsigned char ospfEnabled;	//ql_xu-- enable ospf
#endif

	unsigned char atmLoopback;
	unsigned char atmMode;
	unsigned char atmVcSwitch;
	unsigned char atmMac1[MAC_ADDR_LEN];
	unsigned char atmMac2[MAC_ADDR_LEN];
	unsigned char atmVcAutoSearch;		// the very first pvc auto-search

#ifdef IP_PORT_FILTER
	unsigned char ipfOutAction; // 0 - Deny, 1 - Allow
	unsigned char ipfInAction; // 0 - Deny, 1 - Allow
#endif
#ifdef MAC_FILTER
	unsigned char macfOutAction; // 0 - Deny, 1 - Allow
	unsigned char macfInAction; // 0 - Deny, 1 - Allow
#endif
#if defined(PORT_FORWARD_GENERAL) || defined(PORT_FORWARD_ADVANCE)
	unsigned char portFwEnabled;
#endif
#ifdef NATIP_FORWARDING
	unsigned char ipFwEnabled;
#endif
#ifdef DMZ
	unsigned char dmzEnabled;
	unsigned char dmzHost[IP_ADDR_LEN]; // DMZ host
#endif
#if defined(CONFIG_USER_SNMPD_SNMPD_V2CTRAP) || defined(_CWMP_MIB_)
	unsigned char snmpSysDescr[SNMP_STRING_LEN];
#endif //defined(CONFIG_USER_SNMPD_SNMPD_V2CTRAP) || defined(_CWMP_MIB_)
#ifdef CONFIG_USER_SNMPD_SNMPD_V2CTRAP
	unsigned char snmpSysContact[SNMP_STRING_LEN];
	unsigned char snmpSysLocation[SNMP_STRING_LEN];
	unsigned char snmpSysObjectID[SNMP_STRING_LEN];
	unsigned char snmpCommunityRO[SNMP_STRING_LEN];
	unsigned char snmpCommunityRW[SNMP_STRING_LEN];
	//unsigned char snmpTrapIpAddr[MAC_ADDR_LEN]; // MAC address of LAN port in used
	unsigned char snmpTrapIpAddr[IP_ADDR_LEN]; // MAC address of LAN port in used
#endif
	unsigned char snmpSysName[SNMP_STRING_LEN];

	// Kao
	unsigned short brctlAgeingTime;
	unsigned char brctlStp; // Spanning tree protocol flag, 0 - disabled, 1 - enabled
	unsigned char mpMode; // multi-port admin status: port-mapping, vlan or ipqos
#ifdef IP_QOS
	unsigned int qosDefaultQueue;	//defualt queue (instance number)
	unsigned char qosDomain;	// default qos doamin: ip procedence bits or 802.1p
#ifdef QOS_DIFFSERV
	unsigned char qosDiffServ;
	unsigned char phbClass;	// PHB class - 1:AF1; 2:AF2; 3:AF3; 4:AF4; 5:EF
#endif
#endif
	/*ql:20081114 START: new IP QoS*/
//#ifdef NEW_IP_QOS_SUPPORT
#ifdef CONFIG_USER_IP_QOS
	unsigned int qosUprate;
	unsigned char  qosPolicy;// 1-gred; 0-other
	unsigned int TotalBandWidth;
	unsigned char TotalBandWidthEn; //ql- enable total bandwidth limit
	unsigned char qosmode;// 1:qos priority  2:tc shaping
#endif
	/*ql:20081114 END*/
#ifdef CONFIG_USER_IGMPPROXY
	unsigned char igmpProxy; // IGMP proxy flag, 0 - disabled, 1 - enabled
	unsigned int igmpProxyItf; // IGMP proxy interface index
#endif
#ifdef CONFIG_USER_PPTP_CLIENT_PPTP
	unsigned int pptpenable;
#endif //end of CONFIG_USER_PPTP_CLIENT_PPTP
#ifdef CONFIG_USER_L2TPD_L2TPD
	unsigned int l2tpenable;
#endif //endof CONFIG_USER_L2TPD_L2TPD
#ifdef CONFIG_NET_IPIP
	unsigned int ipipenable;
#endif//end of CONFIG_NET_IPIP
#ifdef IP_PASSTHROUGH
	unsigned int ipptItf; // IP passthrough interface index
	unsigned int ipptLTime; // IP passthrough max lease time in seconds
	unsigned char ipptLanacc;	// enable LAN access
#endif
	unsigned char spcEnable;	// enable single PC mode
	unsigned char spcIPType;	// private IP or IP passthrough
#ifdef IP_ACL
	unsigned char aclcapability;   // ACL capability flag, 0 - disabled, 1 - enabled. Mason Yu
#endif
#ifdef NAT_CONN_LIMIT
	unsigned char connlimit;	//nat session number limit, 0 - disabled, 1 - enabled. ql_xu
#endif
#if defined(URL_BLOCKING_SUPPORT) || defined(URL_ALLOWING_SUPPORT)
	unsigned char urlcapability;   // URL capability flag, 0 - disabled, 1 - enabled. Mason Yu ; 2 for url allow
#endif
#if defined(CONFIG_APOLLO_MP_TEST)
	unsigned char mpFinished;	//for MP test
#endif
	unsigned char lang_set[MAX_LANGSET_LEN];	// For multi-lingual, added by davian_kuo.
	unsigned char tftpServerAddr[254]; // udhcpd OPTION_STRING. Iulian Wu
	unsigned char posixTzString[254];
	unsigned char bootFileName[254];
#ifdef TIME_ZONE
	unsigned char ntpEnabled; // ntp client enabled
	unsigned int ntpTimeZoneDBIndex; // ntp Index of Time Zone Database
	unsigned char dstEnabled; // Daylight Saving Time enabled
	unsigned char ntpServerId; // ntp Server Index
	unsigned char ntpServerHost1[MAX_NAME_LEN]; // ntp server host address
	unsigned char ntpServerHost2[MAX_NAME_LEN]; // ntp server host address
#endif
	unsigned char upnp; 		// UPNP flag, 0 - disabled, 1 - enabled
	unsigned int upnpExtItf;   	// UPNP Binded WAN interface index
	//unsigned char upnpNat;	// UPNP NAT Traversal, 0 - disabled, 1-enabled
#ifdef DOMAIN_BLOCKING_SUPPORT
	unsigned char domainblkcap;    // Domain capability flag, 0 - disabled, 1 - enabled. Mason Yu
#endif
#ifdef CONFIG_IGMP_FORBID
         unsigned char igmpforbidEnable;//igmp forbid capability flag,0 -disabled, 1 -enabled.alex_huang
#endif
#ifdef CONFIG_USER_MINIDLNA		// Mason Yu. use table not chain
	unsigned int dmsenable;
#endif//end of CONFIG_USER_MINIDLNA

#ifdef CONFIG_USER_IP_QOS_3
	unsigned char qosEnableQos; // QoS Enable
#endif

#ifdef CONFIG_USER_FON
	unsigned char fon_onoffline;
#endif

#ifdef WLAN_SUPPORT
	// WLAN stuffs
	unsigned char ssid[MAX_SSID_LEN]; // SSID
	unsigned char auto_channel; // auto channel 0 - disabled, 1 - enabled
	unsigned char channel;// current channel
//	unsigned char elanMacAddr[6]; // Ethernet Lan MAC address
	unsigned char wlanMacAddr[6]; // WLAN MAC address
	unsigned char wep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep64Key1[WEP64_KEY_LEN];
	unsigned char wep64Key2[WEP64_KEY_LEN];
	unsigned char wep64Key3[WEP64_KEY_LEN];
	unsigned char wep64Key4[WEP64_KEY_LEN];
	unsigned char wep128Key1[WEP128_KEY_LEN];
	unsigned char wep128Key2[WEP128_KEY_LEN];
	unsigned char wep128Key3[WEP128_KEY_LEN];
	unsigned char wep128Key4[WEP128_KEY_LEN];
	unsigned char wepDefaultKey;
	unsigned char wepKeyType;
	unsigned short fragThreshold;
	unsigned short rtsThreshold;
	unsigned short supportedRates;
	unsigned short basicRates;
	unsigned short beaconInterval;
	unsigned char preambleType; // preamble type, 0 - long preamble, 1 - short preamble
	unsigned char authType; // authentication type, 0 - open-system, 1 - shared-key, 2 - both
#ifdef WLAN_ACL
	unsigned char acEnabled; // enable/disable WLAN access control
#endif

	unsigned char hiddenSSID;
	unsigned char wlanDisabled; // enabled/disabled wlan interface
	unsigned char txPower; // TxPower 15/30/60 mW. Mason Yu
	unsigned long inactivityTime; // wlan client inactivity time
	unsigned char rateAdaptiveEnabled; // enable/disable rate adaptive
	unsigned char dtimPeriod; // DTIM period
	unsigned char wlanMode; // wireless mode - AP, Ethernet bridge
	unsigned char networkType; // adhoc or Infrastructure

#ifdef WLAN_WPA
	unsigned char encrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char enableSuppNonWpa; // enable/disable nonWPA client support
	unsigned char suppNonWpa; // which kind of non-wpa client is supported (wep/1x)
	unsigned char wpaAuth; // WPA authentication type (auto or psk)
	unsigned char wpaCipher; // WPA unicast cipher suite
	unsigned char wpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned long wpaGroupRekeyTime; // group key rekey time in second
	unsigned char rsIpAddr[4]; // radius server IP address
	unsigned short rsPort; // radius server port number
	unsigned char rsPassword[MAX_PSK_LEN+1]; // radius server password
	unsigned char enable1X; // enable/disable 802.1x
	unsigned char wpaPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char accountRsEnabled; // enable/disable accounting server
	unsigned char accountRsIpAddr[4]; // accounting radius server IP address
	unsigned short accountRsPort; // accounting radius server port number
	unsigned char accountRsPassword[MAX_RS_PASS_LEN]; // accounting radius server password
	unsigned char accountRsUpdateEnabled; // enable/disable accounting server update
	unsigned short accountRsUpdateDelay; // account server update delay time in sec
	unsigned char macAuthEnabled; // mac authentication enabled/disabled
	unsigned char rsMaxRetry; // radius server max try
	unsigned short rsIntervalTime; // radius server timeout
	unsigned char accountRsMaxRetry; // accounting radius server max try
	unsigned short accountRsIntervalTime; // accounting radius server timeout
	unsigned char wpa2Cipher; // wpa2 Unicast cipher
#ifdef WLAN_11W
	unsigned char dotIEEE80211W;
	unsigned char sha256;
#endif
#endif

#ifdef WLAN_WDS
	unsigned char wdsEnabled; // wds enable/disable
	unsigned char wdsNum; // number of wds entry existed
	WDS_T wdsArray[MAX_WDS_NUM]; // wds array
	unsigned char wdsWep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wdsEncrypt;
	unsigned char wdsWepFormat;
	unsigned char wdsWepKey[WEP128_KEY_LEN*2 + 1];
	unsigned char wdsPskFormat;
	unsigned char wdsPsk[MAX_PSK_LEN+1];
#if 0//krammer
	unsigned char wdsWep64Key1[WEP64_KEY_LEN];
	unsigned char wdsWep64Key2[WEP64_KEY_LEN];
	unsigned char wdsWep64Key3[WEP64_KEY_LEN];
	unsigned char wdsWep64Key4[WEP64_KEY_LEN];
	unsigned char wdsWep128Key1[WEP128_KEY_LEN];
	unsigned char wdsWep128Key2[WEP128_KEY_LEN];
	unsigned char wdsWep128Key3[WEP128_KEY_LEN];
	unsigned char wdsWep128Key4[WEP128_KEY_LEN];
#endif
	unsigned char wdsWepDefaultKey;
	unsigned char wdsWepKeyType;
#endif

	unsigned char wlanPrivacyChk; // enable/disable wlan privacy check
	unsigned char blockRelay; // block/un-block the relay between wireless client
	unsigned char BlockEth2Wir; // block/un-block ethernet to wireless
	unsigned char maccloneEnabled; // enable NAT2.5 MAC Clone
	unsigned char itfGroup;		// wlan0 interface group
#ifdef WLAN_MBSSID
	unsigned char BlockMbssid; // block/un-block between MBSSID
#endif

	unsigned char wlanProtectionDisabled;
	unsigned char wlanAggregation;
	unsigned char wlanShortGIEnabled;
	unsigned char wlanContrlBand;
	unsigned char wlanChannelWidth;
	unsigned char wlan11nCoexist;

#ifdef CONFIG_RTL_WAPI_SUPPORT
	unsigned char wapiPsk[MAX_PSK_LEN+1]; //password
	unsigned char wapiPskLen; //password
	unsigned char wapiAuth;//0:AS 1:pre-shared key
	unsigned char wapiPskFormat; // WAPI unicast cipher suite
	unsigned char wapiAsIpAddr[4]; // as server IP address
	unsigned char wapiMcastkey; //0:time 1 packets
	unsigned long wapiMcastRekeyTime; // 300 -31536000
	unsigned long wapiMcastRekeyPackets; //1048576
	unsigned char wapiUcastkey; //0:time 1 packets
	unsigned long wapiUcastRekeyTime; // 300 -31536000
	unsigned long wapiUcastRekeyPackets; //1048576//internal use
	unsigned char wapiSearchCertInfo[32]; //search info
	unsigned char wapiSearchIndex; // search type index
	unsigned char wapiCAInit; //init CA
#endif

#ifdef WLAN_WEB_REDIRECT //jiunming,web_redirect
	unsigned char WlanWebRedirURL[MAX_URL_LEN];     //url
#endif
	unsigned char wlanBand; // wlan band, bit0-11B, bit1-11G, bit2-11A
	unsigned int fixedTxRate; // fixed wlan tx rate, used when rate adaptive is disabled

#ifdef CONFIG_USB_RTL8187SU_SOFTAP
	unsigned short mlcstRate;	//cathy, for multicast rate setting, 0:auto, bit 0-11 setting is same as fixedTxRate
#endif
#ifdef WLAN_QoS
	unsigned char wlanqos;	//wlan QoS(WMM) switch
#endif
	unsigned char wlanDIG;	//wlan DIG (Dynamic Initial Gain) enable flag
	unsigned char wlanBcnAdvtisement; //wlan Beacon Advertisement
	unsigned char wifitest; //wlan test
	unsigned char wifiregdemo; // wifi regdomain demo
#ifdef WLAN_UNIVERSAL_REPEATER
	// for wlan0 interface
	unsigned char repeaterEnabled1; // universal repeater enable/disable
	unsigned char repeaterSSID1[MAX_SSID_LEN];  // ssid on virtual interface

	// for wlan1 interface
	unsigned char repeaterEnabled2; // universal repeater enable/disable
	unsigned char repeaterSSID2[MAX_SSID_LEN];  // ssid on virtual interface
#endif

#if defined(CONFIG_RTL_92D_SUPPORT)
	unsigned char wlanBand2G5GSelect_single; //0:5G, 1:2G
	unsigned char wlanBand2G5GSelect;	//0:2G+5G, 1:SINGLE
#endif
	unsigned char phyBandSelect;	//wlan0: 0:off, 1:2G, 2:5G
#if defined(CONFIG_RTL_92D_SUPPORT)
	unsigned char macPhyMode;	//0:SMACSPHY, 1:DMACSPHY, 2:DMACDPHY
#endif
#if defined(CONFIG_RTL_92D_SUPPORT) || defined(WLAN_DUALBAND_CONCURRENT)
	unsigned char wlan1_phyBandSelect;	//wlan1: 0:off, 1:2G, 2:5G
#if defined(CONFIG_RTL_92D_SUPPORT)
	unsigned char wlan1_macPhyMode;	//0:SMACSPHY, 1:DMACSPHY, 2:DMACDPHY
#endif

	unsigned char wlan1_ssid[MAX_SSID_LEN]; // SSID
	unsigned char wlan1_auto_channel;// auto channel, 0 - disabled, 1 - enabled
	unsigned char wlan1_channel;// current channel
	unsigned char wlan1_wep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wlan1_wep64Key1[WEP64_KEY_LEN];
	unsigned char wlan1_wep64Key2[WEP64_KEY_LEN];
	unsigned char wlan1_wep64Key3[WEP64_KEY_LEN];
	unsigned char wlan1_wep64Key4[WEP64_KEY_LEN];
	unsigned char wlan1_wep128Key1[WEP128_KEY_LEN];
	unsigned char wlan1_wep128Key2[WEP128_KEY_LEN];
	unsigned char wlan1_wep128Key3[WEP128_KEY_LEN];
	unsigned char wlan1_wep128Key4[WEP128_KEY_LEN];
	unsigned char wlan1_wepDefaultKey;
	unsigned char wlan1_wepKeyType;
	unsigned short wlan1_fragThreshold;
	unsigned short wlan1_rtsThreshold;
	unsigned short wlan1_supportedRates;
	unsigned short wlan1_basicRates;
	unsigned short wlan1_beaconInterval;
	unsigned char wlan1_preambleType; // preamble type, 0 - long preamble, 1 - short preamble
	unsigned char wlan1_authType; // authentication type, 0 - open-system, 1 - shared-key, 2 - both
#ifdef WLAN_ACL
	unsigned char wlan1_acEnabled; // enable/disable WLAN access control
#endif
	unsigned char wlan1_hiddenSSID;
	unsigned char wlan1_wlanDisabled; // enabled/disabled wlan interface
	unsigned char wlan1_txPower; // TxPower 15/30/60 mW. Mason Yu
	unsigned long wlan1_inactivityTime; // wlan client inactivity time
	unsigned char wlan1_rateAdaptiveEnabled; // enable/disable rate adaptive
	unsigned char wlan1_dtimPeriod; // DTIM period
	unsigned char wlan1_wlanMode; // wireless mode - AP, Ethernet bridge
	unsigned char wlan1_networkType; // adhoc or Infrastructure

#ifdef WLAN_WPA
	unsigned char wlan1_encrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char wlan1_enableSuppNonWpa; // enable/disable nonWPA client support
	unsigned char wlan1_suppNonWpa; // which kind of non-wpa client is supported (wep/1x)
	unsigned char wlan1_wpaAuth; // WPA authentication type (auto or psk)
	unsigned char wlan1_wpaCipher; // WPA unicast cipher suite
	unsigned char wlan1_wpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned long wlan1_wpaGroupRekeyTime; // group key rekey time in second
	unsigned char wlan1_macAuthEnabled; // mac authentication enabled/disabled
#ifdef WLAN_1x
	unsigned char wlan1_rsIpAddr[4]; // radius server IP address
	unsigned short wlan1_rsPort; // radius server port number
	unsigned char wlan1_rsPassword[MAX_PSK_LEN+1]; // radius server password
	unsigned char wlan1_enable1X; // enable/disable 802.1x
	unsigned char wlan1_accountRsEnabled; // enable/disable accounting server
	unsigned char wlan1_accountRsIpAddr[4]; // accounting radius server IP address
	unsigned short wlan1_accountRsPort; // accounting radius server port number
	unsigned char wlan1_accountRsPassword[MAX_RS_PASS_LEN]; // accounting radius server password
	unsigned char wlan1_accountRsUpdateEnabled; // enable/disable accounting server update
	unsigned short wlan1_accountRsUpdateDelay; // account server update delay time in sec
	unsigned char wlan1_rsMaxRetry; // radius server max try
	unsigned short wlan1_rsIntervalTime; // radius server timeout
	unsigned char wlan1_accountRsMaxRetry; // accounting radius server max try
	unsigned short wlan1_accountRsIntervalTime; // accounting radius server timeout
#endif
	unsigned char wlan1_wpaPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char wlan1_wpa2Cipher; // wpa2 Unicast cipher
#ifdef WLAN_11W
	unsigned char wlan1_dotIEEE80211W;
	unsigned char wlan1_sha256;
#endif
#endif
#ifdef WLAN_WDS
	unsigned char wlan1_wdsEnabled; // wds enable/disable
	unsigned char wlan1_wdsNum; // number of wds entry existed
	WDS_T wlan1_wdsArray[MAX_WDS_NUM]; // wds array
	unsigned char wlan1_wdsWep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wlan1_wdsEncrypt;
	unsigned char wlan1_wdsWepFormat;
	unsigned char wlan1_wdsWepKey[WEP128_KEY_LEN*2 + 1];
	unsigned char wlan1_wdsPskFormat;
	unsigned char wlan1_wdsPsk[MAX_PSK_LEN+1];
	#if 0
	unsigned char wlan1_wdsWep64Key1[WEP64_KEY_LEN];
	unsigned char wlan1_wdsWep64Key2[WEP64_KEY_LEN];
	unsigned char wlan1_wdsWep64Key3[WEP64_KEY_LEN];
	unsigned char wlan1_wdsWep64Key4[WEP64_KEY_LEN];
	unsigned char wlan1_wdsWep128Key1[WEP128_KEY_LEN];
	unsigned char wlan1_wdsWep128Key2[WEP128_KEY_LEN];
	unsigned char wlan1_wdsWep128Key3[WEP128_KEY_LEN];
	unsigned char wlan1_wdsWep128Key4[WEP128_KEY_LEN];
	unsigned char wlan1_wdsWepDefaultKey;
	unsigned char wlan1_wdsWepKeyType;
	#endif
#endif
	unsigned char wlan1_blockRelay; // block/un-block the relay between wireless client
	unsigned char wlan1_BlockEth2Wir; // block/un-block ethernet to wireless
	unsigned char wlan1_itfGroup;		// wlan0 interface group
#ifdef WLAN_MBSSID
	unsigned char wlan1_BlockMbssid; // block/un-block between MBSSID
#endif
	unsigned char wlan1_wlanProtectionDisabled;
	unsigned char wlan1_wlanAggregation;
	unsigned char wlan1_wlanShortGIEnabled;
	unsigned char wlan1_wlanContrlBand;
	unsigned char wlan1_wlanChannelWidth;
	unsigned char wlan1_wlan11nCoexist;

#ifdef CONFIG_RTL_WAPI_SUPPORT
	unsigned char wlan1_wapiPsk[MAX_PSK_LEN+1]; //password
	unsigned char wlan1_wapiPskLen; //password
	unsigned char wlan1_wapiAuth;//0:AS 1:pre-shared key
	unsigned char wlan1_wapiPskFormat; // WAPI unicast cipher suite
	unsigned char wlan1_wapiAsIpAddr[4]; // as server IP address
	unsigned char wlan1_wapiMcastkey; //0:time 1 packets
	unsigned long wlan1_wapiMcastRekeyTime; // 300 -31536000
	unsigned long wlan1_wapiMcastRekeyPackets; //1048576
	unsigned char wlan1_wapiUcastkey; //0:time 1 packets
	unsigned long wlan1_wapiUcastRekeyTime; // 300 -31536000
	unsigned long wlan1_wapiUcastRekeyPackets; //1048576//internal use
	unsigned char wlan1_wapiSearchCertInfo[32]; //search info
	unsigned char wlan1_wapiSearchIndex; // search type index
	unsigned char wlan1_wapiCAInit; //init CA
#endif

#ifdef WLAN_WEB_REDIRECT //jiunming,web_redirect
	unsigned char wlan1_WlanWebRedirURL[MAX_URL_LEN];     //url
#endif
	unsigned char wlan1_wlanBand; // wlan band, bit0-11B, bit1-11G, bit2-11A
	unsigned int wlan1_fixedTxRate;
#ifdef WLAN_QoS
	unsigned char wlan1_wlanqos;	//wlan QoS(WMM) switch
#endif
	unsigned char wlan1_wlanDIG;	//wlan DIG (Dynamic Initial Gain) enable flag
	unsigned char wlan1_wlanBcnAdvtisement; //wlan Beacon Advertisement
	unsigned char	wlan1_wlan_mac_ctrl;
	#ifdef CONFIG_WIFI_SIMPLE_CONFIG// WPS def WIFI_SIMPLE_CONFIG
	#define PIN_LEN                                 8
	unsigned char wlan1_wscDisable;
	unsigned char wlan1_wscMethod;
	unsigned char wlan1_wscAuth;
	unsigned char wlan1_wscEnc;
	unsigned char wlan1_wscManualEnabled;
	unsigned char wlan1_wscUpnpEnabled;
	unsigned char wlan1_wscRegistrarEnabled;
	unsigned char wlan1_wscSsid[MAX_SSID_LEN];
	unsigned char wlan1_wscPsk[MAX_PSK_LEN+1];
	unsigned char wlan1_wscConfigByExtReg;
	#endif
#ifdef WLAN_MBSSID
	unsigned char wlan1_itfGroupVap0;		// wlan0-vap0 interface group
	unsigned char wlan1_itfGroupVap1;		// wlan0-vap1 interface group
	unsigned char wlan1_itfGroupVap2;		// wlan0-vap2 interface group
	unsigned char wlan1_itfGroupVap3;		// wlan0-vap3 interface group
#endif

#ifdef WLAN_QoS
	unsigned char wlan1_wlanqos_apsd;	//wlan QoS_APSD(WMM) switch
#endif
#endif //CONFIG_RTL_92D_SUPPORT || WLAN_DUALBAND_CONCURRENT

#endif	// of WLAN_SUPPORT
	// Jenny, system log
	unsigned char syslogslevel;	// system log log level
	unsigned char syslogdlevel;	// system log display level
#ifdef CONFIG_USER_RTK_SYSLOG_REMOTE
	unsigned char syslogmode;	// system log mode
	unsigned char syslogServerIpAddr[IP_ADDR_LEN];     // remote syslog server IP address
	unsigned short syslogServerPort; // remote syslog server port number
#endif
	// Added by Mason Yu for write superUser into Current Setting
	unsigned char suserName[MAX_NAME_LEN];     // user name
	unsigned char suserPassword[MAX_NAME_LEN]; // user assword
	unsigned char adslTone[MAX_ADSL_TONE];      // ADSL Tone

	unsigned char DirectBridgeMode; // ioctl for direct bridge mode, jiunming
	unsigned char adslHighInp; // adsl high INP flag

	unsigned char pppoeACMacAddr[MAC_ADDR_LEN];	// Jenny, PPPoE AC MAC address
	unsigned short pppoeSession;	// Jenny,identifier for PPPoE session

#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
	unsigned char	cwmp_ProvisioningCode[64];
	unsigned char	cwmp_ACSURL[256+1];
	unsigned char	cwmp_ACSURL_OLD[256+1];
	unsigned char	cwmp_ACSUserName[256+1];
	unsigned char	cwmp_ACSPassword[256+1];
	unsigned char	cwmp_InformEnable;
	unsigned int	cwmp_InformInterval;
	unsigned int	cwmp_InformTime;
	unsigned char	cwmp_ConnReqUserName[256+1];
	unsigned char	cwmp_ConnReqPassword[256+1];
	unsigned char	cwmp_UpgradesManaged;
	unsigned char	cwmp_LANConfPassword[64];
	unsigned char	cwmp_SerialNumber[64];
	unsigned char	cwmp_DHCP_ServerConf;
	unsigned char	cwmp_LAN_IPIFEnable;
	unsigned char	cwmp_LAN_EthIFEnable;
	unsigned char	cwmp_WLAN_BasicEncry; /*0:none, 1:Wep*/
	unsigned char	cwmp_WLAN_WPAEncry; /*0:tkip, 1:aes, 2:tkip&aes*/
	unsigned char	cwmp_DL_CommandKey[32+1];
#ifdef CONFIG_CWMP_TRANSFER_QUEUE
	int			cwmp_DL_QueueIdx;
#endif
	unsigned int	cwmp_DL_StartTime;
	unsigned int	cwmp_DL_CompleteTime;
	unsigned int	cwmp_DL_FaultCode;
	unsigned int	cwmp_Inform_EventCode;
	unsigned char	cwmp_RB_CommandKey[32+1];
	unsigned char	cwmp_ACS_ParameterKey[32+1];
	unsigned char   cwmp_CERT_Password[64+1];
	unsigned char	cwmp_Flag;
/*star:20091228 START add for store parameterkey*/
	unsigned char cwmp_Parameterkey[32+1];
/*star:20091228 END*/
	unsigned char	cwmp_SI_CommandKey[32+1];
#ifdef _PRMT_USERINTERFACE_
	unsigned char	 UIF_PW_Required;
	unsigned char	 UIF_PW_User_Sel;
	unsigned char	 UIF_Upgrade;
	unsigned int	 UIF_WarrantyDate;
	unsigned char	 UIF_AutoUpdateServer[256];
	unsigned char	 UIF_UserUpdateServer[256];
#endif //_PRMT_USERINTERFACE_
#ifdef  _PRMT_X_CT_COM_IPTV_
	unsigned char	cwmp_CT_IPTV_IGMPEnable;
	unsigned int	cwmp_CT_IPTV_STBNumber;
#endif  //_PRMT_X_CT_COM_IPTV_
#ifdef _PRMT_X_CT_COM_RECON_
	unsigned char	cwmp_CT_ReCon_Enable;
#endif //_PRMT_X_CT_COM_RECON_
#ifdef _PRMT_X_CT_COM_MWBAND_
	unsigned int	cwmp_CT_MWBAND_Mode;
	unsigned char	cwmp_CT_MWBAND_STB_Enable;
	unsigned char	cwmp_CT_MWBAND_CMR_Enable;
	unsigned char	cwmp_CT_MWBAND_PC_Enable;
	unsigned char	cwmp_CT_MWBAND_PHN_Enable;
	unsigned int	cwmp_CT_MWBAND_Number;
	unsigned int	cwmp_CT_MWBAND_STB_Num;
	unsigned int	cwmp_CT_MWBAND_CMR_Num;
	unsigned int	cwmp_CT_MWBAND_PC_Num;
	unsigned int	cwmp_CT_MWBAND_PHN_Num;
#endif
#ifdef _PRMT_X_CT_COM_PORTALMNT_
	unsigned char	cwmp_CT_PM_Enable;
	unsigned char	cwmp_CT_PM_URL4PC[256];
	unsigned char	cwmp_CT_PM_URL4STB[256];
	unsigned char	cwmp_CT_PM_URL4MOBILE[256];
#endif

#if defined(_PRMT_X_CT_COM_DHCP_)||defined(IP_BASED_CLIENT_TYPE)
#if 1
	unsigned char	cwmp_CT_STB_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_STB_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PHN_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PHN_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_CMR_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_CMR_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PC_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PC_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_HGW_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_HGW_MaxAddr[IP_ADDR_LEN];
#else
	unsigned char	cwmp_CT_STB_MinAddr;
	unsigned char	cwmp_CT_STB_MaxAddr;
	unsigned char	cwmp_CT_PHN_MinAddr;
	unsigned char	cwmp_CT_PHN_MaxAddr;
	unsigned char	cwmp_CT_CMR_MinAddr;
	unsigned char	cwmp_CT_CMR_MaxAddr;
	unsigned char	cwmp_CT_PC_MinAddr;
	unsigned char	cwmp_CT_PC_MaxAddr;
	unsigned char	cwmp_CT_HGW_MinAddr;
	unsigned char	cwmp_CT_HGW_MaxAddr;
#endif
#endif
	unsigned char	cwmp_ACS_KickURL[64];
	unsigned char	cwmp_ACS_DownloadURL[64];
	unsigned int 	cwmp_ConnReqPort;
	unsigned char 	cwmp_ConnReqPath[32];
	unsigned char	cwmp_Flag2;
#ifdef _PRMT_TR143_
	unsigned char	tr143_udpecho_enable;
	unsigned char	tr143_udpecho_itftype;
	unsigned char	tr143_udpecho_srcip[4];
	unsigned short	tr143_udpecho_port;
	unsigned char	tr143_udpecho_plus;
#endif //_PRMT_TR143_
	unsigned char cwmp_Persistent_Data[256];
	unsigned int cwmp_wan_interface;
#else /*_CWMP_MIB_*/
#if defined(_PRMT_X_CT_COM_DHCP_)||defined(IP_BASED_CLIENT_TYPE)
#if 1
	unsigned char	cwmp_CT_STB_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_STB_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PHN_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PHN_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_CMR_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_CMR_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PC_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_PC_MaxAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_HGW_MinAddr[IP_ADDR_LEN];
	unsigned char	cwmp_CT_HGW_MaxAddr[IP_ADDR_LEN];
#else
	unsigned char	cwmp_CT_STB_MinAddr;
	unsigned char	cwmp_CT_STB_MaxAddr;
	unsigned char	cwmp_CT_PHN_MinAddr;
	unsigned char	cwmp_CT_PHN_MaxAddr;
	unsigned char	cwmp_CT_CMR_MinAddr;
	unsigned char	cwmp_CT_CMR_MaxAddr;
	unsigned char	cwmp_CT_PC_MinAddr;
	unsigned char	cwmp_CT_PC_MaxAddr;
	unsigned char	cwmp_CT_HGW_MinAddr;
	unsigned char	cwmp_CT_HGW_MaxAddr;
#endif
#endif
#endif
	unsigned char	syslog;
	unsigned int	maxmsglen;
	unsigned char	adsldbg;

#ifdef DOS_SUPPORT
	unsigned int dos_enable;
	unsigned int dos_syssyn_flood;
	unsigned int dos_sysfin_flood;
	unsigned int dos_sysudp_flood;
	unsigned int dos_sysicmp_flood;
	unsigned int dos_pipsyn_flood;
	unsigned int dos_pipfin_flood;
	unsigned int dos_pipudp_flood;
	unsigned int dos_pipicmp_flood;
	unsigned int dos_block_time;
#endif
	unsigned char	eth_mac_ctrl;
	unsigned char	wlan_mac_ctrl;
#ifdef CONFIG_USER_DHCP_SERVER
	unsigned char 	dhcp_GatewayAddr[IP_ADDR_LEN];
#endif
	#ifdef CONFIG_WIFI_SIMPLE_CONFIG// WPS def WIFI_SIMPLE_CONFIG
	#define PIN_LEN                                 8
	unsigned char wscDisable;
	unsigned char wscMethod;
	unsigned char wscConfigured;
	unsigned char wscPin[PIN_LEN+1];
	unsigned char wscAuth;
	unsigned char wscEnc;
	unsigned char wscManualEnabled;
	unsigned char wscUpnpEnabled;
	unsigned char wscRegistrarEnabled;
	unsigned char wscSsid[MAX_SSID_LEN];
	unsigned char wscPsk[MAX_PSK_LEN+1];
	unsigned char wscConfigByExtReg;
	unsigned char wscVersion;
	#endif

#ifdef WLAN_MBSSID
	unsigned char itfGroupVap0;		// wlan0-vap0 interface group
	unsigned char itfGroupVap1;		// wlan0-vap1 interface group
	unsigned char itfGroupVap2;		// wlan0-vap2 interface group
	unsigned char itfGroupVap3;		// wlan0-vap3 interface group
#endif

	//alex
#ifdef IP_QOS
#define NUM_PKT_PRIO 8
	unsigned char set8021p_prio[NUM_PKT_PRIO];
	unsigned char setpred_prio[NUM_PKT_PRIO];
#endif
	//add by ramen
#ifdef CONFIG_IP_NF_ALG_ONOFF
#ifdef CONFIG_NF_CONNTRACK_FTP
	unsigned char ipAlgFTP;
#endif
#ifdef CONFIG_NF_CONNTRACK_H323
	unsigned char ipAlgH323;
#endif
#ifdef CONFIG_NF_CONNTRACK_IRC
	unsigned char ipAlgIRC;
#endif
#ifdef CONFIG_NF_CONNTRACK_RTSP
	unsigned char ipAlgRTSP;
#endif
#ifdef CONFIG_NF_CONNTRACK_QUAKE3
	unsigned char ipAlgQUAKE3;
#endif
#ifdef CONFIG_NF_CONNTRACK_CUSEEME
	unsigned char ipAlgCUSEEME;
#endif
#ifdef CONFIG_NF_CONNTRACK_L2TP
	unsigned char ipAlgL2TP;
#endif
#ifdef CONFIG_NF_CONNTRACK_IPSEC
	unsigned char ipAlgIPSEC;
#endif
#ifdef CONFIG_NF_CONNTRACK_SIP
	unsigned char ipAlgSIP;
#endif
#ifdef CONFIG_NF_CONNTRACK_PPTP
	unsigned char ipAlgPPTP;
#endif
#endif
	//add by ramen
#ifdef DNS_BIND_PVC_SUPPORT

	unsigned char dns1PvcEnable;
	unsigned int dns1PvcIfIndex;
	unsigned int dns2PvcIfIndex;
	unsigned int dns3PvcIfIndex;
#endif
	//add by ramen
#ifdef QOS_SPEED_LIMIT_SUPPORT
	unsigned int upbandwidth;
#endif

#ifdef ADDRESS_MAPPING
#ifndef MULTI_ADDRESS_MAPPING
	unsigned char addressMapType;
	unsigned char lsip[IP_ADDR_LEN];
	unsigned char leip[IP_ADDR_LEN];
	unsigned char gsip[IP_ADDR_LEN];
	unsigned char geip[IP_ADDR_LEN];
#endif
#endif

#ifdef CONFIG_USER_SAMBA
	unsigned char samba_enable;
#ifdef CONFIG_USER_NMBD
	unsigned char samba_netbios_name[MAX_SAMBA_NETBIOS_NAME_LEN];
#endif
	unsigned char samba_server_string[MAX_SAMBA_SERVER_STRING_LEN];
#endif

#ifdef ELAN_LINK_MODE_INTRENAL_PHY
	unsigned char ethMode;
#endif

#ifdef CONFIG_USER_RTK_SYSLOG
#ifdef SEND_LOG
	unsigned char logServer[IP_ADDR_LEN];
	unsigned char logNmae[MAX_NAME_LEN];     // user name
	unsigned char logPassword[MAX_NAME_LEN]; // user assword
#endif
#endif

//#ifdef QSETUP_WEB_REDIRECT
//	unsigned char startRedirect;	// 1: redirect rule set
//#endif
#ifdef CONFIG_USER_SNMPD_SNMPD_V2CTRAP
        	unsigned char snmpdEnabled;    // 0: disable, 1:enable
#endif
#ifdef TCP_UDP_CONN_LIMIT
	unsigned char connlimitEn;	//connection limit enable, 0: disable, 1: enable
	unsigned int connlimitUdp;		//udp port numbers per user
	unsigned int connlimitTcp;		//tcpp port numbers per user.
#endif

#ifdef WEB_REDIRECT_BY_MAC
	unsigned char WebRedirByMACURL[MAX_URL_LEN];     //url
	unsigned int landingPageTime; // Time Interval of Landing Page in seconds
#endif

#ifdef CONFIG_USB_ETH
	unsigned char usbeth_itfgrp;		// usb0 interface group
#endif //CONFIG_USB_ETH

//#ifdef DHCPS_POOL_COMPLETE_IP
#ifdef CONFIG_USER_DHCP_SERVER
	unsigned char dhcpSubnetMask[IP_ADDR_LEN];
#endif
//#endif

#ifdef _SUPPORT_CAPTIVEPORTAL_PROFILE_
	unsigned char captivePortalEnable;
	char captivePortalURL[MAX_URL_LEN];
#endif

#ifdef WLAN_QoS
	unsigned char wlanqos_apsd;	//wlan QoS_APSD(WMM) switch
#endif
	//ql 20090119 START: for imagenio service
#ifdef IMAGENIO_IPTV_SUPPORT
	unsigned char dhcpOpchAddr[IP_ADDR_LEN];
	unsigned short dhcpOpchPort;
	unsigned char imagenioDns1[IP_ADDR_LEN];
	unsigned char imagenioDns2[IP_ADDR_LEN];
#endif
	//ql 20090119 END

//for FIELD_TRY_SAFE_MODE web control
#ifdef FIELD_TRY_SAFE_MODE
	unsigned char adslFtMode;
	unsigned int adslFtTestPSDTimes;
	unsigned int adslFtCtrlIn;
#endif

#ifdef CONFIG_IPV6
#ifdef CONFIG_USER_RADVD
	unsigned char V6MaxRtrAdvInterval[MAX_RADVD_CONF_LEN];
	unsigned char V6MinRtrAdvInterval[MAX_RADVD_CONF_LEN];
	unsigned char V6AdvCurHopLimit[MAX_RADVD_CONF_LEN];
	unsigned char V6AdvDefaultLifetime[MAX_RADVD_CONF_LEN];
	unsigned char V6AdvReachableTime[MAX_RADVD_CONF_LEN];
	unsigned char V6AdvRetransTimer[MAX_RADVD_CONF_LEN];
	unsigned char V6AdvLinkMTU[MAX_RADVD_CONF_LEN];
	unsigned char V6prefix_ip[MAX_RADVD_CONF_PREFIX_LEN];
	unsigned char V6prefix_len[MAX_RADVD_CONF_LEN];
	unsigned char V6ValidLifetime[MAX_RADVD_CONF_LEN];
	unsigned char V6PreferredLifetime[MAX_RADVD_CONF_LEN];
	unsigned char V6SendAdvert; // 0 - off, 1 - on
	unsigned char V6ManagedFlag; // 0 - off, 1 - on
	unsigned char V6OtherConfigFlag; // 0 - off, 1 - on
	unsigned char V6OnLink; // 0 - off, 1 - on
	unsigned char V6Autonomous; // 0 - off, 1 - on
	unsigned char V6PrefixMode; // 0 - auto, 1 - manual
	unsigned char V6PrefixEnable; // 0 - off, 1 - on
	unsigned char V6RDNSS1[MAX_RADVD_CONF_PREFIX_LEN];
	unsigned char V6RDNSS2[MAX_RADVD_CONF_PREFIX_LEN];
	unsigned char V6ULAPrefixEnable; // 0 - off, 1 - on
	unsigned char V6ULAPrefix[MAX_RADVD_CONF_PREFIX_LEN];
	unsigned char V6ULAPrefix_len[MAX_RADVD_CONF_LEN];
	unsigned char V6ULAPrefixValidLifetime[MAX_RADVD_CONF_LEN];
	unsigned char V6ULAPrefixPreferredLifetime[MAX_RADVD_CONF_LEN];
#endif

#ifdef CONFIG_USER_DHCPV6_ISC_DHCP411
	unsigned char dhcpv6s_prefix_length;
	unsigned char dhcpv6s_range_start[IP6_ADDR_LEN];
	unsigned char dhcpv6s_range_end[IP6_ADDR_LEN];
	unsigned int dhcpv6s_default_LTime; // DHCPv6 server default lease time in seconds
	unsigned int dhcpv6s_preferred_LTime; // DHCPv6 server prefer lease time in seconds
	unsigned int dhcpv6r_ifIndex; // The ifIndex of upper interface for DHCPv6 relay
	unsigned char dhcpv6_mode;
	unsigned int dhcpv6s_renew_time; // DHCPv6 server renew time in seconds
	unsigned int dhcpv6s_rebind_time; // DHCPv6 server rebind time in seconds
	unsigned char dhcpv6s_clientID[MAX_DUID_LEN]; // Client DUID for DHCPv6 Server
#endif

#ifdef CONFIG_USER_ECMH
	// Mason Yu. MLD Proxy
	unsigned char mld_proxy_daemon;
	unsigned int mld_proxy_ext_itf;
#endif

#ifdef DNSV6_BIND_PVC_SUPPORT
	unsigned char dnsv6PvcEnable;
	unsigned int dnsv61PvcIfIndex;
	unsigned int dnsv62PvcIfIndex;
	unsigned int dnsv63PvcIfIndex;
#endif

	unsigned char dnsv6Mode;
	unsigned char dnsv61[IP6_ADDR_LEN];
	unsigned char dnsv62[IP6_ADDR_LEN];
	unsigned char dnsv63[IP6_ADDR_LEN];
	unsigned char v6ipfOutAction; // 0 - Deny, 1 - Allow
	unsigned char v6ipfInAction;  // 0 - Deny, 1 - Allow
	unsigned char v6ipv6Enable;   // 0 - Disable, 1 - Enable
#endif // if CONFIG_IPV6
#ifdef CONFIG_TR_064
	unsigned char	tr064_enabled;
#endif

#ifdef CONFIG_RTK_RG_INIT
	unsigned char macBasedTagDecision;
	unsigned int lan_vlan_id1;
	unsigned int lan_vlan_id2;
	unsigned int lan_port_mask1;
	unsigned int lan_port_mask2;
	unsigned char lan_ip_version1;
	unsigned char lan_ip_version2;
	unsigned char lan_ipv6_mode1;
	unsigned char lan_ipv6_mode2;
	unsigned char lan_ipv6_addr1[IP6_ADDR_LEN];
	unsigned char lan_ipv6_addr2[IP6_ADDR_LEN];
	unsigned char lan_ipv6_prefix_len1;
	unsigned char lan_ipv6_prefix_len2;
#endif

	unsigned char loid[25];
	unsigned char loid_passwd[13];
#if defined(CONFIG_GPON_FEATURE)
	unsigned char gpon_ploam_passwd[11];
#endif
#if defined(CONFIG_RTK_OMCI_V1)
	unsigned char omci_dbglvl;
	unsigned char omci_logfile;
	unsigned char omci_port_type;
	unsigned char dual_mgmt_mode;
	unsigned int omci_custom_bdp;
	unsigned int omci_custom_rdp;
	unsigned int omci_custom_mcast;
	unsigned int omci_custom_me;
#endif
#if defined(CONFIG_RTK_IGMP)
	unsigned char rtk_igmp_dbgen;
	unsigned char rtk_igmp_dropv1;
	unsigned char rtk_igmp_vidtype;
	unsigned char rtk_igmp_tagdecision;
#endif
#ifdef CONFIG_GPON_FEATURE
	unsigned char vlan_cfg_type;
	unsigned char vlan_manu_mode;
	unsigned short vlan_manu_tag_vid;
	unsigned char vlan_manu_tag_pri;
	unsigned char omci_olt_mode;
	unsigned char omci_sw_ver1[15];
	unsigned char omci_sw_ver2[15];
	unsigned char omcc_ver;
	unsigned char omci_tm_opt;
	unsigned char omci_eqid[21];
	unsigned char omci_ont_ver[15];
	unsigned int omci_logfile_mask;
	unsigned char omci_vendor_id[5];
#endif

	unsigned short dhcpPortFilter;
	unsigned int ntpExtItf;   	// NTP Binded WAN interface index

#ifdef CONFIG_FIBER_FEATURE
	unsigned int fiber_mode;
#endif

#ifdef CONFIG_DSL_VTUO
	/* channel profile */
	unsigned int	ChanDSNDRMax;
	unsigned int	ChanDSNDRMin;
	unsigned char	ChanDSMaxDelay;
	unsigned char	ChanDSMinINP;
	unsigned char 	ChanDSMinINP8;
	unsigned int	ChanDSSosMDR;

	unsigned int	ChanUSNDRMax;
	unsigned int	ChanUSNDRMin;
	unsigned char	ChanUSMaxDelay;
	unsigned char	ChanUSMinINP;
	unsigned char	ChanUSMinINP8;
	unsigned int	ChanUSSosMDR;

	/* ginp setup */
	unsigned char	GinpDSMode;
	unsigned int	GinpDSETMax;
	unsigned int	GinpDSETMin;
	unsigned int	GinpDSNDRMax;
	unsigned short	GinpDSShineRatio;
	unsigned char	GinpDSLeftrThrd;
	unsigned char	GinpDSMaxDelay;
	unsigned char 	GinpDSMinDelay;
	unsigned char 	GinpDSMinINP;
	unsigned char 	GinpDSReinSym;
	unsigned char 	GinpDSReinFreq;

	unsigned char	GinpUSMode;
	unsigned int	GinpUSETMax;
	unsigned int	GinpUSETMin;
	unsigned int	GinpUSNDRMax;
	unsigned short	GinpUSShineRatio;
	unsigned char	GinpUSLeftrThrd;
	unsigned char	GinpUSMaxDelay;
	unsigned char 	GinpUSMinDelay;
	unsigned char 	GinpUSMinINP;
	unsigned char 	GinpUSReinSym;
	unsigned char 	GinpUSReinFreq;

	/* line profile*/
	unsigned short	LineVd2Profile;
	/*
	unsigned char	LineTransMode;
	*/
	unsigned int	LineAdProtocol;
	/*
	unsigned char	LineClasMask;
	*/
	unsigned char	LineLimitMask;
	unsigned char	LineUs0Mask;
	unsigned char	LineUpboEnable;
	short			LineUpboKl;
	short			LineUpbo1a;
	short			LineUpbo2a;
	short			LineUpbo3a;
	short			LineUpbo4a;
	short			LineUpbo1b;
	short			LineUpbo2b;
	short			LineUpbo3b;
	short			LineUpbo4b;
	/*
	unsigned char	LineRtMode;
	*/
	unsigned char	LineUs0Enable;
	/*
	unsigned char	LineDSMaxSNRNoLmt;
	*/
	short			LineDSMaxSNR;
	short			LineDSTargetSNR;
	short			LineDSMinSNR;
	unsigned char	LineDSBitswap;
	/*
	short			LineDSMaxTXPwr;
	unsigned short	LineDSMinOhRate;
	unsigned char	LineUSMaxSNRNoLmt;
	*/
	short			LineUSMaxSNR;
	short			LineUSTargetSNR;
	short			LineUSMinSNR;
	unsigned char	LineUSBitswap;
	/*
	unsigned char	LineUSMaxRxPwrNoLmt;
	short			LineUSMaxRXPwr;
	short			LineUSMaxTXPwr;
	*/
	unsigned short	LineUSMinOhRate;

	/*inm profile*/
	unsigned char	InmNEInpEqMode;
	unsigned char	InmNEInmCc;
	unsigned char	InmNEIatOffset;
	unsigned char	InmNEIatSetup;
	/*
	short		InmNEIsddSen;
	*/

	unsigned char	InmFEInpEqMode;
	unsigned char	InmFEInmCc;
	unsigned char	InmFEIatOffset;
	unsigned char	InmFEIatSetup;
	/*
	short		InmFEIsddSen;
	*/

	/*sra setup*/
	unsigned char	SraDSRAMode;
	unsigned char	SraDSDynDepth;
	short			SraDSUpSftSNR;
	unsigned short	SraDSUpSftTime;
	short			SraDSDownSftSNR;
	unsigned short	SraDSDownSftTime;
	unsigned short	SraDSSosTime;
	unsigned short	SraDSSosCRC;
	unsigned char	SraDSSosnTone;
	unsigned char	SraDSSosMax;
	/*
	unsigned char	SraDSSosMStepTone;
	*/
	unsigned char	SraDSRocEnable;
	short 			SraDSRocSNR;
	unsigned char	SraDSRocMinInp;

	unsigned char	SraUSRAMode;
	unsigned char	SraUSDynDepth;
	short			SraUSUpSftSNR;
	unsigned short	SraUSUpSftTime;
	short			SraUSDownSftSNR;
	unsigned short	SraUSDownSftTime;
	unsigned short	SraUSSosTime;
	unsigned short	SraUSSosCRC;
	unsigned char	SraUSSosnTone;
	unsigned char	SraUSSosMax;
	/*
	unsigned char	SraUSSosMStepTone;
	*/
	unsigned char	SraUSRocEnable;
	short 			SraUSRocSNR;
	unsigned char	SraUSRocMinInp;

	/*DPBO*/
	unsigned char	DpboEnable;
	short			DpboEsel;
	int				DpboEscma;
	int				DpboEscmb;
	int				DpboEscmc;
	short			DpboMus;
	unsigned short	DpboFmin;
	unsigned short	DpboFmax;

	/*VN*/
	unsigned char	VnDSEnable;
	unsigned char	VnUSEnable;
#endif /*CONFIG_DSL_VTUO*/

#ifdef CONFIG_USER_Y1731
#define Y1731_MEGID_LEN 14
#define Y1731_INCL_IFACE_LEN 64
	unsigned char Y1731_Mode; /* 0-disable, 1-enable */
	unsigned char Y1731_Meglevel; /* level 0-7 */
	unsigned short Y1731_MyID; /* */
	char Y1731_MegID[Y1731_MEGID_LEN];
	char Y1731_Incl_Iface[Y1731_INCL_IFACE_LEN]; /* interface to include */
	char Y1731_LogLevel[8]; /* one of: none, medium, xtra, all */
	unsigned char Y1731_CcmInterval; /* 0-off,1=3.3ms,2=10ms,3=100ms,4=1s,5=10s,6=1m,7=10m */
#endif
#ifdef PARENTAL_CTRL
	unsigned char parentalCtrlEnabled;	// 0: disable, 1: enable
#endif
#ifdef CONFIG_IPV6
	unsigned char lanipv6addr[MAX_V6_IP_LEN];
#endif
	// maintain version information
	unsigned char	rtk_devid_manufacturer[64];
	unsigned char	rtk_devid_oui[64];
	unsigned char	rtk_devid_productclass[64];
	unsigned char	rtk_devinfo_specver[64];
	unsigned char	rtk_devinfo_swver[64];
	unsigned char	rtk_devinfo_hwver[64];

	unsigned char	deviceName[MAX_NAME_LEN];
#ifdef USER_WEB_WIZARD
	unsigned char webwizard_flag;	// 0: wizard done, 1: redirect to wizard
#endif
} __PACK__ MIB_T, *MIB_Tp;
#ifdef DNS_BIND_PVC_SUPPORT
#define ADDDNSROUTE 0
#define DELDNSROUTE 1
#endif
#ifdef CONFIG_WIFI_SIMPLE_CONFIG // WPS WIFI_SIMPLE_CONFIG
//enum { CONFIG_METHOD_ETH=0x2, CONFIG_METHOD_PIN=0x4, CONFIG_METHOD_PBC=0x80 };
enum { WSC_ENCRYPT_NONE=1, WSC_ENCRYPT_WEP=2, WSC_ENCRYPT_TKIP=4, WSC_ENCRYPT_AES=8, WSC_ENCRYPT_TKIPAES=12 };
enum { WSC_AUTH_OPEN=1, WSC_AUTH_WPAPSK=2, WSC_AUTH_SHARED=4, WSC_AUTH_WPA=8, WSC_AUTH_WPA2=0x10, WSC_AUTH_WPA2PSK=0x20, WSC_AUTH_WPA2PSKMIXED=0x22 };
#endif

typedef struct hw_config_setting {
	// Supervisor of web server account
	unsigned char superName[MAX_NAME_LEN]; // supervisor name
	unsigned char superPassword[MAX_NAME_LEN]; // supervisor assword
	unsigned char bootMode; // 0 - last config, 1 - default config, 2 - upgrade config
	unsigned char elanMacAddr[MAC_ADDR_LEN]; // MAC address of ELAN port in used
	unsigned char wlanMacAddr[MAC_ADDR_LEN]; // MAC address of WLAN port in used
	unsigned int wanPhyPort; //index of wan physical port
//#if WLAN_SUPPORT
	unsigned char txPowerCCK[MAX_CHAN_NUM]; // CCK Tx power for each channel

	unsigned char pwrlevelCCK_A[MAX_CHAN_NUM]; //tx power ofdm 1s path A + B
	unsigned char pwrlevelCCK_B[MAX_CHAN_NUM]; //tx power ofdm 2s path A + B
	unsigned char pwrlevelHT40_1S_A[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path A
	unsigned char pwrlevelHT40_1S_B[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path B
	unsigned char pwrdiffHT40_2S[MAX_CHAN_NUM];
	unsigned char pwrdiffHT20[MAX_CHAN_NUM];
	unsigned char pwrdiffOFDM[MAX_CHAN_NUM];
	unsigned char TSSI1;
	unsigned char TSSI2;
	unsigned char Ther;
	unsigned char Ther2;
	unsigned char PA_type;
	unsigned char regDomain; // regulation domain
	unsigned char trswpape_c9; // TRSWPAPE C9
	unsigned char trswpape_cc;
	unsigned char trswitch;
#ifdef WLAN_DUALBAND_CONCURRENT
// this variable for wlan1 8812AR
	unsigned char pwrlevelCCK_A_w1[MAX_CHAN_NUM]; //tx power ofdm 1s path A + B
	unsigned char pwrlevelCCK_B_w1[MAX_CHAN_NUM]; //tx power ofdm 2s path A + B
	unsigned char pwrlevelHT40_1S_A_w1[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path A
	unsigned char pwrlevelHT40_1S_B_w1[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path B
	unsigned char pwrdiffHT40_2S_w1[MAX_CHAN_NUM];
	unsigned char pwrdiffHT20_w1[MAX_CHAN_NUM];
	unsigned char pwrdiffOFDM_w1[MAX_CHAN_NUM];
	unsigned char TSSI1_w1;
	unsigned char TSSI2_w1;
	unsigned char Ther_w1;
	unsigned char Ther2_w1;
	unsigned char PA_type_w1;
	unsigned char regDomain_w1; // regulation domain
	unsigned char trswpape_c9_w1; // TRSWPAPE C9
	unsigned char trswpape_cc_w1;
	unsigned char trswitch_w1;
	unsigned char slave_elanMacAddr[MAC_ADDR_LEN]; // MAC address of Slave CPU ELAN port in used
#endif

	unsigned char rfType; // RF module type
	unsigned char antDiversity; // rx antenna diversity on/off
	unsigned char txAnt; // select tx antenna, 0 - A, 1 - B
	unsigned char csThreshold;
	unsigned char ccaMode;	// 0, 1, 2
	unsigned char phyType; // for Philip RF module only (0 - analog, 1 - digital)
	unsigned char ledType; // LED type, see LED_TYPE_T for definition
#if defined(CONFIG_RTL_92D_SUPPORT) || defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT)
	unsigned char pwrlevel5GHT40_1S_A[MAX_5G_CHANNEL_NUM];
	unsigned char pwrlevel5GHT40_1S_B[MAX_5G_CHANNEL_NUM];
#ifdef CONFIG_RTL_92D_SUPPORT
	unsigned char pwrdiff5GHT40_2S[MAX_5G_CHANNEL_NUM];
	unsigned char pwrdiff5GHT20[MAX_5G_CHANNEL_NUM];
	unsigned char pwrdiff5GOFDM[MAX_5G_CHANNEL_NUM];
#endif
#endif
#if defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT)
	unsigned char pwrdiff_20BW1S_OFDM1T_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_4OFDM3T_CCK3T_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_A[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_A[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_A[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_A[MAX_5G_DIFF_NUM];

	unsigned char pwrdiff_20BW1S_OFDM1T_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM3T_CCK3T_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_B[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_B[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_B[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_B[MAX_5G_DIFF_NUM];
#endif
//#endif // of WLAN_SUPPORT
	unsigned char	byte_test;
	unsigned short word_test;
	unsigned int dword_test;
	int	int_test1;
	int	int_test2;
//#ifdef WLAN_SUPPORT
	unsigned char wifi_support;
//#endif
	unsigned char	serialNumber[64];
	unsigned char fon_keyword[32];
	unsigned char rf_xCap;
	unsigned char rf_xCap2;
#ifdef WLAN_DUALBAND_CONCURRENT
	unsigned char rf_xCap_w1;
	unsigned char rf_xCap2_w1;
#endif

#ifdef CONFIG_LUNA
#if defined(CONFIG_GPON_FEATURE) || defined(CONFIG_EPON_FEATURE) || defined(CONFIG_FIBER_FEATURE)
	unsigned int pon_mode;
	unsigned int pon_led_spec;
#if defined(CONFIG_GPON_FEATURE)
	unsigned char gpon_sn[13];
#endif
#if defined(CONFIG_EPON_FEATURE)
	unsigned char epon_vendor_id[5];
    unsigned char epon_onu_model[5];
    unsigned char epon_extonu_model[17];
    unsigned char epon_hw_version[9];
    unsigned char epon_sw_version[17];
	unsigned int  epon_silent_mode;
#endif
#endif
#endif
	unsigned char target_pwr;
#ifdef WLAN_DUALBAND_CONCURRENT
	unsigned char target_pwr_w1;
#endif

#if defined(CONFIG_WLAN_HAL_8814AE)
	unsigned char pwrlevelCCK_C[MAX_CHAN_NUM]; //tx power ofdm 1s path C + D
	unsigned char pwrlevelCCK_D[MAX_CHAN_NUM]; //tx power ofdm 2s path C + D
	unsigned char pwrlevelHT40_1S_C[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path C
	unsigned char pwrlevelHT40_1S_D[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path D
	unsigned char pwrlevel5GHT40_1S_C[MAX_5G_CHANNEL_NUM];
	unsigned char pwrlevel5GHT40_1S_D[MAX_5G_CHANNEL_NUM];
#endif

#if defined(CONFIG_WLAN_HAL_8814AE) && defined(WLAN_DUALBAND_CONCURRENT)
	unsigned char pwrlevelCCK_C_w1[MAX_CHAN_NUM]; //tx power ofdm 1s path C + D
	unsigned char pwrlevelCCK_D_w1[MAX_CHAN_NUM]; //tx power ofdm 2s path C + D
	unsigned char pwrlevelHT40_1S_C_w1[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path C
	unsigned char pwrlevelHT40_1S_D_w1[MAX_CHAN_NUM]; //difference between OFDM and HT40-1S path D
	unsigned char pwrlevel5GHT40_1S_C_w1[MAX_5G_CHANNEL_NUM];
	unsigned char pwrlevel5GHT40_1S_D_w1[MAX_5G_CHANNEL_NUM];
#endif

#if defined(CONFIG_WLAN_HAL_8814AE) && (defined(WLAN0_5G_SUPPORT) || defined(WLAN1_5G_SUPPORT))
	unsigned char pwrdiff_20BW1S_OFDM1T_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_4OFDM3T_CCK3T_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_C[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_C[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_C[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_C[MAX_5G_DIFF_NUM];

	unsigned char pwrdiff_20BW1S_OFDM1T_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM3T_CCK3T_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_D[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_D[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_D[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_D[MAX_5G_DIFF_NUM];
#endif

#ifdef CONFIG_LAN_SDS_FEATURE
	unsigned int lan_sds_mode;
#endif

#if defined(CONFIG_WLAN_HAL_8814AE) && defined(WLAN_DUALBAND_CONCURRENT)
	unsigned char pwrdiff_20BW1S_OFDM1T_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_4OFDM3T_CCK3T_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_A_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_A_w1[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_A_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_A_w1[MAX_5G_DIFF_NUM];

	unsigned char pwrdiff_20BW1S_OFDM1T_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM3T_CCK3T_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_B_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_B_w1[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_B_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_B_w1[MAX_5G_DIFF_NUM];

	unsigned char pwrdiff_20BW1S_OFDM1T_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_4OFDM3T_CCK3T_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_C_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_C_w1[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_C_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_C_w1[MAX_5G_DIFF_NUM];

	unsigned char pwrdiff_20BW1S_OFDM1T_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW2S_20BW2S_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM2T_CCK2T_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW3S_20BW3S_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM3T_CCK3T_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_40BW4S_20BW4S_D_w1[MAX_CHAN_NUM];
	unsigned char pwrdiff_OFDM4T_CCK4T_D_w1[MAX_CHAN_NUM];

	unsigned char pwrdiff_5G_20BW1S_OFDM1T_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW2S_20BW2S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW3S_20BW3S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_40BW4S_20BW4S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_RSVD_OFDM4T_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW1S_160BW1S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW2S_160BW2S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW3S_160BW3S_D_w1[MAX_5G_DIFF_NUM];
	unsigned char pwrdiff_5G_80BW4S_160BW4S_D_w1[MAX_5G_DIFF_NUM];
#endif // defined(CONFIG_WLAN_HAL_8814AE) && (defined(WLAN_DUALBAND_CONCURRENT)

	char cwmp_manufacturer[64];
	char cwmp_productclass[64];
	char cwmp_hw_ver[32];
} __PACK__ HW_MIB_T, *HW_MIB_Tp;

typedef struct chain_record_header {
	unsigned short id;
	unsigned int len;
} __PACK__ MIB_CHAIN_RECORD_HDR_T, *MIB_CHAIN_RECORD_HDR_Tp;

typedef struct chain_entry {
	struct chain_entry	*pNext;
	unsigned char* pValue;
} MIB_CHAIN_ENTRY_T, *MIB_CHAIN_ENTRY_Tp;

// For MIB RS (Running Setting)
typedef struct rs_config_setting {
	/* Define RS data here */
#ifdef CONFIG_TR142_MODULE
	unsigned char omci_acs_configured;
	char omci_acs_url[256+1];
	char omci_acs_username[256+1];
	char omci_acs_passwd[256+1];
	unsigned int omci_tr069_if_id;
#endif
} RS_MIB_T, *RS_MIB_Tp;

/*
 * Flash File System
 */
extern int g_cs_offset;
extern int g_rootfs_offset;
#ifdef CONFIG_DOUBLE_IMAGE
extern int g_fs_bak_offset;
#endif
#define DEFAULT_SETTING_MIN_LEN		sizeof(MIB_T)
#define DEFAULT_SETTING_MAX_LEN		0x2000
#define CURRENT_SETTING_MIN_LEN		sizeof(MIB_T)
#ifndef COMPRESS_CURRENT_SETTING
#define CURRENT_SETTING_MAX_LEN		0xc000
#else
#define CURRENT_SETTING_MAX_LEN		0x4000
#define CURRENT_SETTING_MAX_REAL_LEN	0x2000
#define CURRENT_SETTING_LEN			0x4000
#endif
#define HW_SETTING_MIN_LEN		sizeof(HW_MIB_T)
#define HW_SETTING_MAX_LEN		0x1000

//ccwei
//#ifdef EMBED
//#if defined(EMBED) && !defined(CONFIG_MTD_NAND) && !defined(CONFIG_BLK_DEV_INITRD)
/*if both defined CONFIG_MTD and CONFIG_BLK_DEV_INITRD, get config from mtd*/
#if defined(EMBED) && !defined(CONFIG_MTD_NAND) && defined(CONFIG_MTD)
//end ccwei
#define FLASH_DEVICE_NAME		("/dev/mtd")
#if defined(CONFIG_SINGLE_IMAGE)
/*--------------------------------------------------------------------------
			Single Image
---------------------------------------------------------------------------*/
#ifdef CONFIG_RTL8686
#define FLASH_BLOCK_SIZE        0x10000     // 64KB block
#define CODE_IMAGE_OFFSET       0x500000
#define DEFAULT_SETTING_OFFSET  0x100000
//#define HW_SETTING_OFFSET       DEFAULT_SETTING_OFFSET + DEFAULT_SETTING_MAX_LEN
#define HW_SETTING_OFFSET       0x28000
#define CURRENT_SETTING_OFFSET  HW_SETTING_OFFSET + HW_SETTING_MAX_LEN
#else//config_rtl8686
#define FLASH_BLOCK_SIZE		0x10000		// 64KB block
#define CODE_IMAGE_OFFSET		CONFIG_BOOT_SIZE+0x20000
#define DEFAULT_SETTING_OFFSET		0x4000
#define HW_SETTING_OFFSET		DEFAULT_SETTING_OFFSET + DEFAULT_SETTING_MAX_LEN
#define CURRENT_SETTING_OFFSET		CONFIG_BOOT_SIZE
#define CURRENT_SETTING_BAKUP_OFFSET	0x80000
#endif//config_rtl8686
#define WEB_PAGE_OFFSET			0x1E0000

#else
/*--------------------------------------------------------------------------
			Double Image
---------------------------------------------------------------------------*/
#define FLASH_BLOCK_SIZE		0x10000		// 64KB block
#define CODE_IMAGE_OFFSET		0x100000
#define ROOTFS_BAKUP_OFFSET		0x600000
#define DEFAULT_SETTING_OFFSET		0x30000
#define HW_SETTING_OFFSET		0x20000
#define CURRENT_SETTING_OFFSET		0x40000
#define CURRENT_SETTING_BAKUP_OFFSET	0x80000
#define WEB_PAGE_OFFSET			0x1E0000
#define PART_CHECK_OFFSET		0xA0000
#endif





#else //EMBED
//ccwei
#define CONF_ON_FILE
#ifdef CONFIG_BLK_DEV_INITRD
#define FLASH_DEVICE_NAME		("/var/setting.bin")
#else /*CONFIG_BLK_DEV_INITRD*/
#define FLASH_DEVICE_NAME		("/var/config/setting.bin")
#endif /*CONFIG_BLK_DEV_INITRD*/
//ccwei
//#define FLASH_BLOCK_SIZE                0x20000         // 128KB block
//#define FLASH_BLOCK_SIZE                0x4000         // 16KB block
#if 0
//ccwei: the sturcture must be compatible with kernel.
struct mtd_info_user {
	unsigned char type;
	unsigned int flags;
	unsigned int size;	 // Total size of the MTD
	unsigned int erasesize;
	unsigned int writesize;
	unsigned int oobsize;   // Amount of OOB data per block (e.g. 16)
	/* The below two fields are obsolete and broken, do not use them
	 * (TODO: remove at some point) */
	unsigned int ecctype;
	unsigned int eccsize;
};
struct erase_info_user {
	unsigned int start;
	unsigned int length;
};
#define MEMGETINFO		_IOR('M', 1, struct mtd_info_user) //get mtd block info.
#define MEMERASE		_IOW('M', 2, struct erase_info_user)
//#define FLASH_DEVICE_NAME		("setting.bin")
//end ccwei
#endif

//#define HW_SETTING_OFFSET		0
//#define DEFAULT_SETTING_OFFSET		HW_SETTING_OFFSET + HW_SETTING_MAX_LEN
//#define CURRENT_SETTING_OFFSET		DEFAULT_SETTING_OFFSET + DEFAULT_SETTING_MAX_LEN

#define DEFAULT_SETTING_OFFSET		0
#define HW_SETTING_OFFSET		DEFAULT_SETTING_OFFSET + DEFAULT_SETTING_MAX_LEN
#define CURRENT_SETTING_OFFSET		HW_SETTING_OFFSET + HW_SETTING_MAX_LEN

#define WEB_PAGE_OFFSET			CURRENT_SETTING_OFFSET + CURRENT_SETTING_MAX_LEN
#define CODE_IMAGE_OFFSET		WEB_PAGE_OFFSET + 0x10000
#endif //end EMBED


/*
 * Chain Record MIB struct
 */
#ifdef IP_PORT_FILTER
typedef struct ipportfilter_entry {
	unsigned char action; // 0 - Deny, 1 - Allow
	//unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char srcIp[IP_ADDR_LEN];
	unsigned char dstIp[IP_ADDR_LEN];
	unsigned char smaskbit;
	unsigned char dmaskbit;
	//unsigned short fromPort;
	unsigned short srcPortFrom;
	unsigned short dstPortFrom;
	//unsigned short toPort;
	unsigned short srcPortTo;
	unsigned short dstPortTo;
	unsigned char dir;
	//unsigned char portType;
	unsigned char protoType;
	//unsigned char comment[COMMENT_LEN];
} __PACK__ MIB_CE_IP_PORT_FILTER_T, *MIB_CE_IP_PORT_FILTER_Tp;
#endif

#ifdef CONFIG_IPV6
typedef struct v6ipportfilter_entry {
	unsigned char action; // 0 - Deny, 1 - Allow
#ifdef CONFIG_IPV6_OLD_FILTER
	unsigned char 	sip6Start[IP6_ADDR_LEN];
	unsigned char 	sip6End[IP6_ADDR_LEN];
	unsigned char 	dip6Start[IP6_ADDR_LEN];
	unsigned char 	dip6End[IP6_ADDR_LEN];
	unsigned char 	sip6PrefixLen;
	unsigned char 	dip6PrefixLen;
#else
	unsigned char 	sIfId6Start[IP6_ADDR_LEN];
	unsigned char 	sIfId6End[IP6_ADDR_LEN];
	unsigned char 	dIfId6Start[IP6_ADDR_LEN];
	unsigned char 	dIfId6End[IP6_ADDR_LEN];
#endif
	unsigned short srcPortFrom;
	unsigned short dstPortFrom;
	unsigned short srcPortTo;
	unsigned short dstPortTo;
	unsigned char dir;
	unsigned char protoType;
} __PACK__ MIB_CE_V6_IP_PORT_FILTER_T, *MIB_CE_V6_IP_PORT_FILTER_Tp;
#endif

 /*ping_zhang:20080919 START:add for new telefonica tr069 request: dhcp option*/
#ifdef _PRMT_X_TELEFONICA_ES_DHCPOPTION_
/*ping_zhang:20090319 START:replace ip range with serving pool of tr069*/
//#define DHCP_OPT_VAL_LEN 20
#define OPTION_RSV_LEN	100
#define DHCP_OPT_VAL_LEN OPTION_RSV_LEN+1
/*ping_zhang:20090319 END*/

enum e_DHCPOpUsedFor
{
	eUsedFor_DHCPServer = 1,
	eUsedFor_DHCPServer_ServingPool,
	eUsedFor_DHCPClient_Sent,
	eUsedFor_DHCPClient_Req
};

typedef struct dhcpoption_entry {
	unsigned char enable;
	unsigned char usedFor;
	unsigned int order;
/*ping_zhang:20090319 START:replace ip range with serving pool of tr069*/
	//unsigned int tag;
	unsigned char tag;
/*ping_zhang:20090319 END*/
	unsigned char len;//ql add: recored the len of value
	unsigned char value[DHCP_OPT_VAL_LEN];
	unsigned int ifIndex;
	unsigned int dhcpOptInstNum;
	unsigned int dhcpConSPInstNum;
} __PACK__ MIB_CE_DHCP_OPTION_T, *MIB_CE_DHCP_OPTION_Tp;
#endif
/*ping_zhang:20080919 END*/

#ifdef PORT_FORWARD_GENERAL
typedef struct portfw_entry {
	//unsigned char action; // 0 - Deny, 1 - Allow
	unsigned char ipAddr[IP_ADDR_LEN]; /*TR-069:internalclient*/
	unsigned short fromPort; /*TR-069:internalport*/
	unsigned short toPort; /*TR-069:internalport*/
	unsigned char protoType;/*TR-069:protocol*/
	unsigned char comment[COMMENT_LEN];
//#ifdef _CWMP_MIB_ /*jiunming, for cwmp-tr069*/
	unsigned int ifIndex;/*0xff: no specific, interface name, refer to "struct atmvc_entry"*/
	unsigned char enable;
	unsigned int  leaseduration;/*0:static*/
	unsigned char remotehost[IP_ADDR_LEN];
//	unsigned int  externalport;
	unsigned int  externalfromport;
	unsigned int  externaltoport;
	//unsigned int  internalport;
	//unsigned char protocol;/*0:tcp, 1:udp*/
	//unsigned char internalclient[IP_ADDR_LEN];
	unsigned char dynamic;
	unsigned int  InstanceNum;
//#endif
} __PACK__ MIB_CE_PORT_FW_T, *MIB_CE_PORT_FW_Tp;
#endif

#ifdef PORT_FORWARD_ADVANCE
typedef struct ipfw_advance_entry {
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned int ifIndex;/*0xff: no specific, interface name, refer to "struct atmvc_entry"*/
	unsigned char gategory;
	unsigned int rule;
} __PACK__ MIB_CE_PORT_FW_ADVANCE_T, *MIB_CE_PORT_FW_ADVANCE_Tp;
#endif

#ifdef VIRTUAL_SERVER_SUPPORT
typedef struct vtlsvr_entry {
	unsigned char svrIpAddr[IP_ADDR_LEN];	//server ip
	unsigned char svrName[16];	//server name
	unsigned short wanStartPort;		//wan comm start port
	unsigned short wanEndPort;	//wan comm end port
	unsigned short svrStartPort;		//local server start port
	unsigned short svrEndPort;	//local server end port
	unsigned char protoType;	//protocol(TCP/UDP)
} __PACK__ MIB_CE_VTL_SVR_T, *MIB_CE_VTL_SVR_Tp;
#endif
#ifdef NATIP_FORWARDING
typedef struct ipfw_entry {
	unsigned char action; // 0 - Deny, 1 - Allow
	unsigned char local_ip[IP_ADDR_LEN];
	unsigned char remote_ip[IP_ADDR_LEN];
} __PACK__ MIB_CE_IP_FW_T, *MIB_CE_IP_FW_Tp;
#endif

#ifdef PORT_TRIGGERING
#define GAMING_MAX_RANGE 32
typedef struct porttrg_entry {
	unsigned char	name[32];		// name
	unsigned char	ip[IP_ADDR_LEN];
	unsigned char	tcpRange[GAMING_MAX_RANGE];
	unsigned char	udpRange[GAMING_MAX_RANGE];
	unsigned char	enable;			// enable
} __PACK__ MIB_CE_PORT_TRG_T, *MIB_CE_PORT_TRG_Tp;
#endif

#ifdef MAC_FILTER
typedef struct macfilter_entry {
	unsigned char action; // 0 - Deny, 1 - Allow
	//unsigned char macAddr[MAC_ADDR_LEN];
	unsigned char srcMac[MAC_ADDR_LEN];
	unsigned char dstMac[MAC_ADDR_LEN];
	unsigned char comment[COMMENT_LEN];
	// Added by Mason Yu for Incoming MAC filtering
	unsigned char dir;
} __PACK__ MIB_CE_MAC_FILTER_T, *MIB_CE_MAC_FILTER_Tp;
#endif

#ifdef CONFIG_USER_WT_146
#define BFD_MAX_KEY_LEN	20
/*bfd operation mode*/
#define BFD_ASYNC_MODE	0
#define BFD_DEMAND_MODE	1
/*bfd role*/
#define BFD_ACTIVE_ROLE		0
#define BFD_PASSIVE_ROLE	1
/*bfd auth type*/
#define BFD_AUTH_NONE		0
#define BFD_AUTH_PASSWORD	1
#define BFD_AUTH_MD5		2
#define BFD_AUTH_METI_MD5	3
#define BFD_AUTH_SHA1		4
#define BFD_AUTH_METI_SHA1	5
/*bfd auth key len*/
#define BFD_AUTH_PASS_MINKEYLEN	1
#define BFD_AUTH_PASS_MAXKEYLEN	16
#define BFD_AUTH_MD5_KEYLEN	16
#define BFD_AUTH_SHA1_KEYLEN	20
#endif //CONFIG_USER_WT_146

typedef struct atmvc_entry {
	unsigned int ifIndex;	// resv | media | ppp | vc
	unsigned char vpi;
	unsigned char qos;
	unsigned short vci;
	unsigned short pcr;
	unsigned short scr;
	unsigned short mbs;
	unsigned int cdvt;
	unsigned char encap;
	unsigned char napt;
	unsigned char cmode;
	unsigned char brmode;	// 0: transparent bridging, 1: PPPoE bridging
	unsigned char pppUsername[MAX_PPP_NAME_LEN+1];
	unsigned char pppPassword[MAX_NAME_LEN];
	unsigned char pppAuth;	// 0:AUTO, 1:PAP, 2:CHAP
	unsigned char pppACName[MAX_NAME_LEN];
	unsigned char pppServiceName[MAX_NAME_LEN];
	unsigned char pppCtype;
	unsigned short pppIdleTime;
#ifdef CONFIG_USER_IP_QOS
	unsigned char enableIpQos;
#endif
#ifdef CONFIG_IGMPPROXY_MULTIWAN
	unsigned char enableIGMP;
#endif
	unsigned char ipDhcp;
	unsigned char rip;
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char remoteIpAddr[IP_ADDR_LEN];
	unsigned char dgw;
	unsigned int mtu;
	unsigned char enable;
	unsigned char netMask[IP_ADDR_LEN];	// Jenny; Subnet mask
	unsigned char ipunnumbered;	// Jenny, unnumbered(1)
	unsigned char dnsMode;  // 1: enable, 0: disable
	unsigned char v4dns1[IP_ADDR_LEN];
	unsigned char v4dns2[IP_ADDR_LEN];
	// used for VLAN mapping
	unsigned char vlan;
	unsigned short vid;
	unsigned short vprio;	// 802.1p priority bits
	unsigned char vpass;	// vlan passthrough
	// used for interface group
	unsigned short itfGroup;
	unsigned short itfGroupNum;
	unsigned long cpePppIfIndex;   // Mason Yu. Remote Management
	unsigned long cpeIpIndex;      // Mason Yu. Remote Management

#ifdef _CWMP_MIB_ /*jiunming, for cwmp-tr069*/
	unsigned char connDisable; //0:enable, 1:disable
	unsigned int ConDevInstNum;
	unsigned int ConIPInstNum;
	unsigned int ConPPPInstNum;
	unsigned short autoDisTime;	// Jenny, TR-069 PPP AutoDisconnectTime
	unsigned short warnDisDelay;	// Jenny, TR-069 PPP WarnDisconnectDelay

#ifdef _PRMT_TR143_
	unsigned char TR143UDPEchoItf;
#endif //_PRMT_TR143_
#ifdef _PRMT_X_CT_COM_WANEXT_
	unsigned short ServiceList;
#endif //_PRMT_X_CT_COM_WANEXT_
#endif //_CWMP_MIB_
unsigned char WanName[MAX_NAME_LEN];	//Name of this wan connection
#ifdef CONFIG_USER_PPPOE_PROXY
	unsigned char PPPoEProxyEnable;
	unsigned int  PPPoEProxyMaxUser;
#endif //CONFIG_USER_PPPOE_PROXY
	unsigned int applicationtype;  //TR069(1), INTERNET(2), IPTV(4), VOICE(8)
	//char applicationname[MAX_NAME_LEN];
#ifdef CONFIG_SPPPD_STATICIP
	unsigned char pppIp;	// Jenny, static PPPoE
#endif
#ifdef CONFIG_USER_WT_146
	unsigned char	bfd_enable;
	unsigned char	bfd_opmode;
	unsigned char	bfd_role;
	unsigned int	bfd_mintxint;
	unsigned int	bfd_minrxint;
	unsigned int	bfd_minechorxint;
	unsigned char	bfd_detectmult;
	unsigned char	bfd_authtype;
	unsigned char	bfd_authkeyid;
	unsigned char	bfd_authkeylen;
	unsigned char	bfd_authkey[BFD_MAX_KEY_LEN];
	unsigned char	bfd_dscp;
	unsigned char	bfd_ethprio;
#endif //CONFIG_USER_WT_146

#ifdef CONFIG_IPV6
	unsigned char	IpProtocol;          // 1: IPv4, 2:IPv6, 3: IPv4 and IPv6
	unsigned char	AddrMode;            // Bitmap, bit0: Slaac, bit1: Static, bit2: DS-Lite , bit3: 6rd
	unsigned char Ipv6Addr[IP6_ADDR_LEN];
	unsigned char RemoteIpv6Addr[IP6_ADDR_LEN];
	unsigned char Ipv6AddrPrefixLen;
	unsigned char Ipv6Dhcp;            // 0: disable, 1: enable
	unsigned char	Ipv6DhcpRequest;     // Bitmap, bit0: Request Address, bit1: Request Prefix
	unsigned char RemoteIpv6EndPointAddr[IP6_ADDR_LEN];
	unsigned char Ipv6Dns1[IP6_ADDR_LEN];
	unsigned char Ipv6Dns2[IP6_ADDR_LEN];
#endif
    //6rd
#if defined(CONFIG_IPV6) && defined(CONFIG_IPV6_SIT_6RD)
	unsigned char SixrdBRv4IP[IP_ADDR_LEN];
	unsigned char SixrdIPv4MaskLen;
	unsigned char SixrdPrefix[IP6_ADDR_LEN];
	unsigned char SixrdPrefixLen;
#endif
	unsigned char MacAddr[MAC_ADDR_LEN];
#ifdef CONFIG_RTK_RG_INIT
	int rg_wan_idx;
#endif
#ifdef CONFIG_USER_DHCP_OPT_GUI_60
	unsigned char enable_opt_60;
	char opt60_val[40];
	unsigned char enable_opt_61;
	unsigned int iaid;
	unsigned char duid_type;	/* 1 ~ 3 */
	unsigned int duid_ent_num;	/* valid only if type is 2 */
	char duid_id[40]; /* valid only if type is 2 */
	unsigned char enable_opt_125;
	char manufacturer[40];
	char product_class[40];
	char model_name[40];
	char serial_num[40];
#endif
#if defined(CONFIG_IPV6) && defined(DUAL_STACK_LITE)
	unsigned char dslite_enable;
	unsigned char dslite_aftr_addr[IP6_ADDR_LEN];
	unsigned char dslite_aftr_hostname[128];
#endif
#ifdef CONFIG_TR142_MODULE
	unsigned char omci_configured;
	unsigned int omci_if_id;
#endif
} __PACK__ MIB_CE_ATM_VC_T, *MIB_CE_ATM_VC_Tp;

/*ping_zhang:20081217 START:patch from telefonica branch to support WT-107*/
#ifdef _PRMT_WT107_
#define RTF_EMPTY 0x0001 /*empty route new added by tr069*/
#endif

#ifdef ROUTING
/*ping_zhang:20081217 END*/
typedef struct iproute_entry {
	unsigned char destID[IP_ADDR_LEN]; // TR-069: DestIP
	unsigned char netMask[IP_ADDR_LEN]; // TR-069: DestMask
	unsigned char nextHop[IP_ADDR_LEN]; // TR-069: GatewayIP
//#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
	unsigned char Enable;
	unsigned char Type; /*0:network, 1:host, 2:default*/
	unsigned char SourceIP[IP_ADDR_LEN];
	unsigned char SourceMask[IP_ADDR_LEN];
	unsigned int ifIndex; // 0xff: no specific interface
	int	      FWMetric;
	unsigned int  InstanceNum;
/*ping_zhang:20081217 START:patch from telefonica branch to support WT-107*/
#ifdef _PRMT_WT107_
	unsigned char Flags;
#endif
#ifdef CONFIG_RTK_RG_INIT
	int rg_wan_idx;
#endif
/*ping_zhang:20081217 END*/
//#endif
} __PACK__ MIB_CE_IP_ROUTE_T, *MIB_CE_IP_ROUTE_Tp;
#endif

#ifdef CONFIG_DSL_VTUO
typedef struct vtuo_dpbo_entry
{
	unsigned short ToneId;
	short PsdLevel;
} __PACK__ MIB_CE_VTUO_DPBO_T, *MIB_CE_VTUO_DPBO_Tp;

typedef struct vtuo_psd_entry
{
	unsigned short ToneId;
	short PsdLevel;
} __PACK__ MIB_CE_VTUO_PSD_T, *MIB_CE_VTUO_PSD_Tp;
/*
typedef struct vtuo_vn_entry
{
	unsigned short ToneId;
	short NoiseLevel;
} __PACK__ MIB_CE_VTUO_VN_T, *MIB_CE_VTUO_VN_Tp;

typedef struct vtuo_rfi_entry
{
	unsigned short ToneId;
	unsigned short ToneIdEnd;
} __PACK__ MIB_CE_VTUO_RFI_T, *MIB_CE_VTUO_RFI_Tp;
*/
#endif /*CONFIG_DSL_VTUO*/

#ifdef CONFIG_USER_DOT1AG_UTILS
typedef struct dot1ag_entry
{
	unsigned int ifIndex;
	char md_name[44];		//Maximum length is 43 chars
	unsigned char md_level;	// 0~7
	char ma_name[44];		//Maximum length is 43 chars
	unsigned short mep_id;
	unsigned char ccm_enable;
	unsigned int ccm_interval;
} __PACK__ MIB_CE_DOT1AG_T, *MIB_CE_DOT1AG_Tp;
#endif

#ifdef CONFIG_IPV6
typedef struct ipv6route_entry {
	unsigned char Dstination[MAX_V6_IP_LEN];
	unsigned char NextHop[MAX_V6_IP_LEN];
	unsigned char Enable;
	unsigned char Type; /*0:network, 1:host, 2:default*/
	unsigned char SourceIP[MAX_V6_IP_LEN];
	unsigned int  DstIfIndex; // 0xff: no specific interface
	unsigned int  SrcIfIndex; // 0xff: no specific interface
	int			  FWMetric;
	unsigned int  Mtu;
	unsigned int  InstanceNum;
} __PACK__ MIB_CE_IPV6_ROUTE_T, *MIB_CE_IPV6_ROUTE_Tp;
#endif

#ifdef CONFIG_EPON_FEATURE
typedef struct epon_llid_entry {
	unsigned char macAddr[MAC_ADDR_LEN];
} __PACK__ MIB_CE_MIB_EPON_LLID_T, *MIB_CE_MIB_EPON_LLID_Tp;
#endif

#ifdef IP_ACL
typedef struct aclip_entry {
#ifdef ACL_IP_RANGE
	unsigned char startipAddr[IP_ADDR_LEN];
	unsigned char endipAddr[IP_ADDR_LEN];
#endif
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char maskbit;
	unsigned char Enabled;
	unsigned char Interface;
	// Add service, that is the same as acc_entry
	unsigned char any;
	unsigned char telnet;
	unsigned char ftp;
	unsigned char tftp;
	unsigned char web;
	unsigned char snmp;
	unsigned char ssh;
	unsigned char icmp;	
	//unsigned char nop; // added for alignment
	unsigned short telnet_port;
	unsigned short web_port;
	unsigned short ftp_port;
	unsigned char https;
	unsigned short https_port;
} __PACK__ MIB_CE_ACL_IP_T, *MIB_CE_ACL_IP_Tp;
#endif

//ql_xu add:
#ifdef MAC_ACL
typedef struct aclmac_entry {
	unsigned char macAddr[MAC_ADDR_LEN];
	unsigned char Enabled;
	unsigned char Interface;
} __PACK__ MIB_CE_ACL_MAC_T, *MIB_CE_ACL_MAC_Tp;
#endif
#ifdef NAT_CONN_LIMIT
typedef struct connlimit_entry {
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char Enabled;
	unsigned int connNum;
} __PACK__ MIB_CE_CONN_LIMIT_T, *MIB_CE_CONN_LIMIT_Tp;
#endif
#ifdef TCP_UDP_CONN_LIMIT
typedef struct tcp_udp_connlimit_entry {
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char Enabled;
	unsigned char protocol;	//0: TCP, 1:UDP
	unsigned int connNum;
} __PACK__ MIB_CE_TCP_UDP_CONN_LIMIT_T, *MIB_CE_TCP_UDP_CONN_LIMIT_Tp;
#endif // TCP_UDP_CONN_LIMIT

typedef struct multi_addr_mapping_entry {
	unsigned char addressMapType; //
	unsigned char lsip[IP_ADDR_LEN];
	unsigned char leip[IP_ADDR_LEN];
	unsigned char gsip[IP_ADDR_LEN];
	unsigned char geip[IP_ADDR_LEN];
} __PACK__ MIB_CE_MULTI_ADDR_MAPPING_LIMIT_T, *MIB_CE_MULTI_ADDR_MAPPING_LIMIT_Tp;

#ifdef URL_BLOCKING_SUPPORT
typedef struct urlfqdn_entry {
	unsigned char fqdn[MAX_URL_LENGTH];
} __PACK__ MIB_CE_URL_FQDN_T, *MIB_CE_URL_FQDN_Tp;

typedef struct keywdfilter_entry {
	unsigned char keyword[MAX_KEYWD_LENGTH];
} __PACK__ MIB_CE_KEYWD_FILTER_T, *MIB_CE_KEYWD_FILTER_Tp;
#endif

#ifdef URL_ALLOWING_SUPPORT
typedef struct urlalwfqdn_entry {
	unsigned char fqdn[MAX_URL_LENGTH];
} __PACK__ MIB_CE_URL_ALLOW_FQDN_T, *MIB_CE_URL_ALLOW_FQDN_Tp;
#endif

#ifdef DOMAIN_BLOCKING_SUPPORT
typedef struct domainblk_entry {
	unsigned char domain[MAX_DOMAIN_LENGTH];
} __PACK__ MIB_CE_DOMAIN_BLOCKING_T, *MIB_CE_DOMAIN_BLOCKING_Tp;
#endif

typedef struct rip_entry {
	unsigned int ifIndex;
	unsigned char receiveMode;
	unsigned char sendMode;
} __PACK__ MIB_CE_RIP_T, *MIB_CE_RIP_Tp;

#ifdef CONFIG_USER_ZEBRA_OSPFD_OSPFD
typedef struct ospf_entry {
	unsigned char ipAddr[IP_ADDR_LEN];
	unsigned char netMask[IP_ADDR_LEN];
} __PACK__ MIB_CE_OSPF_T, *MIB_CE_OSPF_Tp;
#endif

// Mason Yu. 201009_new_security
#ifdef WLAN_SUPPORT
typedef struct mbssid_entry {
	unsigned char idx;              // 0:root AP, 1: vap0, 2:vap1, 3:vap2, 4: vap3, 5: repeater
	unsigned char encrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char enable1X; // enable/disable 802.1x
	unsigned char wep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wpaAuth; // WPA authentication type (auto or psk)
	unsigned char wpaPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned long wpaGroupRekeyTime;
	unsigned short rsPort; // radius server port number
	unsigned char rsIpAddr[IP_ADDR_LEN]; // radius server IP address
	unsigned char rsPassword[MAX_PSK_LEN+1]; // radius server password
	unsigned char wlanDisabled; // enabled/disabled wlan(include VAP0~3) interface. 0:enable, 1:disable
	unsigned char ssid[MAX_SSID_LEN]; // SSID
	unsigned char wlanMode; // wireless mode - AP, Ethernet bridge
	unsigned char authType; // authentication type, 0 - open-system, 1 - shared-key, 2 - both
#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
	/*for root ap, ssid and authType is not used => use MIB_WLAN_SSID and MIB_WLAN_AUTH_TYPE*/
	unsigned char cwmp_WLAN_BasicEncry; /*0:none, 1:Wep*/
#endif
	//added by xl_yue:for supporting WPA(AES) and WPA(TKIP)
	// Mason Yu. 201009_new_security
	unsigned char unicastCipher;	// 1: TKIP, 2: AES, 3: both
	unsigned char wpa2UnicastCipher;	// 1: TKIP, 2: AES, 3: both
	unsigned char bcnAdvtisement; //0: ap does not send out beacons, 1: ap sends out beacons
	unsigned char hidessid; //0: beacon include the SSID name, 1: beacon does not include the SSID name
	unsigned char userisolation; //user isolation

#ifdef CONFIG_RTL_WAPI_SUPPORT
	unsigned char wapiPsk[MAX_PSK_LEN+1]; //password
	unsigned char wapiPskLen; //password
	unsigned char wapiAuth;//0:AS 1:pre-shared key
	unsigned char wapiPskFormat; // WAPI unicast cipher suite
	unsigned char wapiAsIpAddr[4]; // as server IP address
	//unsigned char wapiMcastkey; //0:time 1 packets
	//unsigned long wapiMcastRekeyTime; // 300 -31536000
	//unsigned long wapiMcastRekeyPackets; //1048576
	//unsigned char wapiUcastkey; //0:time 1 packets
	//unsigned long wapiUcastRekeyTime; // 300 -31536000
	//unsigned long wapiUcastRekeyPackets; //1048576//internal use
	//unsigned char wapiSearchCertInfo[32]; //search info
	//unsigned char wapiSearchIndex; // search type index
	//unsigned char wapiCAInit; //init CA
#endif

	// Mason Yu. 201009_new_security
	unsigned char wepKeyType;                     // 1:Hex, 0:ASCII(Key Format)
	unsigned char wepDefaultKey;
	unsigned char wep64Key1[WEP64_KEY_LEN+1];     // 3131313131: key is 11111
	unsigned char wep64Key2[WEP64_KEY_LEN+1];
	unsigned char wep64Key3[WEP64_KEY_LEN+1];
	unsigned char wep64Key4[WEP64_KEY_LEN+1];
	unsigned char wep128Key1[WEP128_KEY_LEN+1];
	unsigned char wep128Key2[WEP128_KEY_LEN+1];
	unsigned char wep128Key3[WEP128_KEY_LEN+1];
	unsigned char wep128Key4[WEP128_KEY_LEN+1];
	unsigned char wmmEnabled;
	unsigned char rateAdaptiveEnabled; // enable/disable rate adaptive
	unsigned char wlanBand; // wlan band, bit0-11B, bit1-11G, bit2-11A
	unsigned int fixedTxRate;

#ifdef CONFIG_WIFI_SIMPLE_CONFIG
	unsigned char wsc_disabled;
	unsigned char wsc_configured;
	unsigned char wsc_upnp_enabled;
	unsigned char wsc_auth;
	unsigned char wsc_enc;
	unsigned char wscPsk[MAX_PSK_LEN+1];
#endif

#ifdef CONFIG_USB_RTL8187SU_SOFTAP
	unsigned short mlcstRate;	// for multicast rate setting, 0:auto, bit 0-11 setting is same as fixedTxRate
#endif

#ifdef WLAN_11W
	unsigned char dotIEEE80211W;
	unsigned char sha256;
#endif
#ifdef WLAN_11R
	char ft_enable;
	unsigned char ft_mdid[5];
	char ft_over_ds;
	char ft_res_request;
	int ft_r0key_timeout;
	int ft_reasoc_timeout;
	unsigned char ft_r0kh_id[49];
	char ft_push;
	char ft_kh_num;
#endif
#ifdef WLAN_LIMITED_STA_NUM
	unsigned int stanum;
#endif
} __PACK__ MIB_CE_MBSSIB_T, *MIB_CE_MBSSIB_Tp;

typedef struct mbssid_wep_entry {
	unsigned char wep64Key1[WEP64_KEY_LEN+1];    // 3131313131: key is 11111
	unsigned char wep64Key2[WEP64_KEY_LEN+1];    // 3232323232: key is 22222
	unsigned char wep64Key3[WEP64_KEY_LEN+1];    // 3333333333: key is 33333
	unsigned char wep64Key4[WEP64_KEY_LEN+1];    // 3434343434: key is 44444
	unsigned char wep128Key1[WEP128_KEY_LEN+1];
	unsigned char wep128Key2[WEP128_KEY_LEN+1];
	unsigned char wep128Key3[WEP128_KEY_LEN+1];
	unsigned char wep128Key4[WEP128_KEY_LEN+1];
	unsigned char wepDefaultKey;                  // 0:key1, 1:key2, 2:key3, 3:key4
	unsigned char wepKeyType;                     // 1:Hex, 0:ASCII
} __PACK__ MIB_CE_MBSSIB_WEP_T, *MIB_CE_MBSSIB_WEP_Tp;

#ifdef WLAN_ACL
typedef struct wlac_entry {
	unsigned char wlanIdx;
	unsigned char macAddr[MAC_ADDR_LEN];
	//unsigned char comment[COMMENT_LEN];
} __PACK__ MIB_CE_WLAN_AC_T, *MIB_CE_WLAN_AC_Tp;
#endif

#ifdef WLAN_11R
typedef struct wlftkh_entry {
	unsigned char wlanIdx;
	unsigned char intfIdx;
	unsigned char addr[6];
	unsigned char r0kh_id[49];
	unsigned char key[33];
} __PACK__ MIB_CE_WLAN_FTKH_T, *MIB_CE_WLAN_FTKH_Tp;
#endif
#endif // of WLAN_SUPPORT

// Mason Yu. combine_1p_4p_PortMapping
typedef struct swport_entry {
	// used for Ethernet to PVC mapping
	unsigned int pvcItf;
	unsigned char itfGroup;
	// used for VLAN config
	unsigned char pvid;
	// used for Link Mode setting
	unsigned char linkMode;	// 10/100 half/full
	// used for VLAN on LAN
	unsigned char vlan_on_lan_enabled;
	unsigned char vlan_on_lan_itfGroup;
	unsigned short vid;
} __PACK__ MIB_CE_SW_PORT_T, *MIB_CE_SW_PORT_Tp;

//ql 20081119 for traffic shaping
#ifdef CONFIG_USER_IP_QOS
typedef struct ipqos_tc_entry {
	unsigned char  entryid    ;// id of this rules
	unsigned int   ifIndex    ;
	unsigned char  srcip[IP_ADDR_LEN];
	unsigned char  smaskbits  ;//source subnetmask bit number,default 0
	unsigned char  dstip[IP_ADDR_LEN];
	unsigned char  dmaskbits  ;
	unsigned short sport      ;
	unsigned short dport      ;
	unsigned char  protoType  ;//0-none, 1-ICMP, 2-TCP, 3-UDP, 4-TCP/UDP
	unsigned int   limitSpeed ;
#ifdef BR_ROUTE_ONEPVC
	unsigned char cmode;
#endif
#ifdef CONFIG_IPV6
	unsigned char	IpProtocol;          // 1: IPv4, 2:IPv6
	unsigned char 	sip6[IP6_ADDR_LEN];
	unsigned char 	dip6[IP6_ADDR_LEN];
	unsigned char 	sip6PrefixLen;
	unsigned char 	dip6PrefixLen;
#endif
	unsigned char	direction;	//QOS_DIRECTION_T
	unsigned int	vlanID;
	unsigned char	ssid[MAX_SSID_LEN]; 
} __PACK__ MIB_CE_IP_TC_T, *MIB_CE_IP_TC_Tp;
#endif

#define EXC_DESTIP		0x0001
#define EXC_SOURCEIP 	0x0002
#define EXC_PROTOCOL 	0x0004
#define EXC_DESTPORT	0x0008
#define EXC_SOURCEPORT 	0x0010
#define EXC_SOURCEMAC 	0x0020
#define EXC_DESTMAC 		0x0040
#define EXC_DSCP 		0x0080
#define EXC_ETHERNETPRIORITY 0x0100
#define EXC_VLANID		0x0200
/* set Classification.1.ClassInterface to wan interface. */
#define INGRESS_IS_WAN	0x8000
/* set ClassInterface to empty string.*/
#define INGRESS_IS_ALL	0x4000

typedef struct ipqos_entry {
	unsigned char ipqos_rule_type;
    unsigned char RuleName[16]  ;
	unsigned char sip[IP_ADDR_LEN];
	unsigned char smaskbit;
	unsigned short sPort;
	unsigned short sPortRangeMax;	// 0x0 or sPort ~ sPortRangeMax
	unsigned char dip[IP_ADDR_LEN];
	unsigned char dmaskbit;
	unsigned short dPort;
	unsigned short dPortRangeMax;	// 0x0 or dPort ~ dPortRangeMax
	unsigned short ethType;			// Ethernet Type: 0x0800, 0x8863, 0x8864, .....
	unsigned char protoType;
	unsigned char smac[MAC_ADDR_LEN];
	unsigned char dmac[MAC_ADDR_LEN];
	unsigned char phyPort;
//#ifdef NEW_IP_QOS_SUPPORT
//#if defined(NEW_IP_QOS_SUPPORT) || defined(QOS_DIFFSERV)
#if defined(CONFIG_USER_IP_QOS) || defined(QOS_DIFFSERV)
	unsigned char qosDscp;//ql stream based on DSCP
#endif
//#ifdef NEW_IP_QOS_SUPPORT
#ifdef CONFIG_USER_IP_QOS
	unsigned char vlan1p;	//ql stream based on 802.1p
	unsigned char tos;
#endif
	unsigned int outif;	// outbound interface
	unsigned char prior;	// assign to priority queue
#ifdef QOS_DSCP
	unsigned char dscp;	// Jenny, DSCP enable flag: 1: DSCP, 0: TOS
#endif
	unsigned char m_ipprio;	// mark IP precedence
	unsigned char m_iptos;	// mark IP Type of Service
	unsigned short m_vid; //VLAN ID, 1~4095
	unsigned char m_1p;	// mark 802.1p: 0: none, 1: prio 0, 2: prio 1, ...
//#ifdef NEW_IP_QOS_SUPPORT
#ifdef CONFIG_USER_IP_QOS
	unsigned char m_dscp;//ql
#endif
	unsigned char enable;
#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
	unsigned int  InstanceNum;
#endif

#ifdef QOS_SPEED_LIMIT_SUPPORT
	unsigned char limitSpeedEnabled;
	unsigned char limitSpeedRank;//rank more little,speed more high
#endif
#ifdef QOS_DIFFSERV
	unsigned int ifIndex;
	unsigned char enDiffserv;	// for diffserv chain if this flag is set to 1
	unsigned short totalBandwidth;
	unsigned short htbRate;	// bandwidth division rate for HTB
	unsigned int latency ;
	unsigned int limitSpeed ;	// police rate limit
	unsigned char policing;	// 1:drop; 2:continue
#endif
	unsigned short flags;		// TR069 flags used for whether the member is exclude or not
#ifdef BR_ROUTE_ONEPVC
	unsigned char cmode;
#endif
#ifdef CONFIG_IPV6
	unsigned char	IpProtocol;          // 1: IPv4, 2:IPv6
	unsigned char 	sip6[IP6_ADDR_LEN];
	unsigned char 	dip6[IP6_ADDR_LEN];
	unsigned char 	sip6PrefixLen;
	unsigned char 	dip6PrefixLen;
#endif
#ifdef CONFIG_BRIDGE_EBT_DHCP_OPT
	unsigned char dhcpopt_type;
	char opt60_vendorclass[32];
	unsigned int opt61_iaid;		//IAID
	unsigned char opt61_duid_type;	//DUID type 1, 2 or 3
	unsigned short duid_hw_type;	//for type 1 and 3
	char duid_mac[MAC_ADDR_LEN];	//for type 1 and 3
	unsigned int duid_time;		//for type 1
	unsigned int duid_ent_num;		//for type 2
	char duid_ent_id[32];	//for type 2
	unsigned int opt125_ent_num;
	char opt125_manufacturer[32];
	char opt125_product_class[32];
	char opt125_model[32];
	char opt125_serial[32];
#endif
} __PACK__ MIB_CE_IP_QOS_T, *MIB_CE_IP_QOS_Tp;

#ifdef QOS_SPEED_LIMIT_SUPPORT
typedef struct ipqos_speedrank_entry{
	unsigned char index;
	unsigned char prior;
	unsigned char speed;
	unsigned char count;
} __PACK__ MIB_CE_IP_QOS_SPEEDRANK_T,MIB_CE_IP_QOS_SPEEDRANK_Tp;
#endif
typedef struct ipqos_queue_entry {
	unsigned int outif;	// outbound interface
	unsigned char prior;	// assign to priority queue
	unsigned char weight;
	unsigned char enable;	// enable/disable this queue
	unsigned char desc[MAX_QUEUE_DESC_LEN]; // string of description
//#ifdef _CWMP_MIB_ /*mib for cwmp-tr069*/
	unsigned int QueueInstNum;
//#endif
} __PACK__ MIB_CE_IP_QOS_QUEUE_T, *MIB_CE_IP_QOS_QUEUE_Tp;

#ifdef REMOTE_ACCESS_CTL
typedef struct acc_entry {
	unsigned char telnet;
	unsigned char ftp;
	unsigned char tftp;
	unsigned char web;
	unsigned char snmp;
	unsigned char ssh;
	unsigned char icmp;
	unsigned char netlog;
	//unsigned char nop; // added for alignment
	unsigned short telnet_port;
	unsigned short web_port;
	unsigned short ftp_port;
	unsigned char https;
	unsigned short https_port;
} __PACK__ MIB_CE_ACC_T, *MIB_CE_ACC_Tp;
#endif

#ifdef _CWMP_MIB_ /*jiunming, mib for cwmp-tr069*/
#ifdef WLAN_SUPPORT
typedef struct cwmp_psk {
	unsigned char index;
	unsigned char presharedkey[64+1];
	unsigned char keypassphrase[63+1];
} __PACK__ CWMP_PSK_T, *CWMP_PSK_Tp;
#endif /*WLAN_SUPPORT*/
#endif /*_CWMP_MIB_*/

// Added by Mason Yu
typedef struct macBaseDhcp_entry {
	unsigned char macAddr_Dhcp[MAC_ADDR_LEN];
	unsigned char ipAddr_Dhcp[IP_ADDR_LEN];
} __PACK__ MIB_CE_MAC_BASE_DHCP_T, *MIB_CE_MAC_BASE_DHCP_Tp;

// add for auto-pvc-search
typedef struct AutoPvcSearch_entry{
	unsigned short vpi;
	unsigned int vci;
} __PACK__ MIB_AUTO_PVC_SEARCH_T, *MIB_AUTO_PVC_SEARCH_Tp;

// Added by Mason Yu
typedef struct ddns_entry {
	unsigned char provider[10];
	unsigned char hostname[35];
	unsigned char interface[10];
	unsigned char username[35];
	unsigned char password[35];
	unsigned char Enabled;
 	unsigned int  InstanceNum;
 	unsigned short ServicePort;

} __PACK__ MIB_CE_DDNS_T, *MIB_CE_DDNS_Tp;

// Jenny, add for PPPoE session information
typedef struct pppoeSession_entry {
	unsigned int  uifno;
	unsigned short sessionId;
	unsigned char acMac[MAC_ADDR_LEN];
} __PACK__ MIB_CE_PPPOE_SESSION_T, *MIB_CE_PPPOE_SESSION_Tp;

#ifdef ACCOUNT_CONFIG
// Jenny, add for user account information
typedef struct accountConfig_entry {
	unsigned char userName[MAX_NAME_LEN];	// user name
	unsigned char userPassword[MAX_NAME_LEN];	// user password
	unsigned char privilege;	// account privilege, refer to ACC_PRIV_T
} __PACK__ MIB_CE_ACCOUNT_CONFIG_T, *MIB_CE_ACCOUNT_CONFIG_Tp;
#endif

#ifdef LAYER7_FILTER_SUPPORT //star: for layer7 filter
#define MAX_APP_NAME  20
typedef struct layer7_entry{
	unsigned char appname[MAX_APP_NAME];
}LAYER7_FILTER_T,*LAYER7_FILTER_Tp;

#endif

/*ping_zhang:20080919 START:add for new telefonica tr069 request: dhcp option*/
#ifdef _PRMT_X_TELEFONICA_ES_DHCPOPTION_
#define MODE_LEN  15
#define OPTION_LEN   32
/*ping_zhang:20090319 START:replace ip range with serving pool of tr069*/
#define OPTION_60_LEN   100
/*ping_zhang:20090319 END*/
#define GENERAL_LEN  64
typedef struct dhcp_serving_pool {
	//general
	unsigned char enable;
	unsigned int poolorder;
	unsigned char poolname[MAX_NAME_LEN];
/*ping_zhang:20090319 START:replace ip range with serving pool of tr069*/
	unsigned char deviceType;
	unsigned char rsvOptCode;
/*ping_zhang:20090319 END*/
	//criterion
	unsigned char sourceinterface;  // 0:ignore, bit0: LAN1, bit1:LAN2, bit2:LAN3, bit3:LAN4, bit4:WLAN0
/*ping_zhang:20090319 START:replace ip range with serving pool of tr069*/
	//unsigned char vendorclass[OPTION_LEN];
	unsigned char vendorclass[OPTION_60_LEN+1];
/*ping_zhang:20090319 END*/
	unsigned char vendorclassflag;
	unsigned char vendorclassmode[MODE_LEN];
	unsigned char clientid[OPTION_LEN];
	unsigned char clientidflag;
	unsigned char userclass[OPTION_LEN];
	unsigned char userclassflag;
	unsigned char chaddr[MAC_ADDR_LEN];
	unsigned char chaddrmask[MAC_ADDR_LEN];
	unsigned char chaddrflag;
	//config
	unsigned char localserved;
	unsigned char startaddr[IP_ADDR_LEN];
	unsigned char endaddr[IP_ADDR_LEN];
	unsigned char subnetmask[IP_ADDR_LEN];
	unsigned char iprouter[IP_ADDR_LEN];
	unsigned char dnsserver1[IP_ADDR_LEN];
	unsigned char dnsserver2[IP_ADDR_LEN];
	unsigned char dnsserver3[IP_ADDR_LEN];
	unsigned char domainname[GENERAL_LEN];
	int leasetime;
	unsigned char dhcprelayip[IP_ADDR_LEN];
	unsigned char dnsservermode;

#ifdef _CWMP_MIB_
	unsigned int  InstanceNum;
#endif

} __PACK__ DHCPS_SERVING_POOL_T,*DHCPS_SERVING_POOL_Tp;
#endif
/*ping_zhang:20080919 END*/

#ifdef PARENTAL_CTRL
#define MAX_PARENTCTRL_USER_LEN 32
#define MAX_PARENTCTRL_USER_NUM 16
#define SUNDAY 		(1<<0)
#define MONDAY 		(1<<1)
#define TUESDAY 		(1<<2)
#define WEDNESSDAY (1<<3)
#define THURSDAY 	(1<<4)
#define FRIDAY 		(1<<5)
#define SATURDAY 	(1<<6)
typedef struct parentctrl_entry {
	unsigned char username[MAX_PARENTCTRL_USER_LEN];
	unsigned char specfiedPC;  // 0: IP , 1: MAC
	unsigned char mac[MAC_ADDR_LEN];
	unsigned char sip[IP_ADDR_LEN];
	unsigned char eip[IP_ADDR_LEN];
	unsigned char controlled_day;
	unsigned char start_hr;
	unsigned char start_min;
	unsigned char end_hr;
	unsigned char end_min;
	unsigned char cur_state;
} __PACK__ MIB_PARENT_CTRL_T, *MIB_PARENT_CTRL_Tp;

#endif


#ifdef WEB_REDIRECT_BY_MAC
#define MAX_WEB_REDIR_BY_MAC		16
#define WEB_REDIR_BY_MAC_PORT		18080
typedef struct WebRedirByMAC_entry{
	unsigned char mac[MAC_ADDR_LEN];
} __PACK__ MIB_WEB_REDIR_BY_MAC_T, *MIB_WEB_REDIR_BY_MAC_Tp;
#endif

#ifdef _SUPPORT_CAPTIVEPORTAL_PROFILE_
#define MAX_ALLOWED_LIST 500
#define CAPTIVEPORTAL_PORT 18182
#define CP_MASK_DONOT_CARE 0xFF

typedef struct CaptivePortalAllowedList_entry
{
	unsigned char ip_addr[IP_ADDR_LEN];
	unsigned char mask;
} __PACK__ CWMP_CAPTIVEPORTAL_ALLOWED_LIST_T, *CWMP_CAPTIVEPORTAL_ALLOWED_LIST_Tp;
#endif

#ifdef WLAN_QoS
typedef struct wlan_qos_entry {
	unsigned int txop;
	unsigned int ecwmax;
	unsigned int ecwmin;
	unsigned int aifsn;
	unsigned int ack;
} __PACK__ MIB_WLAN_QOS_T, *MIB_WLAN_QOS_Tp;
#endif // WLAN_QoS

#ifdef SUPPORT_DHCP_RESERVED_IPADDR
typedef struct dhcp_reserved_ipaddr_entry {
	unsigned int InstanceNum;//0:for default dhcp server, others: the same num with conditional pool's instance number
	unsigned char IPAddr[IP_ADDR_LEN];//reserved ip address
} __PACK__ MIB_DHCP_RESERVED_IPADDR_T, *MIB_DHCP_RESERVED_IPADDR_Tp;
#endif //SUPPORT_DHCP_RESERVED_IPADDR

#ifdef CONFIG_USER_PPPOMODEM
#define NO_PINCODE ((unsigned short)-1)
typedef struct wan_3g_entry {
	unsigned char enable;
	unsigned char auth; //PPP_AUTH_T
	unsigned char ctype; //PPP_CONNECT_TYPE_T
	unsigned char napt;
	unsigned short pin;
	unsigned short idletime;
	unsigned short mtu;
	unsigned char dgw;
	unsigned char apn[MAX_PPP_NAME_LEN+1];
	unsigned char dial[16+1];
	unsigned char username[MAX_PPP_NAME_LEN+1];
	unsigned char password[MAX_NAME_LEN];
	//paula, 3g backup PPP
	unsigned char backup;
	unsigned short backup_timer;
} __PACK__ MIB_WAN_3G_T, *MIB_WAN_3G_Tp;
#endif //CONFIG_USER_PPPOMODEM

#ifdef CONFIG_USER_MINIDLNA
#define DIR_MAX_LENGTH 63
typedef struct dms_entry {
	unsigned char enable;
	unsigned char directory[DIR_MAX_LENGTH+1];
} __PACK__ MIB_DMS_T, *MIB_DMS_Tp;
#endif

#ifdef CONFIG_IPV6
#ifdef CONFIG_USER_DHCPV6_ISC_DHCP411
typedef struct name_server_entry {
	unsigned char nameServer[MAX_V6_IP_LEN];
} __PACK__ MIB_DHCPV6S_NAME_SERVER_T, *MIB_DHCPV6S_NAME_SERVER_Tp;

typedef struct domain_search_entry {
	unsigned char domain[MAX_DOMAIN_LENGTH];
} __PACK__ MIB_DHCPV6S_DOMAIN_SEARCH_T, *MIB_DHCPV6S_DOMAIN_SEARCH_Tp;

#endif
#endif

#if defined(CONFIG_USER_L2TPD_LNS) || defined(CONFIG_USER_PPTPD_PPTPD)
enum VPN_TYPE {
	VPN_PPTP,	//pptp
	VPN_L2TP	//l2tp
};

typedef struct vpnd_entry {
	unsigned char type;	//0-PPTP  1-L2TP
	unsigned char authtype;//0-auto; 1-pap; 2-chap; 3-chapmsv2
	unsigned char enctype;//0-none; 1-MPPE; 2-MPPE&MPPC
#ifdef CONFIG_USER_L2TPD_LNS
	unsigned char tunnel_auth;//0- tunnel without auth 1-tunnel with auth
	unsigned char tunnel_key[MAX_NAME_LEN];
#endif
	unsigned int  peeraddr;
	unsigned int  localaddr;
} __PACK__ MIB_VPND_T, *MIB_VPND_Tp;

typedef struct vpn_account_entry {
	unsigned int  idx;//rule index
	unsigned char type;
	unsigned char enable;//0-disable account  1-enable account
	unsigned char name[MAX_NAME_LEN];
	unsigned char username[MAX_NAME_LEN];
	unsigned char password[MAX_NAME_LEN];
} __PACK__ MIB_VPN_ACCOUNT_T, *MIB_VPN_ACCOUNT_Tp;
#endif

#ifdef CONFIG_USER_PPTP_CLIENT_PPTP
typedef struct pptp_entry {
	unsigned int idx;	//rule index
	unsigned int ifIndex;		// Mason Yu. Add VPN ifIndex
#ifdef CONFIG_USER_PPTPD_PPTPD
	unsigned char name[MAX_NAME_LEN];
#endif
	unsigned char server[MAX_DOMAIN_LENGTH];
	unsigned char username[MAX_NAME_LEN];
	unsigned char password[MAX_NAME_LEN];
	unsigned char authtype;//0-auto; 1-pap; 2-chap; 3-chapmsv2
    unsigned char enctype;//0-none; 1-MPPE; 2-MPPE&MPPC
	unsigned char dgw;	// 1-default gateway
#ifdef CONFIG_IPV6_VPN
	unsigned char IpProtocol; 		 // 1: IPv4, 2: IPv6
#endif
#ifdef CONFIG_RTK_RG_INIT
	unsigned short callid; 		//client CallID
	unsigned short peer_callid; //gateway CallID
	unsigned int rg_wan_idx;
#endif
} __PACK__ MIB_PPTP_T, *MIB_PPTP_Tp;
#endif //end of CONFIG_USER_PPTP_CLIENT_PPTP

#ifdef CONFIG_USER_L2TPD_L2TPD
typedef struct l2tp_entry {
	unsigned int idx;	//rule index
	unsigned int ifIndex;		// Mason Yu. Add VPN ifIndex
#ifdef CONFIG_USER_L2TPD_LNS
	unsigned char name[MAX_NAME_LEN];
#endif
	unsigned char server[MAX_DOMAIN_LENGTH];	//server address
	unsigned char tunnel_auth;
	unsigned char secret[MAX_NAME_LEN];
	unsigned char authtype;//0-auto; 1-pap; 2-chap; 3-chapmsv2
	unsigned char enctype; //
	unsigned char username[MAX_NAME_LEN];
	unsigned char password[MAX_NAME_LEN];
	unsigned char conntype;//0-persistent; 1-dial_on_demand; 2-manual; 3-none
	unsigned int idletime;
	unsigned int mtu;
	unsigned char dgw;
#ifdef CONFIG_IPV6_VPN
	unsigned char IpProtocol; 		 // 1: IPv4, 2: IPv6
#endif
#ifdef CONFIG_RTK_RG_INIT
	unsigned int rg_wan_idx;
	unsigned short outer_port;
	unsigned short tunnel_id;
	unsigned short session_id;
	unsigned short gateway_outer_port;
	unsigned short gateway_tunnel_id;
	unsigned short gateway_session_id;
#endif
} __PACK__ MIB_L2TP_T, *MIB_L2TP_Tp;
#endif //end of CONFIG_USER_L2TPD_L2TPD

#ifdef CONFIG_XFRM
typedef struct ipsec_entry {
	unsigned char enable;	 //0-disable; 1-enable;
	unsigned char state;
	unsigned char transportMode; //0-tunnel; 1-transport;
	unsigned char negotiationType;	 //0-IKE; 1-manual;
	unsigned char remoteTunnel[IP_ADDR_LEN];
	unsigned char remoteIP[IP_ADDR_LEN];
	unsigned char remoteMask;
	unsigned char localTunnel[IP_ADDR_LEN];
	unsigned char localIP[IP_ADDR_LEN];
	unsigned char localMask;
	unsigned char encapMode; //1-esp; 2-ah; 3-esp+ah;
	unsigned char filterProtocol;	//0-any; 1-TCP; 2-UDP; 3-ICMP;
	unsigned int filterPort;

	//for manual
	unsigned char espEncrypt; //esp encryption algorithm
	unsigned char espEncryptKey[60];  //esp encryption key
	unsigned char espAuth; //esp authentication algorithm
	unsigned char espAuthKey[60];  //esp authentication key
	unsigned char ahAuth; //ah authentication algorithm
	unsigned char ahAuthKey[60];  //ah authentication key
	unsigned int espINSPI;
	unsigned int espOUTSPI;
	unsigned int ahINSPI;
	unsigned int ahOUTSPI;

	//for ike
	unsigned char ikeMode; //0-main; 1-aggressive;
	unsigned char psk[130];
	unsigned char ikeProposal[4];
	unsigned char saProposal[4];
	unsigned int ikeAliveTime;
	unsigned int saAliveTime;
	unsigned int saAliveByte;
} __PACK__ MIB_IPSEC_T, *MIB_IPSEC_Tp;
#endif


#ifdef CONFIG_NET_IPIP
typedef struct ipip_entry {
	unsigned int idx;
	unsigned int ifIndex;		// Mason Yu. Add VPN ifIndex
	unsigned int daddr;
	unsigned int saddr;
	unsigned char dgw;
} __PACK__ MIB_IPIP_T, *MIB_IPIP_Tp;
#endif//endof CONFIG_NET_IPIP

#ifdef OSGI_SUPPORT
typedef struct osgi_bundle_entry
{
	unsigned int bundle_id;
	char bundle_name[128];
	char bundle_file[128];
	unsigned int bundle_action; //0:stop, 1:resolve, 2:installed, 3:active
} __PACK__ MIB_CE_OSGI_BUNDLE_T, *MIB_CE_OSGI_BUNDLE_Tp;
#endif

#ifdef CONFIG_CWMP_TRANSFER_QUEUE
typedef struct cwmp_transfer
{
	int State;      /* 1:not yet start, 2: in progress, 3: completed*/
	unsigned char IsDownload; /* 0: upload, 1: download*/
	char CommandKey[256+1];   /* optional element of type xsd:string */
	char FileType[32+1]; /* optional element of type xsd:string */
	char URL[256+1];  /* optional element of type xsd:string */
	char Username[256+1]; /* optional element of type xsd:string */
	char Password[256+1]; /* optional element of type xsd:string */
	unsigned int FileSize;  /* required element of type xsd:unsignedInt */
	char TargetFileName[64+1];   /* optional element of type xsd:string */
	unsigned int DelaySeconds;  /* required element of type xsd:unsignedInt */
	char SuccessURL[256+1];  /* optional element of type xsd:string */
	char FailureURL[256+1];  /* optional element of type xsd:string */

	/* For ScheduleDownload RPC */
	unsigned int time_win_start[2];
	unsigned int time_win_end[2];
	unsigned char time_win_mode[2];
	char time_win_user_msg[2][256+1];
	unsigned int time_win_retires[2];
} __PACK__ MIB_CE_CWMP_TRANSFER_T, *MIB_CE_CWMP_TRANSFER_Tp;
#endif

#ifdef _SUPPORT_L2BRIDGING_PROFILE_
typedef struct l2bridge_group {
	unsigned char enable;
	unsigned char groupnum; // 0:default, 1~4:Group1~4
	unsigned char name[64];
	unsigned int vlanid;
	unsigned int instnum;
} __PACK__ MIB_L2BRIDGE_GROUP_T, *MIB_L2BRIDGE_GROUP_Tp;
#endif

/* ------------------------------------------------------------
 * Flash File System Utility functions
 * ------------------------------------------------------------ */
int __mib_flash_read(char *buf, int offset, int len);
int __mib_flash_write(char *buf, int offset, int len);
int __mib_file_write(CONFIG_DATA_T data_type, unsigned char* ptr, int len);
int __mib_file_read(CONFIG_DATA_T data_type, unsigned char* ptr, int len);

/* ------------------------------------------------------------
 * MIB Chain Record Utility functions
 * ------------------------------------------------------------ */
int __mib_chain_mib2tbl_id(int id);
void __mib_chain_print(int id);
unsigned int __mib_chain_total(int id);
void __mib_chain_clear(int id);
int __mib_chain_add(int id, unsigned char* ptr);
int __mib_chain_delete(int id, unsigned int recordNum);
unsigned char* __mib_chain_get(int id, unsigned int recordNum);
unsigned int __mib_chain_all_table_size(CONFIG_DATA_T data_type);
void __mib_chain_all_table_clear(CONFIG_DATA_T data_type);

/* ------------------------------------------------------------
 * MIB Table Utility functions
 * ------------------------------------------------------------ */
unsigned char * __mib_get_mib_tbl(CONFIG_DATA_T data_type);
PARAM_HEADER_Tp __mib_get_mib_header(CONFIG_DATA_T data_type);
void __mib_init_mib_header(void);
unsigned int __mib_content_min_size(CONFIG_DATA_T data_type);
unsigned int __mib_content_max_size(CONFIG_DATA_T data_type);
int __mib_header_read(CONFIG_DATA_T data_type, PARAM_HEADER_Tp pHeader);
int __mib_header_check(CONFIG_DATA_T data_type, PARAM_HEADER_Tp pHeader);
int __mib_content_decod_check(CONFIG_DATA_T data_type, PARAM_HEADER_Tp pHeader, unsigned char* ptr);
void __mib_content_encod_check(CONFIG_DATA_T data_type, PARAM_HEADER_Tp pHeader, unsigned char* ptr);
int __mib_chain_record_content_decod(unsigned char* ptr, unsigned int len);
int __mib_chain_record_content_encod(CONFIG_DATA_T data_type, unsigned char* ptr, unsigned int len);
int __mib_content_read(CONFIG_DATA_T data_type, CONFIG_MIB_T flag);
unsigned int __mib_content_size(CONFIG_DATA_T data_type);
int __mib_content_write_to_raw(CONFIG_DATA_T data_type, unsigned char* buf, unsigned int len);
int __mib_content_write(CONFIG_DATA_T data_type);
int __mib_content_read_to_raw(CONFIG_DATA_T data_type, unsigned char* ptr, int len);
int __mib_content_write_from_raw(unsigned char* ptr, int len);

/* ------------------------------------------------------------
 * MIB API
 * ------------------------------------------------------------ */
int _mib_update_from_raw(unsigned char* ptr, int len); /* Write the specified setting to flash, this function will also check the length and checksum */
int _mib_read_to_raw(CONFIG_DATA_T data_type, unsigned char* ptr, int len); /* Load flash setting to the specified pointer */
int _mib_update(CONFIG_DATA_T data_type); /* Update RAM setting to flash */
int _mib_read_header(CONFIG_DATA_T data_type, PARAM_HEADER_Tp pHeader); /* Load flash header */
int _mib_load(CONFIG_DATA_T data_type); /* Load flash setting to RAM */
int mib_load_table(CONFIG_DATA_T data_type); /* Load flash setting of mib_table to RAM */
int mib_load_chain(CONFIG_DATA_T data_type); /* Load flash setting of mib_chain to RAM */
int mib_reset(CONFIG_DATA_T data_type); /* Reset to default */
int mib_update_firmware(unsigned char* ptr, int len); /* Update Firmware */

int mib_init(void); /* Initialize */
int _mib_get(int id, void *value); /* get mib value */
int _mib_set(int id, void *value); /* set mib value */
int _mib_swap(int id, int id1); /* swap mib value */
#ifdef INCLUDE_DEFAULT_VALUE
int mib_init_mib_with_program_default(CONFIG_DATA_T data_type, int action);
int _mib_getDef(int id, char *buffer);
#endif

unsigned int _mib_chain_total(int id); /* get chain record size */
void _mib_chain_clear(int id); /* clear chain record */
int _mib_chain_add(int id, const void *ptr); /* add chain record */
int _mib_chain_delete(int id, unsigned int recordNum); /* delete the specified chain record */
unsigned char* _mib_chain_get(int id, unsigned int recordNum); /* get the specified chain record */
// for message logging
int _mib_chain_update(int id, unsigned char* ptr, unsigned int recordNum); /* log updating the specified chain record */

int get_mtd_fd(const char *name);
#ifdef WLAN_SUPPORT
//1/20/06' hrchen, for WLAN enable/disable check
int wlan_is_up(void);

#endif
#define ACC_TELNET_PORT 61025
#define ACC_HTTP_PORT 61080
#define ACC_FTP_PORT 61021

#ifdef CONFIG_USER_RTK_RECOVER_SETTING
#define OLD_SETTING_FILE "/var/config/oldsetting.xml"
#define OLD_SETTING_FILE_GZ "/var/config/oldsetting.xml.gz"
#define FLASH_CHECK_FAIL "/var/flash_check_fail"
#endif
#endif // INCLUDE_MIB_H


/*!
*  \file       cmbs_api.h
*  \brief
*  \author     stein
*
*  @(#)  %filespec: cmbs_api.h-2 %
*
*******************************************************************************
*  \par  History
*  \n==== History ============================================================\n
*  date        name     version   action                                          \n
*  ----------------------------------------------------------------------------\n
*              Stein    1         Initialize \n
*  09-Apr-09   Kelbch   161       Update of Media Configuration during start-up \n
*******************************************************************************
*  COPYRIGHT DOSCH & AMAND RESEARCH GMBH & CO.KG
*  DOSCH & AMAND RESEARCH GMBH & CO.KG Confidential
*
*******************************************************************************/

#if   !defined( CMBS_API_H )
#define  CMBS_API_H

#if   !defined( u8 )
typedef unsigned char   u8;   /* unsigned int [0,255] */
#endif

#if   !defined( s8 )
typedef signed char     s8;   /* signed int [-128,127] */
#endif

#if   !defined( u16 )
typedef unsigned short  u16;  /* unsigned int [0,65535] */
#endif

#if   !defined( s16 )
typedef signed short    s16;  /* signed int [-32768,32767] */
#endif

#if   !defined( u32 )
typedef unsigned int    u32;  /* unsigned int [0,4294967295] */
#endif

#if   !defined( s32 )
typedef signed int      s32;  /* signed int [-2147483648, 2147483647] */
#endif

#if   !defined( FALSE )
#define  FALSE 0
#endif

#if   !defined( TRUE )
#define  TRUE  1
#endif

#if   !defined( MAX )
#define  MAX(a,b) ((a)>(b)?(a):(b))
#endif

#if   !defined( MIN )
#define  MIN(a,b) ((a)<(b)?(a):(b))
#endif

/*****************************************************************************
 * General API Enumerations
 *****************************************************************************/

/*! \brief Types of events generated by the API */
typedef enum
{
   CMBS_EV_UNDEF,
   CMBS_EV_DSR_HS_PAGE,             /*!< Performs paging handsets */
   CMBS_EV_DSR_HS_PAGE_RES,         /*!< Response to CMBS_EV_DSR_HS_PAGE */
   CMBS_EV_DSR_HS_DELETE,           /*!< Delete one or more handsets from the base's database */
   CMBS_EV_DSR_HS_DELETE_RES,       /*!< Response to CMBS_EV_DSR_HS_DELETE */
   CMBS_EV_DSR_HS_REGISTERED,       /*!< Unsolicited event generated on successful register/unregister operation of a handset */
   CMBS_EV_DSR_CORD_OPENREG,        /*!< Starts registration mode on the base station */
   CMBS_EV_DSR_CORD_OPENREG_RES,    /*!< Response to CMBS_EV_DSR_CORD_OPENREG */
   CMBS_EV_DSR_CORD_CLOSEREG,       /*!< Stops registration mode on the base station */
   CMBS_EV_DSR_CORD_CLOSEREG_RES,   /*!< Response to CMBS_EV_DSR_CORD_CLOSEREG */
   CMBS_EV_DSR_PARAM_GET,           /*!< Get a parameter value */
   CMBS_EV_DSR_PARAM_GET_RES,       /*!< Response to CMBS_EV_DSR_PARAM_GET */
   CMBS_EV_DSR_PARAM_SET,           /*!< Sets / updates a parameter value */
   CMBS_EV_DSR_PARAM_SET_RES,       /*!< Response to CMBS_EV_DSR_PARAM_SET */
   CMBS_EV_DSR_FW_UPD_START,        /*!< Starts firmware update on the base station */
   CMBS_EV_DSR_FW_UPD_START_RES,    /*!< Response to CMBS_EV_DSR_FW_UPD_START */
   CMBS_EV_DSR_FW_UPD_PACKETNEXT,   /*!< Sends a chunk of firmware to the base station */
   CMBS_EV_DSR_FW_UPD_PACKETNEXT_RES,/*!< Response to CMBS_EV_DSR_FW_UPD_PACKETNEXT */
   CMBS_EV_DSR_FW_UPD_END,          /*!< Ending firmware update process with last chunk of data */
   CMBS_EV_DSR_FW_UPD_END_RES,      /*!< Response to CMBS_EV_DSR_FW_UPD_END */
   CMBS_EV_DSR_FW_VERSION_GET,      /*!< Gets the base's current firmware version of a particular module */
   CMBS_EV_DSR_FW_VERSION_GET_RES,  /*!< Response to CMBS_EV_DSR_FW_VERSION_GET */
   CMBS_EV_DSR_SYS_START,           /*!< Starts the base station's CMBS after parameters were set */
   CMBS_EV_DSR_SYS_START_RES,       /*!< Response to CMBS_EV_DSR_SYS_START  */
   CMBS_EV_DSR_SYS_SEND_RAWMSG,     /*!< Event containing a raw message to the target */
   CMBS_EV_DSR_SYS_SEND_RAWMSG_RES, /*!< Response to CMBS_EV_DSR_SYS_SEND_RAWMSG */
   CMBS_EV_DSR_SYS_STATUS,          /*!< Announce current target status, e.g. up, down, removed */
   CMBS_EV_DSR_SYS_LOG,             /*!< Event containing target system logs */
   CMBS_EV_DSR_SYS_RESET,           /*!< Performs a base station reboot */
   CMBS_EV_DEE_CALL_ESTABLISH,      /*!< Event generated on start of a new call( incoming or outgoing ) */
   CMBS_EV_DEE_CALL_PROGRESS,       /*!< Events for various call progress states */
   CMBS_EV_DEE_CALL_ANSWER,         /*!< Generated when a call is answered */
   CMBS_EV_DEE_CALL_RELEASE,        /*!< Generated when a call is released */
   CMBS_EV_DEE_CALL_RELEASECOMPLETE,/*!< Generated when call instance deleted */
   CMBS_EV_DEE_CALL_INBANDINFO,     /*!< Events created for inband keys */
   CMBS_EV_DEE_CALL_MEDIA_OFFER,    /*!< Offer media */
   CMBS_EV_DEE_CALL_MEDIA_OFFER_RES,/*!< Response to CMBS_EV_DEE_CALL_MEDIA_OFFER */
   CMBS_EV_DEE_CALL_MEDIA_UPDATE,   /*!< Received when cordless module updated the media */
   CMBS_EV_DEE_CALL_HOLD,           /*!< Generated on call HOLD */
   CMBS_EV_DEE_CALL_RESUME,         /*!< Generated on call RESUME */
   CMBS_EV_DEM_CHANNEL_START,       /*!< Start sending (voice) data on a particular channel */
   CMBS_EV_DEM_CHANNEL_START_RES,   /*!< Response to CMBS_EV_DEM_CHANNEL_START */
   CMBS_EV_DEM_CHANNEL_STOP,        /*!< Stop sending data on a particular channel */
   CMBS_EV_DEM_CHANNEL_STOP_RES,    /*!< Response to CMBS_EV_DEM_CHANNEL_STOP */
   CMBS_EV_DEM_TONE_START,          /*!< Start the tone generation on a particular media channel */
   CMBS_EV_DEM_TONE_START_RES,      /*!< Response to CMBS_EV_DEM_TONE_START */
   CMBS_EV_DEM_TONE_STOP,           /*!< Stop tone generation on a particular media channel */
   CMBS_EV_DEM_TONE_STOP_RES,       /*!< Response to CMBS_EV_DEM_TONE_STOP */
   CMBS_EV_DSR_SYS_LOG_REQ,         /*!< Request to get content of the log buffer */
   CMBS_EV_MAX
} E_CMBS_EVENT_ID;

/*! \brief CMBS Operation Modes */
typedef enum
{
   CMBS_MODE_MLB,                   /*!< Multi Line Base mode */
   CMBS_MODE_AMLB,                  /*!< Advanced Multiline Base mode */
   CMBS_MODE_DECT_PIPE,             /*!< DECT Pipe mode */
   CMBS_MODE_DECT_MAC_PIPE,         /*!< DECT MAC Pipe mode */
   CMBS_MODE_MAX
} E_CMBS_API_MODE;

/*! \brief Return codes */
typedef enum
{
   CMBS_RC_OK,                         /*!< The function was successful */
   CMBS_RC_ERROR_OUT_OF_MEM,           /*!< The needed memory was not enough */
   CMBS_RC_ERROR_MEDIA_NOT_AVAILABLE,  /*!< The media path is not available, or the CMBS is not available */
   CMBS_RC_ERROR_MEDIA_BUSY,           /*!< The destination side of communication is busy and not able to respond, yet */
   CMBS_RC_ERROR_PARAMETER,            /*!< Wrong parameter set */
   CMBS_RC_ERROR_GENERAL,              /*!< Not specified error occurred */
   CMBS_RC_MAX,
} E_CMBS_RC;


/*****************************************************************************
 * General API structures
 *****************************************************************************/

/*! \brief Configuration parameters for a UART device */
typedef  struct
{
   u8    u8_Port;                   /*!< COM port */
// u32   u32_BaudRate;              // Baud rate; trying autobauding on host side
} ST_UART_CONFIG, * PST_UART_CONFIG;

/*! \brief IOM/PCM bus mode configuration */
typedef enum
{
   CMBS_TDM_TYPE_MASTER,            /*!< CMBS PCM/IOM bus is configured as master */
   CMBS_TDM_TYPE_SLAVE,             /*!< CMBS PCM/IOM bus is configured as slave */
   CMBS_TDM_TYPE_MASTER_LOOP,       /*!< CMBS PCM/IOM bus is configured as master with slot loop-back*/
   CMBS_TDM_TYPE_SLAVE_LOOP,        /*!< CMBS PCM/IOM bus is configured as slave with slot loop-back*/
}CMBS_TDM_TYPE;

/*! \brief IOM/PCM bus speed configuration */
typedef enum
{
   CMBS_TDM_PCM_512,                /*!< PCM cycle 512 kHz, 64 bit per frame */
   CMBS_TDM_PCM_768,                /*!< PCM cycle 768 kHz, 96 bit per frame */
   CMBS_TDM_PCM_1536,               /*!< PCM cycle  1536 kHz, 192 bit per frame */
   CMBS_TDM_PCM_2048,               /*!< PCM cycle  2048 kHz, 256 bit per frame */
   CMBS_TDM_IOM_512,                /*!< IOM cycle 512 kHz, 64 bit per frame */
   CMBS_TDM_IOM_768,                /*!< IOM cycle 768 kHz, 96 bit per frame */
   CMBS_TDM_IOM_1536,               /*!< IOM cycle  1536 kHz, 192 bit per frame */
   CMBS_TDM_IOM_2048,               /*!< IOM cycle  2048 kHz, 256 bit per frame */
}CMBS_TDM_SPEED;

/*! brief IOM/PCM bus synchronization way */
typedef enum
{
   CMBS_TDM_SYNC_SHORT_FR,          /*!< Short frame-sync FR enclosing the first rising clock edge */
   CMBS_TDM_SYNC_SHORT_FF,          /*!< Short frame-sync FF enclosing the first falling clock edge */
   CMBS_TDM_SYNC_SHORT_LF,          /*!< Short frame-sync LF enclosing the last falling clock edge */
   CMBS_TDM_SYNC_LONG               /*!< Long frame-sync over the first slot (8 bit) */
}CMBS_TDM_SYNC;

/*! \brief Configuration parameters for a PCM/IOM device */
typedef struct
{
   CMBS_TDM_TYPE  e_Type;           /*!< Master/Slave _LOOP */
   CMBS_TDM_SPEED e_Speed;          /*!< IOM/PCM 512,768,1536,2048 */
   CMBS_TDM_SYNC  e_Sync;           /*!< SYNC_LONG, SYNC_SHORT_FR, SYNC_SHORT_FF, SYNC_SHORT_LF */
   u16            u16_SlotEnable;   /*!< number of slot enabled */
   
} ST_TDM_CONFIG, * PST_TDM_CONFIG;

/*! \brief Device types */
typedef enum
{
   CMBS_DEVTYPE_UART,               /*!< UART communication device */
   CMBS_DEVTYPE_USB,                /*!< USB device */
   CMBS_DEVTYPE_SPI,                /*!< SPI */
   CMBS_DEVTYPE_TDM,                /*!< TDM */
   CMBS_DEVTYPE_MAX
} E_CMBS_DEVTYPE;

/*! \brief Communication device */
typedef  struct
{
   E_CMBS_DEVTYPE    e_DevType;     /*!< Device type */

   union
   {
      PST_UART_CONFIG
                     pUartCfg;      /*!< UART configuration parameters */
      PST_TDM_CONFIG pTdmCfg;       /*!< TDM configuration parameters */
   } u_Config;                      /*!< Device configuration parameter set */

} ST_CMBS_DEV, * PST_CMBS_DEV;


/*****************************************************************************
 * IE - Param structures and enumerations
 *****************************************************************************/

/*! \brief Information element types */
typedef enum
{
   CMBS_IE_UNDEF,
   CMBS_IE_CALLINSTANCE,            /*!< Call Instance identifier */
   CMBS_IE_CALLERPARTY,             /*!< Caller ID and its properties */
   CMBS_IE_CALLERNAME,              /*!< Caller Name */
   CMBS_IE_CALLEDPARTY,             /*!< Called ID, e.g. handset, group, line number */
   CMBS_IE_CALLPROGRESS,            /*!< Progress information e.g. ringing, alert, tone selection, etc. */ 
   CMBS_IE_CALLINFO,                /*!< Out of band information, e.g. digits, keys, etc. */
   CMBS_IE_DISPLAY_STRING,          /*!< String container to display content on handset */
   CMBS_IE_CALLRELEASE_REASON,      /*!< Call Release Reason */
   CMBS_IE_MEDIACHANNEL,            /*!< Channel ID and Type */
   CMBS_IE_MEDIADESCRIPTOR,         /*!< Description of media properties, e.g. codec, priority, etc. */
   CMBS_IE_TONE,                    /*!< Tone properties for the tone generator */
   CMBS_IE_TIMEOFDAY,               /*!< Time in ms since 01.01.1970 */
   CMBS_IE_HANDSETINFO,             /*!< HS number, status, type, model and IPEI */
   CMBS_IE_PARAMETER,               /*!< CMBS parameter */
   CMBS_IE_FW_VERSION,              /*!< CMBS firmware module and version */
   CMBS_IE_SYS_LOG,                 /*!< Base station system log string */
   CMBS_IE_RESPONSE,                /*!< Response (ok or error) used in response events */
   CMBS_IE_STATUS,                  /*!< Contain the CMBS status up, down, removed, etc. */
   CMBS_IE_INTEGER_VALUE,           /*!< used for internal purpose */
   CMBS_IE_MAX
} E_CMBS_IE_TYPE;


/*! \brief Call info types */
typedef enum
{
   CMBS_CALL_INFO_TYPE_UNDEF,
   CMBS_CALL_INFO_TYPE_DISPLAY,     /*!< In-band progress information is available */ 
   CMBS_CALL_INFO_TYPE_DIGIT,       /*!< Inband digit/control information available: '0-9,*,#,Hook' */
   CMBS_CALL_INFO_TYPE_MAX
} E_CMBS_CALL_INFO_TYPE;


/*! \brief IE structure for CMBS_IE_CALLINFO */
typedef  struct
{
   E_CMBS_CALL_INFO_TYPE
                  e_Type;           /*!< Call info type */
   u8             u8_DataLen;       /*!< Length of data in bytes */
   u8 *           pu8_Info;         /*!< Info data byte array e.g. digits, keys, etc. */
} ST_IE_CALLINFO, * PST_IE_CALLINFO;


/*! \brief Call progress info */
typedef enum
{
   CMBS_CALL_PROGR_UNDEF,
   CMBS_CALL_PROGR_SETUP_ACK,       /*!< Establish acknowledge */
   CMBS_CALL_PROGR_PROCEEDING,      /*!< Routing the call to destination */
   CMBS_CALL_PROGR_RINGING,         /*!< Destination is ringing */
   CMBS_CALL_PROGR_BUSY,            /*!< Destination is busy */
   CMBS_CALL_PROGR_CALLWAITING,     /*!< Call waiting is available */
   CMBS_CALL_PROGR_INBAND,          /*!< Inband signal available */
   CMBS_CALL_PROGR_MAX
} E_CMBS_CALL_PROGRESS;


/*! \brief IE structure for CMBS_IE_CALLPROGRESS */
typedef  struct
{
   E_CMBS_CALL_PROGRESS
                  e_Progress;       /*!< Call progress info */
} ST_IE_CALLPROGRESS, * PST_IE_CALLPROGRESS;


#define  CMBS_DISPLAY_STRING_LENGTH 30

/*! \brief IE structure for CMBS_IE_DISPLAY_STRING */
typedef  struct
{
   u8             u8_DataLen;       /*!< Length of data in bytes */
   u8 *           pu8_Info;         /*!< String e.g. alphanumeric, etc. */
} ST_IE_DISPLAY_STRING, * PST_IE_DISPLAY_STRING;


/*! \brief Call release reasons */
typedef  enum
{
   CMBS_REL_REASON_NORMAL,          /*!< Normal reason*/
   CMBS_REL_REASON_ABNORMAL,        /*!< Any not specified reason */
   CMBS_REL_REASON_BUSY,            /*!< Destination side is busy */
   CMBS_REL_REASON_UNKNOWN_NUMBER,  /*!< Destination is unknown */
   CMBS_REL_REASON_FORBIDDEN,       /*!< Network access denied */
   CMBS_REL_REASON_UNSUPPORTED_MEDIA,/*!< The requested media is not supported */
   CMBS_REL_REASON_NO_RESOURCE,     /*!< No internal resources are available */
   CMBS_REL_REASON_MAX
} E_CMBS_REL_REASON;


/*! \brief IE structure for CMBS_IE_CALLRELEASE_REASON */
typedef  struct
{
   E_CMBS_REL_REASON
                  e_Reason;         /*!< Internal mapped reason */
   u32            u32_ExtReason;    /*!< Extended reason to allow notification of network specific release reason */
} ST_IE_RELEASE_REASON, * PST_IE_RELEASE_REASON;


/*! \brief Audio codecs */
typedef  enum
{
   CMBS_AUDIO_CODEC_UNDEF,
   CMBS_AUDIO_CODEC_PCMU,           /*!< Payload type PCMU 8 bit 8kHz */ 
   CMBS_AUDIO_CODEC_PCMA,           /*!< Payload type PCMA 8 bit 8kHz */ 
   CMBS_AUDIO_CODEC_PCMU_WB,        /*!< Payload type PCMU 8 bit 16kHz */
   CMBS_AUDIO_CODEC_PCMA_WB,        /*!< Payload type PCMA 8 bit 16kHz */
   CMBS_AUDIO_CODEC_PCM_LINEAR_WB,  /*!< Payload type PCM 16 bit 16kHz */
   CMBS_AUDIO_CODEC_PCM_LINEAR_NB,  /*!< Payload type PCM 16 bit 8kHz */
   CMBS_AUDIO_CODEC_MAX
} E_CMBS_AUDIO_CODEC;


/*! \brief IE structure for CMBS_IE_MEDIADESCRIPTOR */
typedef  struct
{
   E_CMBS_AUDIO_CODEC
                  e_Codec;          /*!< Codec number according RFC 3551 */
} ST_IE_MEDIA_DESCRIPTOR, * PST_IE_MEDIA_DESCRIPTOR;


/*! \brief Media types */
typedef  enum
{
   CMBS_MEDIA_TYPE_AUDIO_IOM,       /*!< Media channel type audio IOM */
   CMBS_MEDIA_TYPE_AUDIO_USB,       /*!< Media channel type audio USB pipe*/
   CMBS_MEDIA_TYPE_DATA,            /*!< Media channel type general data */
   CMBS_MEDIA_TYPE_MAX
} E_CMBS_MEDIA_TYPE;


/*! \brief IE structure for CMBS_IE_MEDIACHANNEL */
typedef  struct
{
   u32            u32_ChannelID;    /*!< Channel ID of referred media type, lower 16bit reserved, higher 16bit for application itself */
   u32            u32_ChannelParameter; /*!< Channel Parameter provides information about the parameter settings, e.g. IOM - used slots */
   E_CMBS_MEDIA_TYPE
                  e_Type;           /*!< Defines the media channel type */
   
} ST_IE_MEDIA_CHANNEL, * PST_IE_MEDIA_CHANNEL;


/*! \brief Tones */
typedef  enum
{
   CMBS_TONE_DIAL,                  /*!< Dial tone according country spec. */
   CMBS_TONE_STUTTER_DIAL,          /*!< Stutter dial tone according country spec. */
   CMBS_TONE_RING_BACK,             /*!< Ring-back tone according country spec. */
   CMBS_TONE_BUSY,                  /*!< Busy tone according country spec. */
   CMBS_TONE_CALL_WAITING,          /*!< Call waiting tone according country spec. */
   CMBS_TONE_HINT,                  /*!< Hint tone */
   CMBS_TONE_OK,                    /*!< OK tone */
   CMBS_TONE_NOK,                   /*!< Not OK tone */
   CMBS_TONE_DTMF_0,                /*!< DTMF tone 0 */
   CMBS_TONE_DTMF_1,                /*!< DTMF tone 1 */
   CMBS_TONE_DTMF_2,                /*!< DTMF tone 2 */
   CMBS_TONE_DTMF_3,                /*!< DTMF tone 3 */
   CMBS_TONE_DTMF_4,                /*!< DTMF tone 4 */
   CMBS_TONE_DTMF_5,                /*!< DTMF tone 5 */
   CMBS_TONE_DTMF_6,                /*!< DTMF tone 6 */
   CMBS_TONE_DTMF_7,                /*!< DTMF tone 7 */
   CMBS_TONE_DTMF_8,                /*!< DTMF tone 8 */
   CMBS_TONE_DTMF_9,                /*!< DTMF tone 9 */
   CMBS_TONE_DTMF_STAR,             /*!< DTMF tone * */
   CMBS_TONE_DTMF_HASH,             /*!< DTMF tone # */
   CMBS_TONE_DTMF_A,                /*!< DTMF tone A */
   CMBS_TONE_DTMF_B,                /*!< DTMF tone B */
   CMBS_TONE_DTMF_C,                /*!< DTMF tone C */
   CMBS_TONE_DTMF_D,                /*!< DTMF tone D */
   CMBS_TONE_USER_DEF               /*!< User defined tone, not supported, yet. */
} E_CMBS_TONE;


/*! \brief IE structure for CMBS_IE_TONE */
typedef  struct
{
   E_CMBS_TONE    e_Tone;
} ST_IE_TONE, * PST_IE_TONE;


/* Address properties */
#define  CMBS_ADDR_PROPTYPE_UNKNOWN       0x00  /*!< \brief Unknown number type */
#define  CMBS_ADDR_PROPTYPE_INTERNATIONAL 0x10  /*!< \brief International addressing */
#define  CMBS_ADDR_PROPTYPE_NATIONAL      0x20  /*!< \brief National addressing */
#define  CMBS_ADDR_PROPTYPE_NET           0x30  /*!< \brief Network specific address */
#define  CMBS_ADDR_PROPTYPE_SUBSCRIBER    0x40  /*!< \brief Subscriber address */
#define  CMBS_ADDR_PROPTYPE_MASK          0xF0  /*!< address type mask */

#define  CMBS_ADDR_PROPPLAN_UNKNOWN       0x00  /*!< \brief Unknown address plan */
#define  CMBS_ADDR_PROPPLAN_E164          0x01  /*!< \brief E.164 format */
#define  CMBS_ADDR_PROPPLAN_PRIVATE       0x09  /*!< \brief Private plan */
#define  CMBS_ADDR_PROPPLAN_SIP           0x0A  /*!< \brief SIP address, as defined in RFC 3261 */
#define  CMBS_ADDR_PROPPLAN_INTHS         0x0B  /*!< \brief Internal DECT handset */
#define  CMBS_ADDR_PROPPLAN_INTGRP        0x0C  /*!< \brief Internal DECT group */
#define  CMBS_ADDR_PROPPLAN_MASK          0x0F  /*!< address plan mask */

/* Address presentation */
#define  CMBS_ADDR_PRESENT_ALLOW          0x00  /*!< \brief The address can be displayed */
#define  CMBS_ADDR_PRESENT_DENIED         0x20  /*!< \brief The address can not be displayed */
#define  CMBS_ADDR_PRESENT_NOTAVAIL       0x40  /*!< \brief The address is not available */
#define  CMBS_ADDR_PRESENT_MASK           0xE0  /*!< address presentation mask */

/* Ringing type */
#define  CMBS_ADDR_PRESENT_RINGTYPE_1     0x04
#define  CMBS_ADDR_PRESENT_RINGTYPE_2     0x08
#define  CMBS_ADDR_PRESENT_RINGTYPE_3     0x10
#define  CMBS_ADDR_PRESENT_RINGTYPE_4     0x0C
#define  CMBS_ADDR_PRESENT_RINGTYPE_5     0x14
#define  CMBS_ADDR_PRESENT_RINGTYPE_6     0x18
#define  CMBS_ADDR_PRESENT_RINGTYPE_7     0x1C
#define  CMBS_ADDR_PRESENT_RINGTYPE_MASK  0x3C

/*! \brief IE address structure for CMBS_IE_CALLERPARTY and CMBS_IE_CALLEDPARTY */
typedef  struct
{
   u8          u8_AddressProperties;            /*!< Bits 7-4 proptype, bits 3-0 propplan */
   u8          u8_AddressPresentation;          /*!< Bits 7-5 presentation, bits 4-2 for ring type, bits 1-0 reserved */
   u8          u8_AddressLen;                   /*!< Address length */
   u8 *        pu8_Address;                     /*!< Address byte array */
} ST_IE_CALLERPARTY, * PST_IE_CALLERPARTY,
  ST_IE_CALLEDPARTY, * PST_IE_CALLEDPARTY;

/*! \brief IE structure for CMBS_IE_CALLERNAME */
typedef  struct
{
   u8          u8_DataLen;          /*!< Length of Caller Name */
   u8 *        pu8_Name;            /*!< Caller Name */
} ST_IE_CALLERNAME, * PST_IE_CALLERNAME;

/*! \brief IE structure for CMBS_IE_TIMEOFDAY */
typedef struct
{
   u32         u32_Timestamp;       /*!< Timestamp in msec since 01.01.1970 */
} ST_IE_TIMEOFDAY, * PST_IE_TIMEOFDAY;


#define  CMBS_PARAM_RFPI_LENGTH        5
#define  CMBS_PARAM_RVBG_LENGTH        1
#define  CMBS_PARAM_RVREF_LENGTH       1
#define  CMBS_PARAM_RXTUN_LENGTH       1
#define  CMBS_PARAM_PIN_CODE_LENGTH    4
#define  CMBS_PARAM_TEST_MODE_LENGTH   1
#define  CMBS_PARAM_COUNTRY_LENGTH     0  ///\todo check this length
#define  CMBS_PARAM_SIGNALTONE_LENGTH  0  ///\todo check this length

#define  CMBS_PARAM_FLEX_SIZE          128 /*! transmission size of parameter area */

/*! \brief CMBS parameters */
typedef enum
{
   CMBS_PARAM_UNKNOWN,
   CMBS_PARAM_RFPI,                 /*!< Base identity */
   CMBS_PARAM_RVBG,                 /*!< VBG register */
   CMBS_PARAM_RVREF,                /*!< VREF register */
   CMBS_PARAM_RXTUN,                /*!< RTUN register */
   CMBS_PARAM_MASTER_PIN,           /*!< Base master PIN code */
   CMBS_PARAM_AUTH_PIN,             /*!< Authentication PIN code */
   CMBS_PARAM_COUNTRY,              /*!< Configure cordless module to specific country settings */
   CMBS_PARAM_SIGNALTONE_DEFAULT,   /*!< Define the default behavior for outgoing calls */
   CMBS_PARAM_TEST_MODE,            /*!< Test mode. 0x00: Normal operation; 0x81: TBR6; 0x82: TBR10 */
   CMBS_PARAM_FLEX,                 /*!< User defined parameter position */
   CMBS_PARAM_MAX
} E_CMBS_PARAM;

/*!< \breif CMBS memory types */
typedef enum
{
   CMBS_MEM_EEPROM,                 /*!< parameter area type eeprom */
   CMBS_MEM_RAM,                    /*!< parameter area type ram, for further study*/
   CMBS_MEM_MAX
}E_CMBS_MEM_TYPE;

/*! \brief IE structure for CMBS_IE_PARAMETER */
typedef  struct
{
   E_CMBS_PARAM
            e_Param;                /*!< Parameter identifier */
   u16      u16_Position;           /*!< user defined position */
   u16      u16_DataLen;            /*!< Length of data */
   u8 *     pu8_Data;               /*!< Parameter data */
}  ST_IE_PARAMETER, * PST_IE_PARAMETER;

/*! \brief Handset types */
typedef enum
{
   CMBS_HS_TYPE_GAP,                /*!< GAP handset */
   CMBS_HS_TYPE_CATIQ,              /*!< CATiq compliant handset */
   CMBS_HS_TYPE_DSPG,               /*!< DSPG handset */
   CMBS_HS_TYPE_MAX,
} E_CMBS_HS_TYPE;

#define  CMBS_IPEI_SIZE 5           /*!< \brief Length of IPEI */

/*! \brief IE structure for CMBS_IE_HANDSETINFO */
typedef  struct
{
   u8       u8_Hs;                  /*!< Handset number */
   u8       u8_State;               /*!< State: 0 = unregistered, 1 = registered, 2 = blacklisted, 3 = subscribing */
   E_CMBS_HS_TYPE
            e_Type;                 /*!< Handset type */
   u32      u32_ModelNr;            /*!< Model number assigned by product owner or manufacturer */
   u8       u8_IPEI[CMBS_IPEI_SIZE];/*!< Handset identity */

} ST_IE_HANDSETINFO, * PST_IE_HANDSETINFO;

/*! \brief FW modules */
typedef enum
{
   CMBS_MODULE_CMBS,                /*!< Cordless Module Base */
   CMBS_MODULE_DECT,                /*!< DECT Module */
   CMBS_MODULE_DSP,                 /*!< DSP library */
   CMBS_MODULE_EEPROM,              /*!< EEPROM driver */
   CMBS_MODULE_USB,                 /*!< USB stack */
   CMBS_MODULE_BUILD,               /*!< Build version of target */
   CMBS_MODULE_MAX
} E_CMBS_MODULE;

/*! \brief IE structure for CMBS_IE_FW_VERSION */
typedef  struct
{
   E_CMBS_MODULE
            e_SwModule;             /*!< Software module identifier */
   u16      u16_FwVersion;          /*!< Version in BCD coded format */
} ST_IE_FW_VERSION, * PST_IE_FW_VERSION;

/*! \brief IE structure for CMBS_IE_SYS_LOG */
typedef  struct
{
   u16      u16_DataLen;            /*!< Length of data */
   u8 *     pu8_Data;               /*!< Data pointer */
} ST_IE_SYS_LOG, * PST_IE_SYS_LOG;

/*! \brief Module states */
typedef enum
{
   CMBS_MODULE_STATUS_UP,           /*!< CMBS is running with stack, etc. */
   CMBS_MODULE_STATUS_DOWN,         /*!< CMBS is not running */
   CMBS_MODULE_STATUS_REMOVED       /*!< CMBS is removed from host */
} E_CMBS_MODULE_STATUS;

/*! \brief IE structure for CMBS_IE_STATUS */
typedef  struct
{
   E_CMBS_MODULE_STATUS
            e_ModuleStatus;         /*!< Module status e.g. up, down, etc. */
} ST_IE_SYS_STATUS, * PST_IE_SYS_STATUS;

/*! \brief Response values */
typedef  enum
{
   CMBS_RESPONSE_OK,                /*!< OK */
   CMBS_RESPONSE_ERROR,             /*!< Error */
   CMBS_RESPONSE_MAX
} E_CMBS_RESPONSE;

/*! \brief IE structure for CMBS_IE_RESPONSE */
typedef  struct
{
   E_CMBS_RESPONSE
            e_Response;             /*!< Response: OK or Error */
} ST_IE_RESPONSE, * PST_IE_RESPONSE;

/*typedef struct
{
   u32 u32_ReqID;
   E_CMBS_USER_REQ_TYPE; USER_RAW, OS_RAW, etc.....
   u16 u16_Length; 
} ST_IE_RAW_MSG, * PST_IE_RAW_MSG;
*/
/*****************************************************************************
 * Callback functions
 *****************************************************************************/

/*!
      \brief
         Callback function for upcoming events to the application

      \param[in]        pv_AppRef         Reference pointer of application provided in cmbs_api_RegisterCb()
      \param[in]        e_EventID         Type of event
      \param[in]        pv_EventIEListRef Pointer to IE List returned in the event

 */
typedef  void  (* PFN_CMBS_API_CB)( void * pv_AppRef,
                                    E_CMBS_EVENT_ID e_EventID,
                                    void * pv_EventIEListRef );


#if defined( __cplusplus )
extern "C"
{
#endif


/*****************************************************************************
 * API Maintenance functions
 *****************************************************************************/

//*/
//    ==========  cmbs_api_Init  ===========
/*!
     \brief
         Initializes the API for Host <-> DECT Module communication.
      
      <h2>cmbs_api_Init</h2>

      <h3>Introduction</h3>
         Initializes the API for DM communication.<br>
         It opens the devices for control and media connectivity.<br>
         Used communication devices ad their properties will be set by function parameters,<br>
         e.g. UART, USB, SPI, IOM etc.<br>
         This function is locked until the target does respond or a timeout occurs.<BR>

      <h3>Use cases</h3>
         Startup sequence of the application.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_Init ( E_CMBS_API_MODE e_Mode, ST_CMBS_DEV * pst_DevCtl, ST_CMBS_DEV * pst_DevMedia )
        </b><br>
        <br>
        This function must be called before any other API functions.<br>

      \param[in]        e_Mode            api mode( reserved for the future:
                                                   multiline, adv_multiline, dect_pipe, etc. )
      \param[in]        pst_DevCtl        pointer to device control (Serial, USB, SPI, etc.) definition
      \param[in]        pst_DevMedia      pointer to media control (IOM, USB Audio Class, etc.) definition

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_Init( E_CMBS_API_MODE e_Mode, ST_CMBS_DEV * pst_DevCtl, ST_CMBS_DEV * pst_DevMedia );

//*/
//    ==========  cmbs_api_UnInit  ===========
/*!
      \brief
         Finalizes the API for Host <-> DECT Module communication.

      <h2>cmbs_api_UnInit</h2>

      <h3>Introduction</h3>
         Finalizes the API for DM communication.<br>
         It closes the devices for control and media connectivity and releases any resources being
         used by the API.

      <h3>Use cases</h3>
         End of application.

      <h3>API Functions description</h3>
         <b>
         void cmbs_api_UnInit ( void )
         </b><br><br>
         This function should be called on shutdown of the CMBS communication application.

      \par Parameters:      
                        none

      \return           none

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
void              cmbs_api_UnInit( void );

//*/
//    ==========  cmbs_api_RegisterCb  ===========
/*!
      \brief
         Registers the callback function.

      <h2>cmbs_api_RegisterCb</h2>

      <h3>Introduction</h3>
         This function is called to register the event callback.<br>
         The callback function will be called after the communication device received an event,<br>
         thus being an essential part of the communication mechanism.

      <h3>Use cases</h3>

      <h3>API Functions description</h3>
         <b>
         void * cmbs_api_RegisterCb ( void * pv_AppRef, PFN_CMBS_API_CB pfn_api_Cb, u16 u16_bcdVersion )
         </b><br><br>
         This function should be called after CMBS communication initialization.
         <br>
      \param[in]        pv_AppRef         reference pointer of application, will be passed in the callback function
      \param[in]        pfn_api_Cb        callback function pointer
      \param[in]        u16_bcdVersion    api version in BCD coded format,
                                          which the application wants to use, e.g. 0x0100 for version 1.0

      \return           pointer to AppRefHandle( pv_AppRefHandle ), otherwise in case version is not supported NULL.<br>
                        pv_AppRefHandle should be used in all subsequent calls to the API.


      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
void *            cmbs_api_RegisterCb( void * pv_AppRef, PFN_CMBS_API_CB pfn_api_Cb, u16 u16_bcdVersion );

//*/
//    ==========  cmbs_api_UnregisterCb  ===========
/*!
      \brief
         Unregisters the callback function.

         <h2>cmbs_api_UnregisterCb</h2>

      <h3>Introduction</h3>
         Unregisters the callback function.

      <h3>Use cases</h3>

      <h3>API Functions description</h3>
         <b>
         void cmbs_api_UnregisterCb ( void * pv_AppRefHandle )
        </b><br><br>
         This function is called to unregister the event callback function.<br>
         
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           none           

      \see              cmbs_api_RegisterCb

      <b>Sample Code:</b><br>
      <code></code>
*/
void              cmbs_api_UnregisterCb( void * pv_AppRefHandle );

//*/
//    ==========  cmbs_api_ModuleVersionGet  ===========
/*!
      \brief
         Returns the version of the CMBS communication API currently in use by the Cordless Module.

         <h2>cmbs_api_ModuleVersionGet</h2>

      <h3>Introduction</h3>
         Returns the version of the CMBS communication API currently in use by the Cordless Module.

      <h3>Use cases</h3>
         Request the current API version of CMBS C-API on the Cordless Module.<br>
         Note: The version was provided in the HELLO event and therefore
         function will return immediately with the version.<br> 

      <h3>API Functions description</h3>
         <b>
         u16 cmbs_api_ModuleVersionGet ( void )
         </b><br><br>
         Returns the API version in BCD format,<br>
         e.g. 0X0101 representing version 1.01<br><br>

      \par Parameters:      
                        none

      \return           current API version in BCD format<br>

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
u16               cmbs_api_ModuleVersionGet( void );

//*/
//    ==========  cmbs_api_ie_GetList  ===========
/*!
      \brief
         Provides a reference to Information Element (IE) list to be used in subsequent function calls.

         <h2>cmbs_api_ie_GetList</h2>

      <h3>Introduction</h3>
         Provides a reference to Information Element (IE) list to be used in subsequent function calls.

      <h3>Use cases</h3>
         Any function call, using the list of Information Elements (IEs).

      <h3>API Functions description</h3>
         <b>
         void * cmbs_api_ie_GetList ( void )
         </b><br><br>
         This function allocates internal buffer to store IEs.

      \par Parameters:      
                        none

      \return           Reference pointer to IE list

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
void *            cmbs_api_ie_GetList( void );

//*/
//    ==========  cmbs_api_ie_FreeList  ===========
/*!
      \brief
         Free the IE list.

         <h2>cmbs_api_ie_FreeList</h2>

      <h3>Introduction</h3>
         Free the IE list.

      <h3>Use cases</h3>
         Any function call, using the list of Information Elements (IEs).

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_FreeList ( void * pv_RefIEList )
         </b><br><br>
         This function frees the IE List.

      \param[in]        pv_RefIEList      pointer to IE list to be freed

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_FreeList( void * pv_RefIEList );

//*/
//    ==========  cmbs_api_ie_GetFirst  ===========
/*!
      \brief
         Get first IE from IE List.

         <h2>cmbs_api_ie_GetFirst</h2>

      <h3>Introduction</h3>
         Get first IE from IE List.

      <h3>Use cases</h3>
         Any function call, using the list of Information Elements (IEs).

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_GetFirst ( void * pv_RefIEList, void ** ppv_RefIE, u16 * pu16_IEType )
         </b><br><br>
         This function returns the first IE from the IE List.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in,out]    ppv_RefIE         pointer to first IE
      \param[in,out]    pu16_IEType       pointer to IE Type

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_GetFirst( void * pv_RefIEList, void ** ppv_RefIE, u16 * pu16_IEType ); 

//*/
//    ==========  cmbs_api_ie_GetNext  ===========
/*!
      \brief
         Get next IE from IE List.

         <h2>cmbs_api_ie_GetNext</h2>

      <h3>Introduction</h3>
         Get next IE from IE List.

      <h3>Use cases</h3>
         Any function call, using the list of Information Elements (IEs).

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_GetNext ( void * pv_RefIEList, void ** ppv_RefIE, u16 * pu16_IEType )
         </b><br><br>
         This function retrieves the next IE from the IE List.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in,out]    ppv_RefIE         pointer to next IE
      \param[in,out]    pu16_IEType       pointer to IE Type

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_GetNext( void * pv_RefIEList, void ** ppv_RefIE, u16 * pu16_IEType ); 


/*****************************************************************************
 * Information Elements ADD / GET functions
 *****************************************************************************/

//*/
//    ==========  cmbs_api_ie_CallInstanceAdd  ===========
/*!
      \brief
         Add Call Instance Information Element to IE List.

         <h2>cmbs_api_ie_CallInstanceAdd</h2>

      <h3>Introduction</h3>
         Add Call Instance Information Element to IE List.

      <h3>Use cases</h3>
         Transmitting Call Instance by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallInstanceAdd ( void * pv_RefIEList, u32 u32_CallInstance )
         </b><br><br>

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        u32_CallInstance  Call Instance ID

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallInstanceAdd( void * pv_RefIEList, u32 u32_CallInstance );

//*/
//    ==========  cmbs_api_ie_CallInstanceGet  ===========
/*!
      \brief
         Get Call Instance Information Element from IE List element.

         <h2>cmbs_api_ie_CallInstanceGet</h2>

      <h3>Introduction</h3>
         Get Call Instance Information Element from IE List element.

      <h3>Use cases</h3>
         Received Call Instance IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallInstanceGet ( void * pv_RefIE, u32 * pu32_CallInstance )
         </b><br><br>
         The function extracts the Call Instance IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pu32_CallInstance pointer to Call Instance ID

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallInstanceGet( void * pv_RefIE, u32 * pu32_CallInstance );

//*/
//    ==========  cmbs_api_ie_CallerPartyAdd  ===========
/*!
      \brief
         Add Caller ID to IE List.

         <h2>cmbs_api_ie_CallerPartyAdd</h2>

      <h3>Introduction</h3>
         Add Caller ID to IE List.

      <h3>Use cases</h3>
         Transmitting Caller ID by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallerPartyAdd ( void * pv_RefIEList, ST_IE_CALLERPARTY * pst_CallerParty )
         </b><br><br>
         The application has to populate a ST_IE_CALLERPARTY structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_CallerParty   pointer to ST_IE_CALLERPARTY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallerPartyAdd( void * pv_RefIEList, ST_IE_CALLERPARTY * pst_CallerParty );

//*/
//    ==========  cmbs_api_ie_CallerPartyGet  ===========
/*!
      \brief
         Get Caller ID Information Element from IE List element.

         <h2>cmbs_api_ie_CallerPartyGet</h2>

      <h3>Introduction</h3>
         Get Caller ID Information Element from IE List element.

      <h3>Use cases</h3>
         Received Caller ID IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallerPartyGet ( void * pv_RefIE, ST_IE_CALLERPARTY * pst_CallerParty )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_CallerParty   pointer to ST_IE_CALLERPARTY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallerPartyGet( void * pv_RefIE, ST_IE_CALLERPARTY * pst_CallerParty );

//*/
//    ==========  cmbs_api_ie_CalledPartyAdd  ===========
/*!
      \brief
         Add Called ID to IE List.

         <h2>cmbs_api_ie_CalledPartyAdd</h2>

      <h3>Introduction</h3>
         Add Called ID to IE List.

      <h3>Use cases</h3>
         Transmitting Called ID by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CalledPartyAdd ( void * pv_RefIEList, ST_IE_CALLEDPARTY * pst_CalledParty )
         </b><br><br>
         The application has to populate a ST_IE_CALLEDPARTY structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_CalledParty   pointer to ST_IE_CALLEDPARTY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CalledPartyAdd( void * pv_RefIEList, ST_IE_CALLEDPARTY * pst_CalledParty );

//*/
//    ==========  cmbs_api_ie_CalledPartyGet  ===========
/*!
      \brief
         Get Called ID Information Element from IE List element.

         <h2>cmbs_api_ie_CalledPartyGet</h2>

      <h3>Introduction</h3>
         Get Called ID Information Element from IE List element.

      <h3>Use cases</h3>
         Received Called ID IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CalledPartyGet ( void * pv_RefIE, ST_IE_CALLEDPARTY * pst_CalledParty )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_CalledParty   pointer to ST_IE_CALLEDPARTY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CalledPartyGet( void * pv_RefIE, ST_IE_CALLEDPARTY * pst_CalledParty );

//*/
//    ==========  cmbs_api_ie_CallerNameAdd  ===========
/*!
      \brief
         Add Caller Name to IE List.

         <h2>cmbs_api_ie_CallerNameAdd</h2>

      <h3>Introduction</h3>
         Add Caller Name to IE List.

      <h3>Use cases</h3>
         Transmitting Caller Name by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallerNameAdd ( void * pv_RefIEList, ST_IE_CALLERNAME * pst_CallerName )
         </b><br><br>
         The application has to populate a ST_IE_CALLERNAME structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_CallerName    pointer to ST_IE_CALLERNAME structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallerNameAdd( void * pv_RefIEList, ST_IE_CALLERNAME * pst_CallerName );

//*/
//    ==========  cmbs_api_ie_CallerNameGet  ===========
/*!
      \brief
         Get Caller Name Information Element from IE List element.

         <h2>cmbs_api_ie_CallerNameGet</h2>

      <h3>Introduction</h3>
         Get Caller Name Information Element from IE List element.

      <h3>Use cases</h3>
         Received Caller Name IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallerNameGet ( void * pv_RefIE, ST_IE_CALLERNAME * pst_CallerName )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_CallerName    pointer to ST_IE_CALLERNAME structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallerNameGet( void * pv_RefIE, ST_IE_CALLERNAME * pst_CallerName );

//*/
//    ==========  cmbs_api_ie_CallProgressAdd  ===========
/*!
      \brief
         Add Call Progress information to IE List.

         <h2>cmbs_api_ie_CallProgressAdd</h2>

      <h3>Introduction</h3>
         Add Call Progress information to IE List.

      <h3>Use cases</h3>
         Transmitting Call Progress Information by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallProgressAdd ( void * pv_RefIEList, ST_IE_CALLPROGRESS * pst_CallProgress )
         </b><br><br>
         The application has to populate a ST_IE_CALLPROGRESS structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_CallProgress  pointer to ST_IE_CALLPROGRESS structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallProgressAdd( void * pv_RefIEList, ST_IE_CALLPROGRESS * pst_CallProgress );

//*/
//    ==========  cmbs_api_ie_CallProgressGet  ===========
/*!
      \brief
         Get Call Progress Information Element from IE List element.

         <h2>cmbs_api_ie_CallProgressGet</h2>

      <h3>Introduction</h3>
         Get Call Progress Information Element from IE List element.

      <h3>Use cases</h3>
         Received Call Progress IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallProgressGet ( void * pv_RefIE, ST_IE_CALLPROGRESS * pst_CallProgress )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_CallProgress  pointer to ST_IE_CALLPROGRESS structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallProgressGet( void * pv_RefIE, ST_IE_CALLPROGRESS * pst_CallProgress );

//*/
//    ==========  cmbs_api_ie_CallInfoAdd  ===========
/*!
      \brief
         Add Call Info to IE List.

         <h2>cmbs_api_ie_CallInfoAdd</h2>

      <h3>Introduction</h3>
         Add Call Info to IE List.

      <h3>Use cases</h3>
         Transmitting Call Info by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallInfoAdd ( void * pv_RefIEList, ST_IE_CALLINFO * pst_CallInfo )
         </b><br><br>
         The application has to populate a ST_IE_CALLINFO structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_CallInfo      pointer to ST_IE_CALLINFO structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallInfoAdd( void * pv_RefIEList, ST_IE_CALLINFO * pst_CallInfo );

//*/
//    ==========  cmbs_api_ie_CallInfoGet  ===========
/*!
      \brief
         Get Call Info Information Element from IE List element.

         <h2>cmbs_api_ie_CallInfoGet</h2>

      <h3>Introduction</h3>
         Get Call Info Information Element from IE List element.

      <h3>Use cases</h3>
         Received Call Info IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallInfoGet ( void * pv_RefIE, ST_IE_CALLINFO * pst_CallInfo )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_CallInfo      pointer to ST_IE_CALLINFO structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallInfoGet( void * pv_RefIE, ST_IE_CALLINFO * pst_CallInfo );

//*/
//    ==========  cmbs_api_ie_DisplayStringAdd  ===========
/*!
      \brief
         Add Display string to IE List.

         <h2>cmbs_api_ie_DisplayStringAdd</h2>

      <h3>Introduction</h3>
         Add Display string to IE List.
         The display string will be displayed by the handset MMI, if it supports DECT Display IE.

      <h3>Use cases</h3>
         Transmitting display string by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_DisplayStringAdd ( void * pv_RefIEList, ST_IE_DISPLAY_STRING * pst_DisplayString )
         </b><br><br>
         The application has to populate a ST_IE_DISPLAY_STRING structure first.
         The maximum string size is 30.<br><br>
         NOTE: Cordless handset may not support display message.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_DisplayString pointer to ST_IE_DISPLAY_STRING structure

      \return           Return Code

      \see              CMBS_DISPLAY_STRING_LENGTH

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_DisplayStringAdd( void * pv_RefIEList, ST_IE_DISPLAY_STRING * pst_DisplayString );

//*/
//    ==========  cmbs_api_ie_CallReleaseReasonAdd  ===========
/*!
      \brief
         Add Call Release Reason to IE List.

         <h2>cmbs_api_ie_CallReleaseReasonAdd</h2>

      <h3>Introduction</h3>
         Add Call Release Reason to IE List.

      <h3>Use cases</h3>
         Transmitting Call Release Reason by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallReleaseReasonAdd ( void * pv_RefIEList, ST_IE_RELEASE_REASON * pst_RelReason )
         </b><br><br>
         The application has to populate a ST_IE_RELEASE_REASON structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_RelReason     pointer to ST_IE_RELEASE_REASON structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallReleaseReasonAdd( void * pv_RefIEList, ST_IE_RELEASE_REASON * pst_RelReason );

//*/
//    ==========  cmbs_api_ie_CallReleaseReasonGet  ===========
/*!
      \brief
         Get Call Release Reason Information Element from IE List element.

         <h2>cmbs_api_ie_CallReleaseReasonGet</h2>

      <h3>Introduction</h3>
         Get Call Release Reason Information Element from IE List element.

      <h3>Use cases</h3>
         Received Call Release Reason IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_CallReleaseReasonGet ( void * pv_RefIE, ST_IE_RELEASE_REASON * pst_RelReason )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_RelReason     pointer to ST_IE_RELEASE_REASON structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_CallReleaseReasonGet( void * pv_RefIE, ST_IE_RELEASE_REASON * pst_RelReason );

//*/
//    ==========  cmbs_api_ie_MediaChannelAdd  ===========
/*!
      \brief
         Add Media Channel Information Element to IE List.

         <h2>cmbs_api_ie_MediaChannelAdd</h2>

      <h3>Introduction</h3>
         Add Media Channel Information Element to IE List.

      <h3>Use cases</h3>
         Transmitting Media Channel IE by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_MediaChannelAdd ( void * pv_RefIEList, ST_IE_MEDIA_CHANNEL * pst_MediaChannel )
         </b><br><br>
         The application has to populate a ST_IE_MEDIA_CHANNEL structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_MediaChannel  pointer to ST_IE_MEDIA_CHANNEL structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_MediaChannelAdd( void * pv_RefIEList, ST_IE_MEDIA_CHANNEL * pst_MediaChannel );

//*/
//    ==========  cmbs_api_ie_MediaChannelGet  ===========
/*!
      \brief
         Get Media Channel Information Element from IE List element.

         <h2>cmbs_api_ie_MediaChannelGet</h2>

      <h3>Introduction</h3>
         Get Media Channel Information Element from IE List element.

      <h3>Use cases</h3>
         Received Media Channel IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_MediaChannelGet ( void * pv_RefIE, ST_IE_MEDIA_CHANNEL * pst_MediaChannel )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_MediaChannel  pointer to ST_IE_MEDIA_CHANNEL structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_MediaChannelGet( void * pv_RefIE, ST_IE_MEDIA_CHANNEL * pst_MediaChannel );

//*/
//    ==========  cmbs_api_ie_MediaDescAdd  ===========
/*!
      \brief
         Add Media Descriptor Information Element to IE List.

         <h2>cmbs_api_ie_MediaDescAdd</h2>

      <h3>Introduction</h3>
         Add Media Descriptor Information Element to IE List.

      <h3>Use cases</h3>
         Transmitting Media Descriptor IE by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_MediaDescAdd ( void * pv_RefIEList, ST_IE_MEDIA_DESCRIPTOR * pst_MediaDesc )
         </b><br><br>
         The application has to populate a ST_IE_MEDIA_DESCRIPTOR structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_MediaDesc     pointer to ST_IE_MEDIA_DESCRIPTOR structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_MediaDescAdd( void * pv_RefIEList, ST_IE_MEDIA_DESCRIPTOR * pst_MediaDesc );

//*/
//    ==========  cmbs_api_ie_MediaDescGet  ===========
/*!
      \brief
         Get Media Descriptor Information Element from IE List element.

         <h2>cmbs_api_ie_MediaDescGet</h2>

      <h3>Introduction</h3>
         Get Media Descriptor Information Element from IE List element.

      <h3>Use cases</h3>
         Received Media Descriptor IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_MediaDescGet ( void * pv_RefIE, ST_IE_MEDIA_DESCRIPTOR * pst_MediaDesc )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_MediaDesc     pointer to ST_IE_MEDIA_DESCRIPTOR structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_MediaDescGet( void * pv_RefIE, ST_IE_MEDIA_DESCRIPTOR * pst_MediaDesc );

//*/
//    ==========  cmbs_api_ie_ToneAdd  ===========
/*!
      \brief
         Add Tone Information Element to IE List element.

         <h2>cmbs_api_ie_ToneAdd</h2>

      <h3>Introduction</h3>
         Add Tone Information Element to IE List element.

      <h3>Use cases</h3>
         Used to generate a local tone on the cordless system.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_ToneAdd ( void * pv_RefIEList, ST_IE_TONE * pst_Tone )
         </b><br><br>
         The function adds tone properties to the IE list.
         The application has to populate a ST_IE_TONE structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_Tone          pointer to ST_IE_TONE structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_ToneAdd( void * pv_RefIEList, ST_IE_TONE * pst_Tone );

//*/
//    ==========  cmbs_api_ie_TimeAdd  ===========
/*!
      \brief
         Add Time Of Day Information Element to IE List.

         <h2>cmbs_api_ie_TimeAdd</h2>

      <h3>Introduction</h3>
         Add Time Of Day Information Element to IE List.

      <h3>Use cases</h3>
         Transmitting Time Of Day IE by means of an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_TimeAdd ( void * pv_RefIEList, ST_IE_TIMEOFDAY * pst_TimeOfDay )
         </b><br><br>
         The application has to populate a ST_IE_TIMEOFDAY structure first.

      \param[in]        pv_RefIEList      pointer to IE List
      \param[in]        pst_TimeOfDay     pointer to ST_IE_TIMEOFDAY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_TimeAdd( void * pv_RefIEList, ST_IE_TIMEOFDAY * pst_TimeOfDay );

//*/
//    ==========  cmbs_api_ie_TimeGet  ===========
/*!
      \brief
         Get Time Of Day Information Element from IE List element.

         <h2>cmbs_api_ie_TimeGet</h2>

      <h3>Introduction</h3>
         Get Time Of Day Information Element from IE List element.

      <h3>Use cases</h3>
         Received Time Of Day IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_TimeGet ( void * pv_RefIE, ST_IE_TIMEOFDAY * pst_TimeOfDay )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_TimeOfDay     pointer to ST_IE_TIMEOFDAY structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_TimeGet( void * pv_RefIE, ST_IE_TIMEOFDAY * pst_TimeOfDay );

//*/
//    ==========  cmbs_api_ie_HandsetInfoGet  ===========
/*!
      \brief
         Get Handset Information Element from IE List element.

         <h2>cmbs_api_ie_HandsetInfoGet</h2>

      <h3>Introduction</h3>
         Get Handset Information Element from IE List element.

      <h3>Use cases</h3>
         Received Handset IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_HandsetInfoGet ( void * pv_RefIE, ST_IE_HANDSETINFO * pst_HandsetInfo )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_HandsetInfo   pointer to ST_IE_HANDSETINFO structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_HandsetInfoGet( void * pv_RefIE, ST_IE_HANDSETINFO * pst_HandsetInfo );

//*/
//    ==========  cmbs_api_ie_ParameterGet  ===========
/*!
      \brief
         Get CMBS Parameter Information Element from IE List element.

         <h2>cmbs_api_ie_ParameterGet</h2>

      <h3>Introduction</h3>
         Get CMBS Parameter Information Element from IE List element.

      <h3>Use cases</h3>
         Received CMBS Parameter IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_ParameterGet ( void * pv_RefIE, ST_IE_PARAMETER * pst_Parameter )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_Parameter     pointer to ST_IE_PARAMETER structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_ParameterGet( void * pv_RefIE, ST_IE_PARAMETER * pst_Parameter );

//*/
//    ==========  cmbs_api_ie_FwVersionGet  ===========
/*!
      \brief
         Get CMBS Firmware Version Information Element from IE List element.

         <h2>cmbs_api_ie_FwVersionGet</h2>

      <h3>Introduction</h3>
         Get CMBS Firmware Version Information Element from IE List element.

      <h3>Use cases</h3>
         Received CMBS Firmware Version IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_FwVersionGet ( void * pv_RefIE, ST_IE_FW_VERSION * pst_FwVersion )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_FwVersion     pointer to ST_IE_FW_VERSION structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_FwVersionGet( void * pv_RefIE, ST_IE_FW_VERSION * pst_FwVersion );

//*/
//    ==========  cmbs_api_ie_SysLogGet  ===========
/*!
      \brief
         Get CMBS Log Information Element from IE List element.

         <h2>cmbs_api_ie_SysLogGet</h2>

      <h3>Introduction</h3>
         Get CMBS Log Information Element from IE List element.

      <h3>Use cases</h3>
         Received CMBS Log from the module in the Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_SysLogGet ( void * pv_RefIE, ST_IE_SYS_LOG * pst_SysLog )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_SysLog        pointer to ST_IE_SYS_LOG structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_SysLogGet( void * pv_RefIE, ST_IE_SYS_LOG * pst_SysLog );

//*/
//    ==========  cmbs_api_ie_SysStatusGet  ===========
/*!
      \brief
         Get CMBS System Information Element from IE List element.

         <h2>cmbs_api_ie_SysStatusGet</h2>

      <h3>Introduction</h3>
         Get CMBS System Information Element from IE List element.

      <h3>Use cases</h3>
         Received CMBS System status from the module in the Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_SysStatusGet ( void * pv_RefIE, ST_IE_SYS_STATUS * pst_SysStatus )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_SysStatus     pointer to ST_IE_SYS_STATUS structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_SysStatusGet( void * pv_RefIE, ST_IE_SYS_STATUS * pst_SysStatus );

//*/
//    ==========  cmbs_api_ie_ResponseGet  ===========
/*!
      \brief
         Get CMBS Response Information Element from IE List element.

         <h2>cmbs_api_ie_ResponseGet</h2>

      <h3>Introduction</h3>
         Get Response Information Element from IE List element.

      <h3>Use cases</h3>
         Received CMBS Response IE from an Information Elements List.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_api_ie_ResponseGet ( void * pv_RefIE, ST_IE_RESPONSE * pst_Response )
         </b><br><br>
         The function extracts the IE data from the List element.<br>
         NOTE: Data is only valid in context of the callback function.

      \param[in]        pv_RefIE          pointer to IE list element returned by<br>
                                          cmbs_api_ie_GetFirst() or cmbs_api_ie_GetNext()
      \param[in,out]    pst_Response      pointer to ST_IE_RESPONSE structure

      \return           Return Code

      \see

      <b>Sample Code:</b><br><br>
      <code></code>
*/
E_CMBS_RC         cmbs_api_ie_ResponseGet( void * pv_RefIE, ST_IE_RESPONSE * pst_Response );

/*****************************************************************************
 * DSR (service) functions
 *****************************************************************************/

//*/
//    ==========  cmbs_dsr_sys_Start  ===========
/*!
      \brief
         Start CMBS on the target.

         <h2>cmbs_dsr_sys_Start</h2>

      <h3>Introduction</h3>
         Start CMBS on the target.

      <h3>Use cases</h3>
        Startup sequence of the application.

      <h3>API Functions description</h3>
         <b>
         ECMBS_ERROR cmbs_dsr_sys_Start ( void * pv_AppRefHandle )
         </b><br><br>
         On startup of the target, the host has to configure some parameters for the CMBS.<br>
         The target's CMBS is waiting in its boot sequence for all necessary parameters.<br>
         This function sends a CMBS_EV_DSR_SYS_START event to the target
         after CMBS parameters were set.<br><br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           Return code

      \see              CMBS_EV_DSR_SYS_START_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_sys_Start( void * pv_AppRefHandle );

//*/
//    ==========  cmbs_dsr_SYSReset  ===========
/*!
      \brief
         Resets the CMBS module.

         <h2>cmbs_dsr_SYSReset</h2>

      <h3>Introduction</h3>
         Resets the CMBS module

      <h3>Use cases</h3>
         System reboot.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_SYSReset ( void * pv_AppRefHandle )
         </b><br><br>
         This function requests the base station to perform a system reboot.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_sys_Reset( void * pv_AppRefHandle );

//*/
//    ==========  cmbs_dsr_sys_SendRawMsg  ===========
/*!
      \brief
         Sends a raw message.

         <h2>cmbs_dsr_sys_SendRawMsg</h2>

      <h3>Introduction</h3>
         Sends a raw OS message.

      <h3>Use cases</h3>
         Sending raw OS messages.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_sys_SendRawMsg ( void * pv_AppRefHandle, u8 u8_Process, u8 u8_Instance, u8 u8_Event,
                                            u16 u16_Info, u8 u16_DataLen, u8 *pu8_DataPtr )
         </b><br><br>
         This function enables the host to send a raw OS message to the CMBS.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        u8_Process        destination process
      \param[in]        u8_Instance       instance of destination process
      \param[in]        u8_Event          event to send
      \param[in]        u16_Info          16 bit additional info
      \param[in]        u16_DataLen       length of message data
      \param[in]        pu8_Data          pointer to message data

      \return           Return code

      \see              CMBS_EV_DSR_SYS_SEND_RAWMSG_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_sys_SendRawMsg( void * pv_AppRefHandle, u8 u8_Process, u8 u8_Instance,
                                           u8 u8_Event, u16 u16_Info, u8 u16_DataLen, u8 *pu8_Data );

//*/
//    ==========  cmbs_dsr_param_area_Get  ===========
/*!
      \brief
         Requests CMBS memory, as RAM or EEProm, S-Flash, etc.

         <h2>cmbs_dsr_param_area_Get</h2>

      <h3>Introduction</h3>
         Requests CMBS memory, as RAM or EEProm, S-Flash, etc.

      <h3>Use cases</h3>
         Reading EEprom area.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_param_area_Get( void * pv_AppRefHandle, E_CMBS_MEM_TYPE e_MemType, u32 u32_Location, u16 u16_Size );
         </b><br><br>
         This function requests the destination side to read data for the specified CMBS memory
         ( e.g. EEProm, RAM, etc. ).<br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        e_MemType         type of memory
      \param[in]        u32_Location      location in memory
      \param[in]        u16_Size          size of area, note that the requested area could be transmitted in several parts of 128 bytes
      \return           Return code

      \see              CMBS_EV_DSR_PARAM_GET_RES, with E_CMBS_PARAM_FLEX <br>

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_param_area_Get( void * pv_AppRefHandle, E_CMBS_MEM_TYPE e_MemType, u32 u32_Location, u16 u16_Size );

//*/
//    ==========  cmbs_dsr_param_area_Set  ===========
/*!
      \brief
         Writes data to CMBS memory, as RAM or EEProm, S-Flash, etc.

         <h2>cmbs_dsr_param_area_Set</h2>

      <h3>Introduction</h3>
         Writes data to CMBS memory, as RAM or EEProm, S-Flash, etc.

      <h3>Use cases</h3>
         Write EEprom area.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_param_area_Set( void * pv_AppRefHandle, E_CMBS_MEM_TYPE e_MemType, u32 u32_Location, u8* pu8_Data, u16 u16_Size );
         </b><br><br>
         This function requests the destination side to write data for the specified CMBS memory
         ( e.g. EEProm, RAM, etc. ).<br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        e_MemType         type of memory
      \param[in]        u32_Location      location in memory
      \param[in]        pu8_Data          pointer to be written data
      \param[in]        u16_Size          size of area, max size is 128 bytes
      \return           Return code

      \see              CMBS_EV_DSR_PARAM_SET_RES, with E_CMBS_PARAM_FLEX <br>

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_param_area_Set( void * pv_AppRefHandle, E_CMBS_MEM_TYPE e_MemType, u32 u32_Location, u8* pu8_Data, u16 u16_Size );


//*/
//    ==========  cmbs_dsr_param_Get  ===========
/*!
      \brief
         Requests a particular CMBS parameter value.

         <h2>cmbs_dsr_param_Get</h2>

      <h3>Introduction</h3>
         Requests a particular CMBS parameter value.

      <h3>Use cases</h3>
         Reading CMBS parameter data from base station.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_param_Get ( void * pv_AppRefHandle, E_CMBS_PARAM e_Param )
         </b><br><br>
         This function requests the destination side to read data for the specified CMBS parameter
         ( e.g. RFPI. See E_CMBS_PARAM enumeration ).<br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        e_Param           parameter identifier

      \return           Return code

      \see              CMBS_EV_DSR_PARAM_GET_RES<br>

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_param_Get( void * pv_AppRefHandle, E_CMBS_PARAM e_Param );

//*/
//    ==========  cmbs_dsr_param_Set  ===========
/*!
      \brief
         Sets / updates a particular CMBS parameter value.

         <h2>cmbs_dsr_param_Set</h2>

      <h3>Introduction</h3>
         Sets / updates a particular CMBS parameter value.

      <h3>Use cases</h3>
         Setting or updating data in the base station's volatile or non-volatile memory.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_param_Set ( void * pv_AppRefHandle, E_CMBS_PARAM e_Param, u8 * pu8_Data, u16 u16_DataLen )
         </b><br><br>
         This function updates data for the specified CMBS parameter( see E_CMBS_PARAM enumeration ).<br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        e_Param           specifies which value to be written
      \param[in]        pu8_Data          the new data
      \param[in]        u16_DataLen       data length in bytes

      \return           Return code

      \see              CMBS_EV_DSR_PARAM_SET_RES<br>

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_param_Set( void * pv_AppRefHandle, E_CMBS_PARAM e_Param, u8 * pu8_Data, u16 u16_DataLen );

//*/
//    ==========  cmbs_dsr_cord_OpenRegistration  ===========
/*!
      \brief
         Opens the Base station for registration.

         <h2>cmbs_dsr_cord_OpenRegistration</h2>

      <h3>Introduction</h3>
         Opens the Base station for registration.

      <h3>Use cases</h3>
         Used to open registration so handsets can be registered.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_cord_OpenRegistration ( void * pv_AppRefHandle )
         </b><br><br>
         In this mode, new handsets can be subscribed to the base.<br>
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           Return code

      \see              CMBS_EV_DSR_CORD_OPENREG_RES                        

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_cord_OpenRegistration( void * pv_AppRefHandle );

//*/
//    ==========  cmbs_dsr_cord_CloseRegistration  ===========
/*!
      \brief
         Closes the Base station for registration.

         <h2>cmbs_dsr_cord_CloseRegistration</h2>

      <h3>Introduction</h3>
         Closes the Base station for registration.

      <h3>Use cases</h3>
         Used to close registration after opening it.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_cord_CloseRegistration ( void * pv_AppRefHandle )
         </b><br><br>
         This function will close the registration mode previously opened by the
         cmbs_dsr_cord_OpenRegistration() function.<br>

      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           Return code

      \see              CMBS_EV_DSR_CORD_CLOSEREG_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_cord_CloseRegistration( void * pv_AppRefHandle );

//    ==========  cmbs_dsr_hs_Page  ===========
/*!
      \brief
         Activates the ringer on the specified handsets.

         <h2>cmbs_dsr_hs_Page</h2>

      <h3>Introduction</h3>
         Activates the ringer on the specified handsets.

      <h3>Use cases</h3>
         Paging function.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_hs_Page ( void * pv_AppRefHandle, u16 u16_Handsets )
         </b><br><br>
         This function will let the specified handsets ring.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        u16_Handsets      bitmask for handsets to be paged:
                                          bit 0 = handset 1, bit 1 = handset 2, etc.
                                          0xFFFF = all handsets

      \return           Return code

      \see              CMBS_EV_DSR_HS_PAGE_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_hs_Page( void * pv_AppRefHandle, u16 u16_Handsets );

//*/
//    ==========  cmbs_dsr_hs_Delete  ===========
/*!
      \brief
         Deletes one or more handsets.

         <h2>cmbs_dsr_hs_Delete</h2>

      <h3>Introduction</h3>
         Deletes one or more handsets.

      <h3>Use cases</h3>
         Delete handsets from the base's database.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_hs_Delete ( void * pv_AppRefHandle, u16 u16_Handsets )
         </b><br><br>
         This function will delete the specified handsets on the base station.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        u16_Handsets      bitmask for handsets to be deleted:
                                          bit 0 = handset 1, bit 1 = handset 2, etc.
                                          0xFFFF = all handsets

      \return           Return code

      \see              CMBS_EV_DSR_HS_DELETE_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_hs_Delete( void * pv_AppRefHandle, u16 u16_Handsets );

//*/
//    ==========  cmbs_dsr_fw_UpdateStart  ===========
/*!
      \brief
         Start firmware update.

         <h2>cmbs_dsr_fw_UpdateStart</h2>

      <h3>Introduction</h3>
         Start firmware update.

      <h3>Use cases</h3>
         Firmware update process.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_fw_UpdateStart ( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen )
         </b><br><br>
         This function starts the firmware update process and sends the first data packet to the base station.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pu8_Data          first firmware data packet
      \param[in]        u16_DataLen       length of data packet

      \return           Return code

      \see              CMBS_EV_DSR_FW_UPD_START_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_fw_UpdateStart( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen );

//*/
//    ==========  cmbs_dsr_fw_UpdatePacketNext  ===========
/*!
      \brief
         Provides next firmware data packet.

         <h2>cmbs_dsr_fw_UpdatePacketNext</h2>

      <h3>Introduction</h3>
         Provides next firmware data packet.

      <h3>Use cases</h3>
         Firmware management.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_fw_UpdatePacketNext ( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen )
         </b><br><br>
         This function sends the next firmware data packet to the base station.<br>
         It should be called after cmbs_dsr_fw_UpdateStart() if the number of data packets is greater than 2.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pu8_Data          next firmware data packet
      \param[in]        u16_DataLen       length of data packet

      \return           Return code

      \see              CMBS_EV_DSR_FW_UPD_PACKETNEXT_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_fw_UpdatePacketNext( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen );

//*/
//    ==========  cmbs_dsr_fw_UpdateEnd  ===========
/*!
      \brief
         Last firmware data packet.

         <h2>cmbs_dsr_fw_UpdateEnd</h2>

      <h3>Introduction</h3>
         Last firmware data packet.

      <h3>Use cases</h3>
         Firmware management.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_fw_UpdateEnd ( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen )
         </b><br><br>
         This function sends the last firmware data packet to the base station<br>
         and finalizes the update process.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pu8_Data          last firmware data packet
      \param[in]        u16_DataLen       length of data packet

      \return           Return code

      \see              CMBS_EV_DSR_FW_UPD_END_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_fw_UpdateEnd( void * pv_AppRefHandle, u8* pu8_Data, u16 u16_DataLen );

//*/
//    ==========  cmbs_dsr_fw_VersionGet  ===========
/*!
      \brief
         Get target firmware version for a specific software module.

         <h2>cmbs_dsr_fw_VersionGet</h2>

      <h3>Introduction</h3>
         Get target firmware version for a specific software module.

      <h3>Use cases</h3>
         Firmware management.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dsr_fw_VersionGet ( void * pv_AppRefHandle, E_CMBS_MODULE e_FwModule )
         </b><br><br>
         This function sends a get firmware version request to the base station.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        e_FwModule        firmware module identifier

      \return           Return code

      \see              CMBS_EV_DSR_FW_VERSION_GET_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dsr_fw_VersionGet( void * pv_AppRefHandle, E_CMBS_MODULE e_FwModule );

/*****************************************************************************
 * DEE (external endpoint) functions
 *****************************************************************************/

//*/
//    ==========  cmbs_dee_CallInstanceNew  ===========
/*!
      \brief
         Provide a new unique call instance ID to be used when establishing new call.

         <h2>cmbs_dee_CallInstanceNew</h2>

      <h3>Introduction</h3>
         Provide a new unique call instance ID to be used when establishing new call.

      <h3>Use cases</h3>
         The application wants to establish a new call.
         For any call establishment an unique call instance ID is required.

      <h3>API Functions description</h3>
         <b>
         u32 cmbs_dee_CallInstanceNew ( void * pv_AppRefHandle )
         </b><br><br>
         Returns a unique Call Instance ID which will be used in any call related function,
         from Call Establish to Call Release Complete.<br>
         Any cmbs_dee_ function must get this ID via a CMBS_IE_CALLINSTANCE Information Element.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()

      \return           Unique call instance ID

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
u32               cmbs_dee_CallInstanceNew( void * pv_AppRefHandle );

//*/
//    ==========  cmbs_dee_CallEstablish  ===========
/*!
      \brief
         Starts a new incoming or outgoing call.

         <h2>cmbs_dee_CallEstablish</h2>

      <h3>Introduction</h3>
         Starts a new incoming or outgoing call.

      <h3>Use cases</h3>
         Setting up a new call.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallEstablish ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function should be called by the application on detection of an incoming call.<br>
         It will also be called by the CMBS when the handset user has dialed an external number.<br>
         At this point, the application might instantiate the resources needed for a new call.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, X, , }
      \TABR4C{CMBS_IE_CALLERNAME, , X, }
      \TABR4C{CMBS_IE_CALLEDPARTY, X, , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, X, , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , X,  }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallEstablish( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallProgress  ===========
/*!
      \brief
         Sends call progress event.

         <h2>cmbs_dee_CallProgress</h2>

      <h3>Introduction</h3>
         Sends call progress event.

      <h3>Use cases</h3>
         Call progress as a response to Call establish event.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallProgress ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a call progress event together with call progress information.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, X, , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , X, If not used in this function\, it must be sent in cmbs_dee_CallAnswer()}
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallProgress( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallAnswer  ===========
/*!
      \brief
         Answer a call.

         <h2>cmbs_dee_CallAnswer</h2>

      <h3>Introduction</h3>
         Answer a call.

      <h3>Use cases</h3>
         Answer an establish call.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallAnswer ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function should be called as a response to Call Establish event.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, X, , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , X, }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallAnswer( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallRelease  ===========
/*!
      \brief
         Release an established call.

         <h2>cmbs_dee_CallRelease</h2>

      <h3>Introduction</h3>
         Release an established call.

      <h3>Use cases</h3>
         When call is to be released.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallRelease ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function should be called to release a Call.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , X, }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, X, , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , X, }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallRelease( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallReleaseComplete  ===========
/*!
      \brief
         Release Complete after receiving Release event.

         <h2>cmbs_dee_CallReleaseComplete</h2>

      <h3>Introduction</h3>
         Release Complete after receiving Release event.

      <h3>Use cases</h3>
         This function is called after receiving Release event.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallReleaseComplete ( void * pv_AppRefHandle, u32 u32_CallInstance )
         </b><br><br>
         This function should be called after receiving Release event.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        u32_CallInstance  call instance identifier

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallReleaseComplete( void * pv_AppRefHandle, u32 u32_CallInstance );

//*/
//    ==========  cmbs_dee_CallInbandInfo  ===========
/*!
      \brief
         Sends an in-band call information event.

         <h2>cmbs_dee_CallInbandInfo</h2>

      <h3>Introduction</h3>
         Sends an in-band call information event.

      <h3>Use cases</h3>
         Send In-Band Call event.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallInbandInfo ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a call in-band info event.<br>
       <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, ,X,In case of Call Waiting}
      \TABR4C{CMBS_IE_CALLERNAME, ,X,In case of Call Waiting}
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, X, , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , } 
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, ,X,In case of Call Waiting}
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallInbandInfo(void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallMediaOffer  ===========
/*!
      \brief
         Send media offering.

         <h2>cmbs_dee_CallMediaOffer</h2>

      <h3>Introduction</h3>
         Send media offering.

      <h3>Use cases</h3>
         When media is to be renegotiated.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallMediaOffer ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a media offer event with media descriptor IE.<br>
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, X, , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      \return           Return code

      \see              CMBS_EV_DEE_CALL_MEDIA_OFFER_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallMediaOffer( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallMediaOfferRes  ===========
/*!
      \brief
         Sends media offer response.

         <h2>cmbs_dee_CallMediaOfferRes</h2>

      <h3>Introduction</h3>
         Sends media offer response.

      <h3>Use cases</h3>
         Send a response to Media Offer event specifying the desired media descriptor.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallMediaOfferRes ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a call media offer response.<br>
         Application has selected a particular media for this call.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, X, , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallMediaOfferRes( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallHold  ===========
/*!
      \brief
         Sends a call hold event.

         <h2>cmbs_dee_CallHold</h2>

      <h3>Introduction</h3>
         Sends a call hold event.

      <h3>Use cases</h3>
         Puts the current call on hold.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallHold ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a call hold event, to put the current call on hold.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , X, }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallHold( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dee_CallResume  ===========
/*!
      \brief
         Sends a call resume event.

         <h2>cmbs_dee_CallResume</h2>

      <h3>Introduction</h3>
         Sends a call resume event.

      <h3>Use cases</h3>
         Resumes the previously held call.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dee_CallResume ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         This function sends a call resume event.<br>
         Used after a call hold.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, X, , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, , , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , X, }
      \TABEND

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dee_CallResume( void * pv_AppRefHandle, void * pv_RefIEList );


/*****************************************************************************
 * DEM (external media) functions
 *****************************************************************************/

//*/
//    ==========  cmbs_dem_ChannelStart  ===========
/*!
      \brief
         Start the media channel.

         <h2>cmbs_dem_ChannelStart</h2>

      <h3>Introduction</h3>
         Start the media channel.

      <h3>Use cases</h3>
         Called when media needs to be started.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dem_ChannelStart ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         Application wants to start the media.<br>
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, , , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, X, , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      NOTE: Media Channel received in one of the following callback events: <br>
         @li CMBS_EV_DEE_CALL_PROGRESS,
         @li CMBS_EV_DEE_CALL_ANSWER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER_RES,
         @li CMBS_EV_DEE_CALL_MEDIA_UPDATE

      \return           Return code

      \see              CMBS_EV_DEM_CHANNEL_START_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dem_ChannelStart( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dem_ChannelStop  ===========
/*!
      \brief
         Stops media channel.

         <h2>cmbs_dem_ChannelStop</h2>

      <h3>Introduction</h3>
         Stops media channel.

      <h3>Use cases</h3>
         When media is to be stopped.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dem_ChannelStop ( void * pv_AppRefHandle, u32 u32_ChannelID )
         </b><br><br>
         Application wants to stop media flow.<br>
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, , , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, X, , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      NOTE: Media Channel received in one of the following callback events: <br>
         @li CMBS_EV_DEE_CALL_PROGRESS,
         @li CMBS_EV_DEE_CALL_ANSWER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER_RES,
         @li CMBS_EV_DEE_CALL_MEDIA_UPDATE

      \return           Return code

      \see              CMBS_EV_DEM_CHANNEL_STOP_RES

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dem_ChannelStop( void * pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dem_ToneStart  ===========
/*!
      \brief
         Start the tone generation on CMBS.

         <h2>cmbs_dem_ToneStart</h2>

      <h3>Introduction</h3>
         Start the tone generation on CMBS.

      <h3>Use cases</h3>
         To generate dial-tone, call waiting tone, ring back-tone, etc.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dem_ToneStart ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         Application wants to start the tone generation.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, , , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, X, , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TONE, X, ,Contains the tone properties}
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      NOTE: The IE Tone select pre-defined tones according country specification,
            e.g. dial-tone, ring back tone, busy tone, hint tone, call waiting tone, etc.<br>

      Media Channel received in one of the following callback events: <br>
         @li CMBS_EV_DEE_CALL_PROGRESS,
         @li CMBS_EV_DEE_CALL_ANSWER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER_RES,
         @li CMBS_EV_DEE_CALL_MEDIA_UPDATE

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dem_ToneStart( void *pv_AppRefHandle, void * pv_RefIEList );

//*/
//    ==========  cmbs_dem_ToneStop  ===========
/*!
      \brief
         Stops CMBS tone generator.

         <h2>cmbs_dem_ToneStop</h2>

      <h3>Introduction</h3>
         Stops CMBS tone generator.

      <h3>Use cases</h3>
         When the destination has picked up the call and the CMBS was generating
         the ring-back tone, the application shall stop the tone generation.

      <h3>API Functions description</h3>
         <b>
         E_CMBS_RC cmbs_dem_ToneStop ( void * pv_AppRefHandle, void * pv_RefIEList )
         </b><br><br>
         Application wants to stop the tone generation.
        <br>
      \param[in]        pv_AppRefHandle   reference pointer to AppRefHandle received in cmbs_api_RegisterCb()
      \param[in]        pv_RefIEList      reference to IE List

      \TABSTART{Information Elements:}
      \TABR4C{CMBS_IE_CALLINSTANCE, , , }
      \TABR4C{CMBS_IE_CALLERPARTY, , , }
      \TABR4C{CMBS_IE_CALLERNAME, , , }
      \TABR4C{CMBS_IE_CALLEDPARTY, , , }
      \TABR4C{CMBS_IE_CALLINFO, , , }
      \TABR4C{CMBS_IE_CALLPROGRESS, , , }
      \TABR4C{CMBS_IE_CALLRELEASE_REASON, , , }
      \TABR4C{CMBS_IE_DISPLAY_STRING, , , }
      \TABR4C{CMBS_IE_MEDIACHANNEL, X, , }
      \TABR4C{CMBS_IE_MEDIADESCRIPTOR, , , }
      \TABR4C{CMBS_IE_TONE, , , }
      \TABR4C{CMBS_IE_TIMEOFDAY, , , }
      \TABEND

      NOTE: Media Channel received in one of the following callback events: <br>
         @li CMBS_EV_DEE_CALL_PROGRESS,
         @li CMBS_EV_DEE_CALL_ANSWER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER,
         @li CMBS_EV_DEE_CALL_MEDIA_OFFER_RES,
         @li CMBS_EV_DEE_CALL_MEDIA_UPDATE

      \return           Return code

      \see

      <b>Sample Code:</b><br>
      <code></code>
*/
E_CMBS_RC         cmbs_dem_ToneStop( void *pv_AppRefHandle, void * pv_RefIEList );

/*** Coding examples ***/
/*
void              ApplicationEstablishCall( void * pv_AppRefHandle )
{
   u32            u32_CallInstance;
   void *         pv_RefIEList = NULL;
   ST_IE_CALLEDPARTY
                  st_CalledParty;
   ST_IE_CALLERPARTY
                  st_CallerParty;
   
   char           szCallerAddress[] = "+49891234567";           
   char           szCalledAddress[] = "1";           
   
   // Create a new Call ID
   u32_CallInstance = cmbs_dee_CallInstanceNew( pv_AppRefHandle );

   // Initialize IE List
   pv_RefIEList = cmbs_api_ie_GetList();

   if( pv_RefIEList )
   {
      // Add Call Instance IE
      cmbs_api_ie_CallInstanceAdd( pv_RefIEList, u32_CallInstance );

      // Add Called ID IE
      st_CalledParty.u8_AddressProperties = CMBS_ADDR_PROPTYPE_UNKNOWN | CMBS_ADDR_PROPPLAN_INTHS;
      st_CalledParty.u8_AddressPresentation = CMBS_ADDR_PRESENT_ALLOW;
      st_CalledParty.u8_AddressLen = sizeof( szCalledAddress );
      st_CalledParty.pu8_Address = szCalledAddress;
         
      cmbs_api_ie_CalledPartyAdd( pv_RefIEList, &st_CalledParty );

      // Add Caller ID IE
      st_CallerParty.u8_AddressProperties = CMBS_ADDR_PROPTYPE_INTERNATIONAL | CMBS_ADDR_PROPPLAN_E164;
      st_CallerParty.u8_AddressPresentation = CMBS_ADDR_PRESENT_ALLOW;
      st_CallerParty.u8_AddressLen = sizeof( szCallerAddress );
      st_CallerParty.pu8_Address = szCallerAddress;
   
      cmbs_api_ie_CallerPartyAdd( pv_RefIEList, &st_CallerParty );
      .
      // add more Information Elements
      .
      
      // Establish the Call
      cmbs_dee_CallEstablish( pv_AppRefHandle, pv_RefIEList );
      
      // Housekeeping: free the IEList
      cmbs_api_ie_FreeList( pv_RefIEList );
   }
}



typedef struct _ST_EV_DEE
{
   u32  u32_InstanceID;
   pu8* pu8_IEBuffer;
   u16  u16_Length;
} ST_EV_DEE;

void  OnCallEstablish ( void * pv_Reference, ST_EV_DEE * pst_Param )
{
   E_CMBS_IE_TYPE e_IE;

   pCallInstance = CallInstanceFindByID ( pst_Param->u32_InstanceID );

   if ( !pCallInstance )
   {
         pCallInstance = CallInstanceNew ( pst_Param->u32_InstanceID );
   }

   pu8_Tmp = pu8_IEBuffer;
   pu8_End = pu8_IEBuffer + pst_Param->u16_Length;

   while ( pu8_Tmp < pu8_End )
   {
      e_IE = cmbs_api_ParamGetNext( pu8_Tmp, pu8_End, u16 * pu8_ContentLength, &e_Error );
      switch (e_IE )
      {
         case CMBS_IE_CALLERPARTY:
            cmbs_api_ie_CallerPartyGet( pu8_Tmp, pCallInstance->pst_CallerParty );
         break;
         case CMBS_IE_CALLEDPARTY:
            cmbs_api_ie_CalledPartyGet( pu8_Tmp, pCallInstance->pst_CalledParty );
         break;
         case CMBS_IE_MEDIA_TYPE:
         case CMBS_IE_MEDIA_AUDIODESCR:
         case CMBS_IE_MEDIA_IOM:
      }

           pTmp += *pu8_ContentLength
   }

   // call callmanager to provide establish request

}


E_CMBS_RC fct_CMBSReceiveCallback ( void * pv_Reference, E_CMBS_EVENT_ID e_EventID, void * pv_EventParam )
{
   switch ( e_EventID )
   {
      case CMBS_EV_DEE_CALL_ESTABLISH:
         OnCallEstablish ( pv_Reference, (ST_EV_DEE*)pv_EventParam );
      break;
   }
}
*/


#if defined( __cplusplus )
}
#endif

#endif   // CMBS_API_H
